

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Apr 11 21:10:30 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53  0000                     
    54                           ; Version 1.45
    55                           ; Generated 16/11/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F45K20 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	idataCOMRAM
    90  002450                     __pidataCOMRAM:
    91                           	opt stack 0
    92                           
    93                           ;initializer for _latitude
    94  002450  59                 	db	low _lat
    95  002451  00                 	db	high _lat
    96                           
    97                           ;initializer for _longitude
    98  002452  79                 	db	low _lon
    99  002453  00                 	db	high _lon
   100                           
   101                           	psect	smallconst
   102  000600                     __psmallconst:
   103                           	opt stack 0
   104  000600  00                 	db	0
   105  000601                     _dpowers:
   106                           	opt stack 0
   107  000601  0001               	dw	1
   108  000603  0000               	dw	0
   109  000605  000A               	dw	10
   110  000607  0000               	dw	0
   111  000609  0064               	dw	100
   112  00060B  0000               	dw	0
   113  00060D  03E8               	dw	1000
   114  00060F  0000               	dw	0
   115  000611  2710               	dw	10000
   116  000613  0000               	dw	0
   117  000615  86A0               	dw	34464
   118  000617  0001               	dw	1
   119  000619  4240               	dw	16960
   120  00061B  000F               	dw	15
   121  00061D  9680               	dw	38528
   122  00061F  0098               	dw	152
   123  000621  E100               	dw	57600
   124  000623  05F5               	dw	1525
   125  000625  CA00               	dw	51712
   126  000627  3B9A               	dw	15258
   127  000629                     __end_of_dpowers:
   128                           	opt stack 0
   129  0000                     _INTCONbits	set	4082
   130  0000                     _PIE1bits	set	3997
   131  0000                     _TRISBbits	set	3987
   132  0000                     _OSCCONbits	set	4051
   133  0000                     _ADCON1	set	4033
   134  0000                     _TXREG	set	4013
   135  0000                     _RCREG	set	4014
   136  0000                     _SPBRG	set	4015
   137  0000                     _PORTDbits	set	3971
   138  0000                     _TRISDbits	set	3989
   139  0000                     _RCIF	set	31989
   140  0000                     _TRMT	set	32097
   141  0000                     _TXEN	set	32101
   142  0000                     _CREN	set	32092
   143  0000                     _TRISC6	set	31910
   144  0000                     _TRISC7	set	31911
   145  0000                     _SPEN	set	32095
   146  0000                     _SYNC	set	32100
   147  0000                     _BRGH	set	32098
   148  000629                     STR_1:
   149  000629  20                 	db	32
   150  00062A  20                 	db	32
   151  00062B  20                 	db	32
   152  00062C  50                 	db	80	;'P'
   153  00062D  49                 	db	73	;'I'
   154  00062E  43                 	db	67	;'C'
   155  00062F  31                 	db	49	;'1'
   156  000630  38                 	db	56	;'8'
   157  000631  46                 	db	70	;'F'
   158  000632  34                 	db	52	;'4'
   159  000633  35                 	db	53	;'5'
   160  000634  4B                 	db	75	;'K'
   161  000635  32                 	db	50	;'2'
   162  000636  30                 	db	48	;'0'
   163  000637  20                 	db	32
   164  000638  20                 	db	32
   165  000639  20                 	db	32
   166  00063A  00                 	db	0
   167  00063B                     STR_2:
   168  00063B  20                 	db	32
   169  00063C  20                 	db	32
   170  00063D  20                 	db	32
   171  00063E  4D                 	db	77	;'M'
   172  00063F  6F                 	db	111	;'o'
   173  000640  64                 	db	100	;'d'
   174  000641  75                 	db	117	;'u'
   175  000642  6C                 	db	108	;'l'
   176  000643  6F                 	db	111	;'o'
   177  000644  20                 	db	32
   178  000645  47                 	db	71	;'G'
   179  000646  50                 	db	80	;'P'
   180  000647  53                 	db	83	;'S'
   181  000648  20                 	db	32
   182  000649  20                 	db	32
   183  00064A  20                 	db	32
   184  00064B  00                 	db	0
   185  00064C                     STR_3:
   186  00064C  45                 	db	69	;'E'
   187  00064D  73                 	db	115	;'s'
   188  00064E  70                 	db	112	;'p'
   189  00064F  65                 	db	101	;'e'
   190  000650  72                 	db	114	;'r'
   191  000651  61                 	db	97	;'a'
   192  000652  6E                 	db	110	;'n'
   193  000653  64                 	db	100	;'d'
   194  000654  6F                 	db	111	;'o'
   195  000655  20                 	db	32
   196  000656  73                 	db	115	;'s'
   197  000657  65                 	db	101	;'e'
   198  000658  F1                 	db	-15
   199  000659  61                 	db	97	;'a'
   200  00065A  6C                 	db	108	;'l'
   201  00065B  00                 	db	0
   202  00065C                     STR_12:
   203  00065C  25                 	db	37
   204  00065D  6C                 	db	108	;'l'
   205  00065E  75                 	db	117	;'u'
   206  00065F  2E                 	db	46
   207  000660  25                 	db	37
   208  000661  36                 	db	54	;'6'
   209  000662  2E                 	db	46
   210  000663  36                 	db	54	;'6'
   211  000664  6C                 	db	108	;'l'
   212  000665  75                 	db	117	;'u'
   213  000666  00                 	db	0
   214  000667                     STR_6:
   215  000667  24                 	db	36
   216  000668  47                 	db	71	;'G'
   217  000669  50                 	db	80	;'P'
   218  00066A  47                 	db	71	;'G'
   219  00066B  4C                 	db	76	;'L'
   220  00066C  4C                 	db	76	;'L'
   221  00066D  00                 	db	0
   222  00066E                     STR_7:
   223  00066E  2C                 	db	44
   224  00066F  00                 	db	0
   225  0000                     
   226                           ; #config settings
   227  000670  00                 	db	0	; dummy byte at the end
   228  0000                     
   229                           	psect	cinit
   230  002162                     __pcinit:
   231                           	opt stack 0
   232  002162                     start_initialization:
   233                           	opt stack 0
   234  002162                     __initialization:
   235                           	opt stack 0
   236                           
   237                           ; Initialize objects allocated to COMRAM (4 bytes)
   238                           ; load TBLPTR registers with __pidataCOMRAM
   239  002162  0E50               	movlw	low __pidataCOMRAM
   240  002164  6EF6               	movwf	tblptrl,c
   241  002166  0E24               	movlw	high __pidataCOMRAM
   242  002168  6EF7               	movwf	tblptrh,c
   243  00216A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   244  00216C  6EF8               	movwf	tblptru,c
   245  00216E  EE00  F05C         	lfsr	0,__pdataCOMRAM
   246  002172  EE10 F004          	lfsr	1,4
   247  002176                     copy_data0:
   248  002176  0009               	tblrd		*+
   249  002178  CFF5 FFEE          	movff	tablat,postinc0
   250  00217C  50E5               	movf	postdec1,w,c
   251  00217E  50E1               	movf	fsr1l,w,c
   252  002180  E1FA               	bnz	copy_data0
   253                           
   254                           ; Clear objects allocated to BIGRAM (300 bytes)
   255  002182  EE04  F0D4         	lfsr	0,__pbssBIGRAM
   256  002186  EE11 F02C          	lfsr	1,300
   257  00218A                     clear_0:
   258  00218A  6AEE               	clrf	postinc0,c
   259  00218C  50E5               	movf	postdec1,w,c
   260  00218E  50E1               	movf	fsr1l,w,c
   261  002190  E1FC               	bnz	clear_0
   262  002192  50E2               	movf	fsr1h,w,c
   263  002194  E1FA               	bnz	clear_0
   264                           
   265                           ; Clear objects allocated to BANK0 (28 bytes)
   266  002196  EE00  F060         	lfsr	0,__pbssBANK0
   267  00219A  0E1C               	movlw	28
   268  00219C                     clear_1:
   269  00219C  6AEE               	clrf	postinc0,c
   270  00219E  06E8               	decf	wreg,f,c
   271  0021A0  E1FD               	bnz	clear_1
   272                           
   273                           ; Clear objects allocated to COMRAM (11 bytes)
   274  0021A2  EE00  F051         	lfsr	0,__pbssCOMRAM
   275  0021A6  0E0B               	movlw	11
   276  0021A8                     clear_2:
   277  0021A8  6AEE               	clrf	postinc0,c
   278  0021AA  06E8               	decf	wreg,f,c
   279  0021AC  E1FD               	bnz	clear_2
   280  0021AE                     end_of_initialization:
   281                           	opt stack 0
   282  0021AE                     __end_of__initialization:
   283                           	opt stack 0
   284  0021AE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   285  0021B0  6EF8               	movwf	tblptru,c
   286  0021B2  0100               	movlb	0
   287  0021B4  EF33  F00C         	goto	_main	;jump to C main() function
   288                           tblptru	equ	0xFF8
   289                           tblptrh	equ	0xFF7
   290                           tblptrl	equ	0xFF6
   291                           tablat	equ	0xFF5
   292                           postinc0	equ	0xFEE
   293                           wreg	equ	0xFE8
   294                           postdec1	equ	0xFE5
   295                           fsr1h	equ	0xFE2
   296                           fsr1l	equ	0xFE1
   297                           
   298                           	psect	bssCOMRAM
   299  000051                     __pbssCOMRAM:
   300                           	opt stack 0
   301  000051                     _terminator:
   302                           	opt stack 0
   303  000051                     	ds	2
   304  000053                     _i:
   305                           	opt stack 0
   306  000053                     	ds	2
   307  000055                     _data:
   308                           	opt stack 0
   309  000055                     	ds	2
   310  000057                     _d:
   311                           	opt stack 0
   312  000057                     	ds	1
   313  000058                     _c:
   314                           	opt stack 0
   315  000058                     	ds	1
   316  000059                     _lat:
   317                           	opt stack 0
   318  000059                     	ds	3
   319                           tblptru	equ	0xFF8
   320                           tblptrh	equ	0xFF7
   321                           tblptrl	equ	0xFF6
   322                           tablat	equ	0xFF5
   323                           postinc0	equ	0xFEE
   324                           wreg	equ	0xFE8
   325                           postdec1	equ	0xFE5
   326                           fsr1h	equ	0xFE2
   327                           fsr1l	equ	0xFE1
   328                           
   329                           	psect	dataCOMRAM
   330  00005C                     __pdataCOMRAM:
   331                           	opt stack 0
   332  00005C                     _latitude:
   333                           	opt stack 0
   334  00005C                     	ds	2
   335  00005E                     _longitude:
   336                           	opt stack 0
   337  00005E                     	ds	2
   338                           tblptru	equ	0xFF8
   339                           tblptrh	equ	0xFF7
   340                           tblptrl	equ	0xFF6
   341                           tablat	equ	0xFF5
   342                           postinc0	equ	0xFEE
   343                           wreg	equ	0xFE8
   344                           postdec1	equ	0xFE5
   345                           fsr1h	equ	0xFE2
   346                           fsr1l	equ	0xFE1
   347                           
   348                           	psect	bssBANK0
   349  000060                     __pbssBANK0:
   350                           	opt stack 0
   351  000060                     ftoa@buf:
   352                           	opt stack 0
   353  000060                     	ds	17
   354  000071                     _conversionString:
   355                           	opt stack 0
   356  000071                     	ds	8
   357  000079                     _lon:
   358                           	opt stack 0
   359  000079                     	ds	3
   360                           tblptru	equ	0xFF8
   361                           tblptrh	equ	0xFF7
   362                           tblptrl	equ	0xFF6
   363                           tablat	equ	0xFF5
   364                           postinc0	equ	0xFEE
   365                           wreg	equ	0xFE8
   366                           postdec1	equ	0xFE5
   367                           fsr1h	equ	0xFE2
   368                           fsr1l	equ	0xFE1
   369                           
   370                           	psect	bssBIGRAM
   371  0004D4                     __pbssBIGRAM:
   372                           	opt stack 0
   373  0004D4                     _uartBuffer:
   374                           	opt stack 0
   375  0004D4                     	ds	300
   376                           tblptru	equ	0xFF8
   377                           tblptrh	equ	0xFF7
   378                           tblptrl	equ	0xFF6
   379                           tablat	equ	0xFF5
   380                           postinc0	equ	0xFEE
   381                           wreg	equ	0xFE8
   382                           postdec1	equ	0xFE5
   383                           fsr1h	equ	0xFE2
   384                           fsr1l	equ	0xFE1
   385                           
   386                           	psect	cstackCOMRAM
   387  000001                     __pcstackCOMRAM:
   388                           	opt stack 0
   389  000001                     ??_Lcd_Cmd:
   390  000001                     ??_Lcd_Chr_CP:
   391  000001                     ??_isdigit:
   392  000001                     ??_isspace:
   393  000001                     ?_strlen:
   394                           	opt stack 0
   395  000001                     ?_strchr:
   396                           	opt stack 0
   397  000001                     ?___wmul:
   398                           	opt stack 0
   399  000001                     ?___ftpack:
   400                           	opt stack 0
   401  000001                     ?___ftneg:
   402                           	opt stack 0
   403  000001                     ?___lmul:
   404                           	opt stack 0
   405  000001                     ?___aldiv:
   406                           	opt stack 0
   407  000001                     ?___lldiv:
   408                           	opt stack 0
   409  000001                     UART_Read_Char@Output:
   410                           	opt stack 0
   411  000001                     ___wmul@multiplier:
   412                           	opt stack 0
   413  000001                     memcpy@d1:
   414                           	opt stack 0
   415  000001                     memset@p1:
   416                           	opt stack 0
   417  000001                     strchr@ptr:
   418                           	opt stack 0
   419  000001                     strlen@s:
   420                           	opt stack 0
   421  000001                     ___ftpack@arg:
   422                           	opt stack 0
   423  000001                     ___ftge@ff1:
   424                           	opt stack 0
   425  000001                     ___ftneg@f1:
   426                           	opt stack 0
   427  000001                     ___lmul@multiplier:
   428                           	opt stack 0
   429  000001                     ___aldiv@dividend:
   430                           	opt stack 0
   431  000001                     ___lldiv@dividend:
   432                           	opt stack 0
   433                           
   434                           ; 4 bytes @ 0x0
   435  000001                     	ds	1
   436  000002                     _isdigit$734:
   437                           	opt stack 0
   438  000002                     _isspace$737:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x1
   442  000002                     	ds	1
   443  000003                     ??_strlen:
   444  000003                     ??_UART_Read_Char:
   445  000003                     Lcd_Chr_CP@data:
   446                           	opt stack 0
   447  000003                     Lcd_Cmd@data:
   448                           	opt stack 0
   449  000003                     isdigit@c:
   450                           	opt stack 0
   451  000003                     isspace@c:
   452                           	opt stack 0
   453  000003                     ___wmul@multiplicand:
   454                           	opt stack 0
   455  000003                     memcpy@s1:
   456                           	opt stack 0
   457  000003                     memset@c:
   458                           	opt stack 0
   459  000003                     strchr@chr:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x2
   463  000003                     	ds	1
   464  000004                     ??_Lcd_Init:
   465  000004                     Lcd_Out@x:
   466                           	opt stack 0
   467  000004                     ___ftpack@exp:
   468                           	opt stack 0
   469  000004                     LCD_String@str:
   470                           	opt stack 0
   471  000004                     ___ftge@ff2:
   472                           	opt stack 0
   473                           
   474                           ; 3 bytes @ 0x3
   475  000004                     	ds	1
   476  000005                     Lcd_Init@data:
   477                           	opt stack 0
   478  000005                     ___ftpack@sign:
   479                           	opt stack 0
   480  000005                     Lcd_Out@buffer:
   481                           	opt stack 0
   482  000005                     ___wmul@product:
   483                           	opt stack 0
   484  000005                     memcpy@n:
   485                           	opt stack 0
   486  000005                     memset@n:
   487                           	opt stack 0
   488  000005                     strlen@cp:
   489                           	opt stack 0
   490  000005                     ___lmul@multiplicand:
   491                           	opt stack 0
   492  000005                     ___aldiv@divisor:
   493                           	opt stack 0
   494  000005                     ___lldiv@divisor:
   495                           	opt stack 0
   496                           
   497                           ; 4 bytes @ 0x4
   498  000005                     	ds	1
   499  000006                     ??___ftpack:
   500  000006                     
   501                           ; 1 bytes @ 0x5
   502  000006                     	ds	1
   503  000007                     ??___ftge:
   504  000007                     ?_strncmp:
   505                           	opt stack 0
   506  000007                     Lcd_Out@y:
   507                           	opt stack 0
   508  000007                     memcpy@d:
   509                           	opt stack 0
   510  000007                     memset@p:
   511                           	opt stack 0
   512  000007                     strncmp@s1:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x6
   516  000007                     	ds	1
   517  000008                     Lcd_Out@data:
   518                           	opt stack 0
   519                           
   520                           ; 1 bytes @ 0x7
   521  000008                     	ds	1
   522  000009                     ?___ftdiv:
   523                           	opt stack 0
   524  000009                     ?___ftmul:
   525                           	opt stack 0
   526  000009                     ?___altoft:
   527                           	opt stack 0
   528  000009                     ?___lltoft:
   529                           	opt stack 0
   530  000009                     ___aldiv@counter:
   531                           	opt stack 0
   532  000009                     memcpy@s:
   533                           	opt stack 0
   534  000009                     strncmp@s2:
   535                           	opt stack 0
   536  000009                     ___ftdiv@f1:
   537                           	opt stack 0
   538  000009                     ___ftmul@f1:
   539                           	opt stack 0
   540  000009                     ___lmul@product:
   541                           	opt stack 0
   542  000009                     ___altoft@c:
   543                           	opt stack 0
   544  000009                     ___lldiv@quotient:
   545                           	opt stack 0
   546  000009                     ___lltoft@c:
   547                           	opt stack 0
   548                           
   549                           ; 4 bytes @ 0x8
   550  000009                     	ds	1
   551  00000A                     ___aldiv@sign:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x9
   555  00000A                     	ds	1
   556  00000B                     memcpy@tmp:
   557                           	opt stack 0
   558  00000B                     strncmp@len:
   559                           	opt stack 0
   560  00000B                     ___aldiv@quotient:
   561                           	opt stack 0
   562                           
   563                           ; 4 bytes @ 0xA
   564  00000B                     	ds	1
   565  00000C                     ___ftdiv@f2:
   566                           	opt stack 0
   567  00000C                     ___ftmul@f2:
   568                           	opt stack 0
   569                           
   570                           ; 3 bytes @ 0xB
   571  00000C                     	ds	1
   572  00000D                     ??_strncmp:
   573  00000D                     ??___altoft:
   574  00000D                     ??___lltoft:
   575  00000D                     ___lldiv@counter:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0xC
   579  00000D                     	ds	1
   580  00000E                     ?___llmod:
   581                           	opt stack 0
   582  00000E                     ___llmod@dividend:
   583                           	opt stack 0
   584                           
   585                           ; 4 bytes @ 0xD
   586  00000E                     	ds	1
   587  00000F                     ??___ftdiv:
   588  00000F                     ??___ftmul:
   589  00000F                     UART_Init@baudrate:
   590                           	opt stack 0
   591                           
   592                           ; 4 bytes @ 0xE
   593  00000F                     	ds	1
   594  000010                     ?_strstr:
   595                           	opt stack 0
   596  000010                     strstr@s1:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0xF
   600  000010                     	ds	1
   601  000011                     ___altoft@exp:
   602                           	opt stack 0
   603  000011                     ___lltoft@exp:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x10
   607  000011                     	ds	1
   608  000012                     ___altoft@sign:
   609                           	opt stack 0
   610  000012                     ___ftdiv@cntr:
   611                           	opt stack 0
   612  000012                     ___ftmul@exp:
   613                           	opt stack 0
   614  000012                     strstr@s2:
   615                           	opt stack 0
   616  000012                     ___llmod@divisor:
   617                           	opt stack 0
   618                           
   619                           ; 4 bytes @ 0x11
   620  000012                     	ds	1
   621  000013                     ??_UART_Init:
   622  000013                     ___ftdiv@f3:
   623                           	opt stack 0
   624  000013                     ___ftmul@f3_as_product:
   625                           	opt stack 0
   626                           
   627                           ; 3 bytes @ 0x12
   628  000013                     	ds	1
   629  000014                     
   630                           ; 1 bytes @ 0x13
   631  000014                     	ds	2
   632  000016                     ___ftdiv@exp:
   633                           	opt stack 0
   634  000016                     ___ftmul@cntr:
   635                           	opt stack 0
   636  000016                     ___llmod@counter:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0x15
   640  000016                     	ds	1
   641  000017                     ?_sprintf:
   642                           	opt stack 0
   643  000017                     ___ftdiv@sign:
   644                           	opt stack 0
   645  000017                     ___ftmul@sign:
   646                           	opt stack 0
   647  000017                     sprintf@sp:
   648                           	opt stack 0
   649                           
   650                           ; 2 bytes @ 0x16
   651  000017                     	ds	1
   652  000018                     ?_strtod:
   653                           	opt stack 0
   654  000018                     ?___fttol:
   655                           	opt stack 0
   656  000018                     strtod@s:
   657                           	opt stack 0
   658  000018                     ___fttol@f1:
   659                           	opt stack 0
   660                           
   661                           ; 3 bytes @ 0x17
   662  000018                     	ds	1
   663  000019                     sprintf@f:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0x18
   667  000019                     	ds	1
   668  00001A                     strtod@res:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0x19
   672  00001A                     	ds	1
   673  00001B                     UART_Init@x:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x1A
   677  00001B                     	ds	1
   678  00001C                     ??_strtod:
   679  00001C                     ??___fttol:
   680                           
   681                           ; 1 bytes @ 0x1B
   682  00001C                     	ds	1
   683  00001D                     strtod@eexp:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x1C
   687  00001D                     	ds	1
   688  00001E                     strtod@flags:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x1D
   692  00001E                     	ds	1
   693  00001F                     strtod@expon:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x1E
   697  00001F                     	ds	1
   698  000020                     strtod@_u:
   699                           	opt stack 0
   700                           
   701                           ; 4 bytes @ 0x1F
   702  000020                     	ds	1
   703  000021                     ___fttol@sign1:
   704                           	opt stack 0
   705                           
   706                           ; 1 bytes @ 0x20
   707  000021                     	ds	1
   708  000022                     ___fttol@lval:
   709                           	opt stack 0
   710                           
   711                           ; 4 bytes @ 0x21
   712  000022                     	ds	1
   713  000023                     ??_sprintf:
   714                           
   715                           ; 1 bytes @ 0x22
   716  000023                     	ds	1
   717  000024                     ?_atof:
   718                           	opt stack 0
   719  000024                     atof@s:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x23
   723  000024                     	ds	2
   724  000026                     ___fttol@exp1:
   725                           	opt stack 0
   726                           
   727                           ; 1 bytes @ 0x25
   728  000026                     	ds	1
   729  000027                     ?___ftadd:
   730                           	opt stack 0
   731  000027                     sprintf@flag:
   732                           	opt stack 0
   733  000027                     ___ftadd@f1:
   734                           	opt stack 0
   735                           
   736                           ; 3 bytes @ 0x26
   737  000027                     	ds	1
   738  000028                     sprintf@ap:
   739                           	opt stack 0
   740                           
   741                           ; 2 bytes @ 0x27
   742  000028                     	ds	2
   743  00002A                     ___ftadd@f2:
   744                           	opt stack 0
   745  00002A                     sprintf@val:
   746                           	opt stack 0
   747                           
   748                           ; 4 bytes @ 0x29
   749  00002A                     	ds	3
   750  00002D                     ??___ftadd:
   751                           
   752                           ; 1 bytes @ 0x2C
   753  00002D                     	ds	1
   754  00002E                     sprintf@width:
   755                           	opt stack 0
   756                           
   757                           ; 2 bytes @ 0x2D
   758  00002E                     	ds	2
   759  000030                     ___ftadd@sign:
   760                           	opt stack 0
   761  000030                     sprintf@prec:
   762                           	opt stack 0
   763                           
   764                           ; 2 bytes @ 0x2F
   765  000030                     	ds	1
   766  000031                     ___ftadd@exp2:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0x30
   770  000031                     	ds	1
   771  000032                     sprintf@c:
   772                           	opt stack 0
   773  000032                     ___ftadd@exp1:
   774                           	opt stack 0
   775                           
   776                           ; 1 bytes @ 0x31
   777  000032                     	ds	1
   778  000033                     ??_read_gps:
   779  000033                     ?___ftsub:
   780                           	opt stack 0
   781  000033                     ___ftsub@f1:
   782                           	opt stack 0
   783                           
   784                           ; 3 bytes @ 0x32
   785  000033                     	ds	2
   786  000035                     _read_gps$1135:
   787                           	opt stack 0
   788                           
   789                           ; 3 bytes @ 0x34
   790  000035                     	ds	1
   791  000036                     ___ftsub@f2:
   792                           	opt stack 0
   793                           
   794                           ; 3 bytes @ 0x35
   795  000036                     	ds	3
   796  000039                     ?_ftoa:
   797                           	opt stack 0
   798  000039                     ftoa@f:
   799                           	opt stack 0
   800                           
   801                           ; 3 bytes @ 0x38
   802  000039                     	ds	3
   803  00003C                     ftoa@status:
   804                           	opt stack 0
   805                           
   806                           ; 2 bytes @ 0x3B
   807  00003C                     	ds	2
   808  00003E                     ftoa@rem:
   809                           	opt stack 0
   810                           
   811                           ; 4 bytes @ 0x3D
   812  00003E                     	ds	4
   813  000042                     ftoa@l:
   814                           	opt stack 0
   815                           
   816                           ; 4 bytes @ 0x41
   817  000042                     	ds	4
   818  000046                     ftoa@cp:
   819                           	opt stack 0
   820                           
   821                           ; 2 bytes @ 0x45
   822  000046                     	ds	2
   823  000048                     Lcd_Write_Float@f:
   824                           	opt stack 0
   825                           
   826                           ; 3 bytes @ 0x47
   827  000048                     	ds	3
   828  00004B                     Lcd_Write_Float@status:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0x4A
   832  00004B                     	ds	2
   833  00004D                     Lcd_Write_Float@buf11:
   834                           	opt stack 0
   835                           
   836                           ; 2 bytes @ 0x4C
   837  00004D                     	ds	2
   838  00004F                     ??_main:
   839                           
   840                           ; 1 bytes @ 0x4E
   841  00004F                     	ds	2
   842                           tblptru	equ	0xFF8
   843                           tblptrh	equ	0xFF7
   844                           tblptrl	equ	0xFF6
   845                           tablat	equ	0xFF5
   846                           postinc0	equ	0xFEE
   847                           wreg	equ	0xFE8
   848                           postdec1	equ	0xFE5
   849                           fsr1h	equ	0xFE2
   850                           fsr1l	equ	0xFE1
   851                           
   852 ;;
   853 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   854 ;;
   855 ;; *************** function _main *****************
   856 ;; Defined at:
   857 ;;		line 58 in file "main.c"
   858 ;; Parameters:    Size  Location     Type
   859 ;;		None
   860 ;; Auto vars:     Size  Location     Type
   861 ;;		None
   862 ;; Return value:  Size  Location     Type
   863 ;;                  1    wreg      void 
   864 ;; Registers used:
   865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   866 ;; Tracked objects:
   867 ;;		On entry : 0/0
   868 ;;		On exit  : 0/0
   869 ;;		Unchanged: 0/0
   870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   871 ;;      Params:         0       0       0       0       0       0       0
   872 ;;      Locals:         0       0       0       0       0       0       0
   873 ;;      Temps:          2       0       0       0       0       0       0
   874 ;;      Totals:         2       0       0       0       0       0       0
   875 ;;Total ram usage:        2 bytes
   876 ;; Hardware stack levels required when called:    5
   877 ;; This function calls:
   878 ;;		_Lcd_Cmd
   879 ;;		_Lcd_Init
   880 ;;		_Lcd_Out
   881 ;;		_Lcd_Write_Float
   882 ;;		_UART_Init
   883 ;;		_read_gps
   884 ;; This function is called by:
   885 ;;		Startup code after reset
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889                           	psect	text0
   890  001866                     __ptext0:
   891                           	opt stack 0
   892  001866                     _main:
   893                           	opt stack 26
   894                           
   895                           ;main.c: 60: ADCON1 = 0x0F;
   896                           
   897                           ;incstack = 0
   898  001866  0E0F               	movlw	15
   899  001868  6EC1               	movwf	4033,c	;volatile
   900                           
   901                           ;main.c: 61: OSCCONbits.IRCF = 7;
   902  00186A  88D3               	bsf	4051,4,c	;volatile
   903  00186C  8AD3               	bsf	4051,5,c	;volatile
   904  00186E  8CD3               	bsf	4051,6,c	;volatile
   905                           
   906                           ;main.c: 62: TRISBbits.RB0 = 0;
   907  001870  9093               	bcf	3987,0,c	;volatile
   908                           
   909                           ;main.c: 63: TRISBbits.RB1 = 0;
   910  001872  9293               	bcf	3987,1,c	;volatile
   911                           
   912                           ;main.c: 64: Lcd_Init();
   913  001874  EC20  F00B         	call	_Lcd_Init	;wreg free
   914                           
   915                           ;main.c: 65: Lcd_Cmd(12);
   916  001878  0E0C               	movlw	12
   917  00187A  EC8C  F00A         	call	_Lcd_Cmd
   918                           
   919                           ;main.c: 66: Lcd_Cmd(1);
   920  00187E  0E01               	movlw	1
   921  001880  EC8C  F00A         	call	_Lcd_Cmd
   922                           
   923                           ;main.c: 67: Lcd_Out(1,1,"   PIC18F45K20   ");
   924  001884  0E01               	movlw	1
   925  001886  6E04               	movwf	Lcd_Out@x,c
   926  001888  0E29               	movlw	low STR_1
   927  00188A  6E05               	movwf	Lcd_Out@buffer,c
   928  00188C  0E06               	movlw	high STR_1
   929  00188E  6E06               	movwf	Lcd_Out@buffer+1,c
   930  001890  0E01               	movlw	1
   931  001892  EC1C  F010         	call	_Lcd_Out
   932                           
   933                           ;main.c: 68: Lcd_Out(2,1,"   Modulo GPS   ");
   934  001896  0E01               	movlw	1
   935  001898  6E04               	movwf	Lcd_Out@x,c
   936  00189A  0E3B               	movlw	low STR_2
   937  00189C  6E05               	movwf	Lcd_Out@buffer,c
   938  00189E  0E06               	movlw	high STR_2
   939  0018A0  6E06               	movwf	Lcd_Out@buffer+1,c
   940  0018A2  0E02               	movlw	2
   941  0018A4  EC1C  F010         	call	_Lcd_Out
   942                           
   943                           ;main.c: 69: _delay((unsigned long)((1000)*(800000/4000.0)));
   944  0018A8  0E02               	movlw	2
   945  0018AA  6E50               	movwf	(??_main+1)& (0+255),c
   946  0018AC  0E04               	movlw	4
   947  0018AE  6E4F               	movwf	??_main& (0+255),c
   948  0018B0  0EBA               	movlw	186
   949  0018B2                     u3367:
   950  0018B2  2EE8               	decfsz	wreg,f,c
   951  0018B4  D7FE               	bra	u3367
   952  0018B6  2E4F               	decfsz	??_main& (0+255),f,c
   953  0018B8  D7FC               	bra	u3367
   954  0018BA  2E50               	decfsz	(??_main+1)& (0+255),f,c
   955  0018BC  D7FA               	bra	u3367
   956  0018BE  F000 F000          	nop2	
   957                           
   958                           ;main.c: 70: Lcd_Cmd(1);
   959  0018C2  0E01               	movlw	1
   960  0018C4  EC8C  F00A         	call	_Lcd_Cmd
   961                           
   962                           ;main.c: 71: Lcd_Out(1,1,"Esperando señal");
   963  0018C8  0E01               	movlw	1
   964  0018CA  6E04               	movwf	Lcd_Out@x,c
   965  0018CC  0E4C               	movlw	low STR_3
   966  0018CE  6E05               	movwf	Lcd_Out@buffer,c
   967  0018D0  0E06               	movlw	high STR_3
   968  0018D2  6E06               	movwf	Lcd_Out@buffer+1,c
   969  0018D4  0E01               	movlw	1
   970  0018D6  EC1C  F010         	call	_Lcd_Out
   971                           
   972                           ;main.c: 73: UART_Init(9600);
   973  0018DA  0E80               	movlw	128
   974  0018DC  6E0F               	movwf	UART_Init@baudrate,c
   975  0018DE  0E25               	movlw	37
   976  0018E0  6E10               	movwf	UART_Init@baudrate+1,c
   977  0018E2  0E00               	movlw	0
   978  0018E4  6E11               	movwf	UART_Init@baudrate+2,c
   979  0018E6  0E00               	movlw	0
   980  0018E8  6E12               	movwf	UART_Init@baudrate+3,c
   981  0018EA  ECF6  F009         	call	_UART_Init	;wreg free
   982                           
   983                           ;main.c: 75: PIE1bits.RCIE = 1;
   984  0018EE  8A9D               	bsf	3997,5,c	;volatile
   985                           
   986                           ;main.c: 77: INTCONbits.GIE = 1;
   987  0018F0  8EF2               	bsf	intcon,7,c	;volatile
   988                           
   989                           ;main.c: 78: INTCONbits.PEIE = 1;
   990  0018F2  8CF2               	bsf	intcon,6,c	;volatile
   991                           
   992                           ;main.c: 80: _delay((unsigned long)((100)*(800000/4000.0)));
   993  0018F4  0E1A               	movlw	26
   994  0018F6  6E4F               	movwf	??_main& (0+255),c
   995  0018F8  0EF8               	movlw	248
   996  0018FA                     u3377:
   997  0018FA  2EE8               	decfsz	wreg,f,c
   998  0018FC  D7FE               	bra	u3377
   999  0018FE  2E4F               	decfsz	??_main& (0+255),f,c
  1000  001900  D7FC               	bra	u3377
  1001  001902  F000 F000          	nop2	
  1002  001906                     
  1003                           ;main.c: 82: {
  1004                           ;main.c: 83: read_gps();
  1005  001906  EC1B  F005         	call	_read_gps	;wreg free
  1006                           
  1007                           ;main.c: 84: Lcd_Out(1,1,"");
  1008  00190A  0E01               	movlw	1
  1009  00190C  6E04               	movwf	Lcd_Out@x,c
  1010  00190E  0E3A               	movlw	low (STR_1+17)
  1011  001910  6E05               	movwf	Lcd_Out@buffer,c
  1012  001912  0E06               	movlw	high (STR_1+17)
  1013  001914  6E06               	movwf	Lcd_Out@buffer+1,c
  1014  001916  0E01               	movlw	1
  1015  001918  EC1C  F010         	call	_Lcd_Out
  1016                           
  1017                           ;main.c: 85: Lcd_Write_Float(*latitude);
  1018  00191C  C05C  FFD9         	movff	_latitude,fsr2l
  1019  001920  C05D  FFDA         	movff	_latitude+1,fsr2h
  1020  001924  CFDE F048          	movff	postinc2,Lcd_Write_Float@f
  1021  001928  CFDE F049          	movff	postinc2,Lcd_Write_Float@f+1
  1022  00192C  CFDD F04A          	movff	postdec2,Lcd_Write_Float@f+2
  1023  001930  EC83  F011         	call	_Lcd_Write_Float	;wreg free
  1024                           
  1025                           ;main.c: 86: Lcd_Out(1,1,"");
  1026  001934  0E01               	movlw	1
  1027  001936  6E04               	movwf	Lcd_Out@x,c
  1028  001938  0E3A               	movlw	low (STR_1+17)
  1029  00193A  6E05               	movwf	Lcd_Out@buffer,c
  1030  00193C  0E06               	movlw	high (STR_1+17)
  1031  00193E  6E06               	movwf	Lcd_Out@buffer+1,c
  1032  001940  0E01               	movlw	1
  1033  001942  EC1C  F010         	call	_Lcd_Out
  1034                           
  1035                           ;main.c: 87: Lcd_Write_Float(*latitude);
  1036  001946  C05C  FFD9         	movff	_latitude,fsr2l
  1037  00194A  C05D  FFDA         	movff	_latitude+1,fsr2h
  1038  00194E  CFDE F048          	movff	postinc2,Lcd_Write_Float@f
  1039  001952  CFDE F049          	movff	postinc2,Lcd_Write_Float@f+1
  1040  001956  CFDD F04A          	movff	postdec2,Lcd_Write_Float@f+2
  1041  00195A  EC83  F011         	call	_Lcd_Write_Float	;wreg free
  1042  00195E  D7D3               	goto	l168
  1043  001960                     __end_of_main:
  1044                           	opt stack 0
  1045                           tblptru	equ	0xFF8
  1046                           tblptrh	equ	0xFF7
  1047                           tblptrl	equ	0xFF6
  1048                           tablat	equ	0xFF5
  1049                           intcon	equ	0xFF2
  1050                           postinc0	equ	0xFEE
  1051                           wreg	equ	0xFE8
  1052                           postdec1	equ	0xFE5
  1053                           fsr1h	equ	0xFE2
  1054                           fsr1l	equ	0xFE1
  1055                           postinc2	equ	0xFDE
  1056                           postdec2	equ	0xFDD
  1057                           fsr2h	equ	0xFDA
  1058                           fsr2l	equ	0xFD9
  1059                           
  1060 ;; *************** function _read_gps *****************
  1061 ;; Defined at:
  1062 ;;		line 93 in file "main.c"
  1063 ;; Parameters:    Size  Location     Type
  1064 ;;		None
  1065 ;; Auto vars:     Size  Location     Type
  1066 ;;		None
  1067 ;; Return value:  Size  Location     Type
  1068 ;;                  1    wreg      void 
  1069 ;; Registers used:
  1070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1071 ;; Tracked objects:
  1072 ;;		On entry : 0/0
  1073 ;;		On exit  : 0/0
  1074 ;;		Unchanged: 0/0
  1075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1076 ;;      Params:         0       0       0       0       0       0       0
  1077 ;;      Locals:         3       0       0       0       0       0       0
  1078 ;;      Temps:          2       0       0       0       0       0       0
  1079 ;;      Totals:         5       0       0       0       0       0       0
  1080 ;;Total ram usage:        5 bytes
  1081 ;; Hardware stack levels used:    1
  1082 ;; Hardware stack levels required when called:    4
  1083 ;; This function calls:
  1084 ;;		_UART_Read_Char
  1085 ;;		___ftadd
  1086 ;;		___ftdiv
  1087 ;;		___ftmul
  1088 ;;		_atof
  1089 ;;		_memcpy
  1090 ;;		_memset
  1091 ;;		_strstr
  1092 ;; This function is called by:
  1093 ;;		_main
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text1
  1098  000A36                     __ptext1:
  1099                           	opt stack 0
  1100  000A36                     _read_gps:
  1101                           	opt stack 26
  1102                           
  1103                           ;main.c: 95: for(i=0; i<sizeof(uartBuffer)-1; i++)
  1104                           
  1105                           ;incstack = 0
  1106  000A36  0E00               	movlw	0
  1107  000A38  6E54               	movwf	_i+1,c
  1108  000A3A  0E00               	movlw	0
  1109  000A3C  6E53               	movwf	_i,c
  1110  000A3E  D014               	goto	l3102
  1111  000A40                     
  1112                           ;main.c: 96: {
  1113                           ;main.c: 97: d = UART_Read_Char(c);
  1114  000A40  5058               	movf	_c,w,c	;volatile
  1115  000A42  6E33               	movwf	??_read_gps& (0+255),c
  1116  000A44  6A34               	clrf	(??_read_gps+1)& (0+255),c
  1117  000A46  C033  F001         	movff	??_read_gps,UART_Read_Char@Output
  1118  000A4A  C034  F002         	movff	??_read_gps+1,UART_Read_Char@Output+1
  1119  000A4E  EC1A  F012         	call	_UART_Read_Char	;wreg free
  1120  000A52  6E57               	movwf	_d,c	;volatile
  1121                           
  1122                           ;main.c: 98: uartBuffer[i] = d;
  1123  000A54  0ED4               	movlw	low _uartBuffer
  1124  000A56  2453               	addwf	_i,w,c
  1125  000A58  6ED9               	movwf	fsr2l,c
  1126  000A5A  0E04               	movlw	high _uartBuffer
  1127  000A5C  2054               	addwfc	_i+1,w,c
  1128  000A5E  6EDA               	movwf	fsr2h,c
  1129  000A60  C057  FFDF         	movff	_d,indf2	;volatile
  1130  000A64  4A53               	infsnz	_i,f,c
  1131  000A66  2A54               	incf	_i+1,f,c
  1132  000A68                     l3102:
  1133  000A68  0E2B               	movlw	43
  1134  000A6A  5C53               	subwf	_i,w,c
  1135  000A6C  0E01               	movlw	1
  1136  000A6E  5854               	subwfb	_i+1,w,c
  1137  000A70  A0D8               	btfss	status,0,c
  1138  000A72  D7E6               	goto	l174
  1139                           
  1140                           ;main.c: 99: }
  1141                           ;main.c: 101: uartBuffer[sizeof(uartBuffer)-1] = '\0';
  1142  000A74  0E00               	movlw	0
  1143  000A76  CFE8 F5FF          	movff	wreg,_uartBuffer+299
  1144                           
  1145                           ;main.c: 103: data = strstr(uartBuffer, "$GPGLL");
  1146  000A7A  0ED4               	movlw	low _uartBuffer
  1147  000A7C  6E10               	movwf	strstr@s1,c
  1148  000A7E  0E04               	movlw	high _uartBuffer
  1149  000A80  6E11               	movwf	strstr@s1+1,c
  1150  000A82  0E67               	movlw	low STR_6
  1151  000A84  6E12               	movwf	strstr@s2,c
  1152  000A86  0E06               	movlw	high STR_6
  1153  000A88  6E13               	movwf	strstr@s2+1,c
  1154  000A8A  EC1C  F00F         	call	_strstr	;wreg free
  1155  000A8E  C010  F055         	movff	?_strstr,_data
  1156  000A92  C011  F056         	movff	?_strstr+1,_data+1
  1157                           
  1158                           ;main.c: 105: if(data == (0))
  1159  000A96  5055               	movf	_data,w,c
  1160  000A98  1056               	iorwf	_data+1,w,c
  1161  000A9A  B4D8               	btfsc	status,2,c
  1162  000A9C  0012               	return	
  1163                           
  1164                           ;main.c: 108: }
  1165                           ;main.c: 110: terminator = strstr(data,",");
  1166                           
  1167                           ;main.c: 106: {
  1168                           ;main.c: 107: return;
  1169  000A9E  C055  F010         	movff	_data,strstr@s1
  1170  000AA2  C056  F011         	movff	_data+1,strstr@s1+1
  1171  000AA6  0E6E               	movlw	low STR_7
  1172  000AA8  6E12               	movwf	strstr@s2,c
  1173  000AAA  0E06               	movlw	high STR_7
  1174  000AAC  6E13               	movwf	strstr@s2+1,c
  1175  000AAE  EC1C  F00F         	call	_strstr	;wreg free
  1176  000AB2  C010  F051         	movff	?_strstr,_terminator
  1177  000AB6  C011  F052         	movff	?_strstr+1,_terminator+1
  1178                           
  1179                           ;main.c: 112: if(terminator == (0))
  1180  000ABA  5051               	movf	_terminator,w,c
  1181  000ABC  1052               	iorwf	_terminator+1,w,c
  1182  000ABE  B4D8               	btfsc	status,2,c
  1183  000AC0  0012               	return	
  1184                           
  1185                           ;main.c: 115: }
  1186                           ;main.c: 118: if(data[7] == ',')
  1187                           
  1188                           ;main.c: 113: {
  1189                           ;main.c: 114: return;
  1190  000AC2  EE20 F007          	lfsr	2,7
  1191  000AC6  5055               	movf	_data,w,c
  1192  000AC8  26D9               	addwf	fsr2l,f,c
  1193  000ACA  5056               	movf	_data+1,w,c
  1194  000ACC  22DA               	addwfc	fsr2h,f,c
  1195  000ACE  0E2C               	movlw	44
  1196  000AD0  18DE               	xorwf	postinc2,w,c
  1197  000AD2  B4D8               	btfsc	status,2,c
  1198  000AD4  0012               	return	
  1199                           
  1200                           ;main.c: 121: }
  1201                           ;main.c: 126: data = terminator+1;
  1202                           
  1203                           ;main.c: 119: {
  1204                           ;main.c: 120: return;
  1205  000AD6  0E01               	movlw	1
  1206  000AD8  2451               	addwf	_terminator,w,c
  1207  000ADA  6E55               	movwf	_data,c
  1208  000ADC  0E00               	movlw	0
  1209  000ADE  2052               	addwfc	_terminator+1,w,c
  1210  000AE0  6E56               	movwf	_data+1,c
  1211                           
  1212                           ;main.c: 127: terminator = strstr(data,",");
  1213  000AE2  C055  F010         	movff	_data,strstr@s1
  1214  000AE6  C056  F011         	movff	_data+1,strstr@s1+1
  1215  000AEA  0E6E               	movlw	low STR_7
  1216  000AEC  6E12               	movwf	strstr@s2,c
  1217  000AEE  0E06               	movlw	high STR_7
  1218  000AF0  6E13               	movwf	strstr@s2+1,c
  1219  000AF2  EC1C  F00F         	call	_strstr	;wreg free
  1220  000AF6  C010  F051         	movff	?_strstr,_terminator
  1221  000AFA  C011  F052         	movff	?_strstr+1,_terminator+1
  1222                           
  1223                           ;main.c: 128: if(terminator == (0))
  1224  000AFE  5051               	movf	_terminator,w,c
  1225  000B00  1052               	iorwf	_terminator+1,w,c
  1226  000B02  B4D8               	btfsc	status,2,c
  1227  000B04  0012               	return	
  1228                           
  1229                           ;main.c: 131: }
  1230                           ;main.c: 132: memset(conversionString,0,sizeof(conversionString));
  1231                           
  1232                           ;main.c: 129: {
  1233                           ;main.c: 130: return;
  1234  000B06  0E71               	movlw	low _conversionString
  1235  000B08  6E01               	movwf	memset@p1,c
  1236  000B0A  0E00               	movlw	high _conversionString
  1237  000B0C  6E02               	movwf	memset@p1+1,c
  1238  000B0E  0E00               	movlw	0
  1239  000B10  6E04               	movwf	memset@c+1,c
  1240  000B12  0E00               	movlw	0
  1241  000B14  6E03               	movwf	memset@c,c
  1242  000B16  0E00               	movlw	0
  1243  000B18  6E06               	movwf	memset@n+1,c
  1244  000B1A  0E08               	movlw	8
  1245  000B1C  6E05               	movwf	memset@n,c
  1246  000B1E  EC9A  F011         	call	_memset	;wreg free
  1247                           
  1248                           ;main.c: 133: memcpy(conversionString, data, 2);
  1249  000B22  0E71               	movlw	low _conversionString
  1250  000B24  6E01               	movwf	memcpy@d1,c
  1251  000B26  0E00               	movlw	high _conversionString
  1252  000B28  6E02               	movwf	memcpy@d1+1,c
  1253  000B2A  C055  F003         	movff	_data,memcpy@s1
  1254  000B2E  C056  F004         	movff	_data+1,memcpy@s1+1
  1255  000B32  0E00               	movlw	0
  1256  000B34  6E06               	movwf	memcpy@n+1,c
  1257  000B36  0E02               	movlw	2
  1258  000B38  6E05               	movwf	memcpy@n,c
  1259  000B3A  EC07  F011         	call	_memcpy	;wreg free
  1260                           
  1261                           ;main.c: 134: *latitude = atof(conversionString);
  1262  000B3E  0E71               	movlw	low _conversionString
  1263  000B40  6E24               	movwf	atof@s,c
  1264  000B42  0E00               	movlw	high _conversionString
  1265  000B44  6E25               	movwf	atof@s+1,c
  1266  000B46  ECFA  F011         	call	_atof	;wreg free
  1267  000B4A  C05C  FFD9         	movff	_latitude,fsr2l
  1268  000B4E  C05D  FFDA         	movff	_latitude+1,fsr2h
  1269  000B52  C024  FFDE         	movff	?_atof,postinc2
  1270  000B56  C025  FFDE         	movff	?_atof+1,postinc2
  1271  000B5A  C026  FFDE         	movff	?_atof+2,postinc2
  1272                           
  1273                           ;main.c: 135: data += 2;
  1274  000B5E  0E02               	movlw	2
  1275  000B60  2655               	addwf	_data,f,c
  1276  000B62  0E00               	movlw	0
  1277  000B64  2256               	addwfc	_data+1,f,c
  1278                           
  1279                           ;main.c: 136: *terminator = '\0';
  1280  000B66  C051  FFD9         	movff	_terminator,fsr2l
  1281  000B6A  C052  FFDA         	movff	_terminator+1,fsr2h
  1282  000B6E  0E00               	movlw	0
  1283  000B70  6EDF               	movwf	indf2,c
  1284                           
  1285                           ;main.c: 137: *latitude += (atof(data)/60);
  1286  000B72  C055  F024         	movff	_data,atof@s
  1287  000B76  C056  F025         	movff	_data+1,atof@s+1
  1288  000B7A  ECFA  F011         	call	_atof	;wreg free
  1289  000B7E  C024  F035         	movff	?_atof,_read_gps$1135
  1290  000B82  C025  F036         	movff	?_atof+1,_read_gps$1135+1
  1291  000B86  C026  F037         	movff	?_atof+2,_read_gps$1135+2
  1292                           
  1293                           ;main.c: 137: *latitude += (atof(data)/60);
  1294  000B8A  C05C  FFD9         	movff	_latitude,fsr2l
  1295  000B8E  C05D  FFDA         	movff	_latitude+1,fsr2h
  1296  000B92  CFDE F027          	movff	postinc2,___ftadd@f1
  1297  000B96  CFDE F028          	movff	postinc2,___ftadd@f1+1
  1298  000B9A  CFDD F029          	movff	postdec2,___ftadd@f1+2
  1299  000B9E  0E00               	movlw	0
  1300  000BA0  6E0C               	movwf	___ftdiv@f2,c
  1301  000BA2  0E70               	movlw	112
  1302  000BA4  6E0D               	movwf	___ftdiv@f2+1,c
  1303  000BA6  0E42               	movlw	66
  1304  000BA8  6E0E               	movwf	___ftdiv@f2+2,c
  1305  000BAA  C035  F009         	movff	_read_gps$1135,___ftdiv@f1
  1306  000BAE  C036  F00A         	movff	_read_gps$1135+1,___ftdiv@f1+1
  1307  000BB2  C037  F00B         	movff	_read_gps$1135+2,___ftdiv@f1+2
  1308  000BB6  ECA4  F00D         	call	___ftdiv	;wreg free
  1309  000BBA  C009  F02A         	movff	?___ftdiv,___ftadd@f2
  1310  000BBE  C00A  F02B         	movff	?___ftdiv+1,___ftadd@f2+1
  1311  000BC2  C00B  F02C         	movff	?___ftdiv+2,___ftadd@f2+2
  1312  000BC6  EC82  F008         	call	___ftadd	;wreg free
  1313  000BCA  C05C  FFD9         	movff	_latitude,fsr2l
  1314  000BCE  C05D  FFDA         	movff	_latitude+1,fsr2h
  1315  000BD2  C027  FFDE         	movff	?___ftadd,postinc2
  1316  000BD6  C028  FFDE         	movff	?___ftadd+1,postinc2
  1317  000BDA  C029  FFDE         	movff	?___ftadd+2,postinc2
  1318                           
  1319                           ;main.c: 138: data = terminator+1;
  1320  000BDE  0E01               	movlw	1
  1321  000BE0  2451               	addwf	_terminator,w,c
  1322  000BE2  6E55               	movwf	_data,c
  1323  000BE4  0E00               	movlw	0
  1324  000BE6  2052               	addwfc	_terminator+1,w,c
  1325  000BE8  6E56               	movwf	_data+1,c
  1326                           
  1327                           ;main.c: 139: terminator = strstr(data,",");
  1328  000BEA  C055  F010         	movff	_data,strstr@s1
  1329  000BEE  C056  F011         	movff	_data+1,strstr@s1+1
  1330  000BF2  0E6E               	movlw	low STR_7
  1331  000BF4  6E12               	movwf	strstr@s2,c
  1332  000BF6  0E06               	movlw	high STR_7
  1333  000BF8  6E13               	movwf	strstr@s2+1,c
  1334  000BFA  EC1C  F00F         	call	_strstr	;wreg free
  1335  000BFE  C010  F051         	movff	?_strstr,_terminator
  1336  000C02  C011  F052         	movff	?_strstr+1,_terminator+1
  1337                           
  1338                           ;main.c: 140: if(terminator == (0))
  1339  000C06  5051               	movf	_terminator,w,c
  1340  000C08  1052               	iorwf	_terminator+1,w,c
  1341  000C0A  B4D8               	btfsc	status,2,c
  1342  000C0C  0012               	return	
  1343                           
  1344                           ;main.c: 143: }
  1345                           ;main.c: 144: if(*data == 'S')
  1346                           
  1347                           ;main.c: 141: {
  1348                           ;main.c: 142: return;
  1349  000C0E  C055  FFD9         	movff	_data,fsr2l
  1350  000C12  C056  FFDA         	movff	_data+1,fsr2h
  1351  000C16  0E53               	movlw	83
  1352  000C18  18DE               	xorwf	postinc2,w,c
  1353  000C1A  A4D8               	btfss	status,2,c
  1354  000C1C  D01C               	goto	l182
  1355                           
  1356                           ;main.c: 145: {
  1357                           ;main.c: 146: *latitude *= -1;
  1358  000C1E  C05C  FFD9         	movff	_latitude,fsr2l
  1359  000C22  C05D  FFDA         	movff	_latitude+1,fsr2h
  1360  000C26  CFDE F009          	movff	postinc2,___ftmul@f1
  1361  000C2A  CFDE F00A          	movff	postinc2,___ftmul@f1+1
  1362  000C2E  CFDD F00B          	movff	postdec2,___ftmul@f1+2
  1363  000C32  0E00               	movlw	0
  1364  000C34  6E0C               	movwf	___ftmul@f2,c
  1365  000C36  0E80               	movlw	128
  1366  000C38  6E0D               	movwf	___ftmul@f2+1,c
  1367  000C3A  0EBF               	movlw	191
  1368  000C3C  6E0E               	movwf	___ftmul@f2+2,c
  1369  000C3E  EC2A  F00D         	call	___ftmul	;wreg free
  1370  000C42  C05C  FFD9         	movff	_latitude,fsr2l
  1371  000C46  C05D  FFDA         	movff	_latitude+1,fsr2h
  1372  000C4A  C009  FFDE         	movff	?___ftmul,postinc2
  1373  000C4E  C00A  FFDE         	movff	?___ftmul+1,postinc2
  1374  000C52  C00B  FFDE         	movff	?___ftmul+2,postinc2
  1375  000C56                     l182:
  1376                           
  1377                           ;main.c: 147: }
  1378                           ;main.c: 148: data = terminator+1;
  1379  000C56  0E01               	movlw	1
  1380  000C58  2451               	addwf	_terminator,w,c
  1381  000C5A  6E55               	movwf	_data,c
  1382  000C5C  0E00               	movlw	0
  1383  000C5E  2052               	addwfc	_terminator+1,w,c
  1384  000C60  6E56               	movwf	_data+1,c
  1385                           
  1386                           ;main.c: 149: terminator = strstr(data,",");
  1387  000C62  C055  F010         	movff	_data,strstr@s1
  1388  000C66  C056  F011         	movff	_data+1,strstr@s1+1
  1389  000C6A  0E6E               	movlw	low STR_7
  1390  000C6C  6E12               	movwf	strstr@s2,c
  1391  000C6E  0E06               	movlw	high STR_7
  1392  000C70  6E13               	movwf	strstr@s2+1,c
  1393  000C72  EC1C  F00F         	call	_strstr	;wreg free
  1394  000C76  C010  F051         	movff	?_strstr,_terminator
  1395  000C7A  C011  F052         	movff	?_strstr+1,_terminator+1
  1396                           
  1397                           ;main.c: 150: if(terminator == (0))
  1398  000C7E  5051               	movf	_terminator,w,c
  1399  000C80  1052               	iorwf	_terminator+1,w,c
  1400  000C82  B4D8               	btfsc	status,2,c
  1401  000C84  0012               	return	
  1402                           
  1403                           ;main.c: 153: }
  1404                           ;main.c: 154: memset(conversionString,0,sizeof(conversionString));
  1405                           
  1406                           ;main.c: 151: {
  1407                           ;main.c: 152: return;
  1408  000C86  0E71               	movlw	low _conversionString
  1409  000C88  6E01               	movwf	memset@p1,c
  1410  000C8A  0E00               	movlw	high _conversionString
  1411  000C8C  6E02               	movwf	memset@p1+1,c
  1412  000C8E  0E00               	movlw	0
  1413  000C90  6E04               	movwf	memset@c+1,c
  1414  000C92  0E00               	movlw	0
  1415  000C94  6E03               	movwf	memset@c,c
  1416  000C96  0E00               	movlw	0
  1417  000C98  6E06               	movwf	memset@n+1,c
  1418  000C9A  0E08               	movlw	8
  1419  000C9C  6E05               	movwf	memset@n,c
  1420  000C9E  EC9A  F011         	call	_memset	;wreg free
  1421                           
  1422                           ;main.c: 155: memcpy(conversionString, data, 3);
  1423  000CA2  0E71               	movlw	low _conversionString
  1424  000CA4  6E01               	movwf	memcpy@d1,c
  1425  000CA6  0E00               	movlw	high _conversionString
  1426  000CA8  6E02               	movwf	memcpy@d1+1,c
  1427  000CAA  C055  F003         	movff	_data,memcpy@s1
  1428  000CAE  C056  F004         	movff	_data+1,memcpy@s1+1
  1429  000CB2  0E00               	movlw	0
  1430  000CB4  6E06               	movwf	memcpy@n+1,c
  1431  000CB6  0E03               	movlw	3
  1432  000CB8  6E05               	movwf	memcpy@n,c
  1433  000CBA  EC07  F011         	call	_memcpy	;wreg free
  1434                           
  1435                           ;main.c: 156: *longitude = atof(conversionString);
  1436  000CBE  0E71               	movlw	low _conversionString
  1437  000CC0  6E24               	movwf	atof@s,c
  1438  000CC2  0E00               	movlw	high _conversionString
  1439  000CC4  6E25               	movwf	atof@s+1,c
  1440  000CC6  ECFA  F011         	call	_atof	;wreg free
  1441  000CCA  C05E  FFD9         	movff	_longitude,fsr2l
  1442  000CCE  C05F  FFDA         	movff	_longitude+1,fsr2h
  1443  000CD2  C024  FFDE         	movff	?_atof,postinc2
  1444  000CD6  C025  FFDE         	movff	?_atof+1,postinc2
  1445  000CDA  C026  FFDE         	movff	?_atof+2,postinc2
  1446                           
  1447                           ;main.c: 157: data += 3;
  1448  000CDE  0E03               	movlw	3
  1449  000CE0  2655               	addwf	_data,f,c
  1450  000CE2  0E00               	movlw	0
  1451  000CE4  2256               	addwfc	_data+1,f,c
  1452                           
  1453                           ;main.c: 158: *terminator = '\0';
  1454  000CE6  C051  FFD9         	movff	_terminator,fsr2l
  1455  000CEA  C052  FFDA         	movff	_terminator+1,fsr2h
  1456  000CEE  0E00               	movlw	0
  1457  000CF0  6EDF               	movwf	indf2,c
  1458                           
  1459                           ;main.c: 159: *longitude += (atof(data)/60);
  1460  000CF2  C055  F024         	movff	_data,atof@s
  1461  000CF6  C056  F025         	movff	_data+1,atof@s+1
  1462  000CFA  ECFA  F011         	call	_atof	;wreg free
  1463  000CFE  C024  F035         	movff	?_atof,_read_gps$1135
  1464  000D02  C025  F036         	movff	?_atof+1,_read_gps$1135+1
  1465  000D06  C026  F037         	movff	?_atof+2,_read_gps$1135+2
  1466                           
  1467                           ;main.c: 159: *longitude += (atof(data)/60);
  1468  000D0A  C05E  FFD9         	movff	_longitude,fsr2l
  1469  000D0E  C05F  FFDA         	movff	_longitude+1,fsr2h
  1470  000D12  CFDE F027          	movff	postinc2,___ftadd@f1
  1471  000D16  CFDE F028          	movff	postinc2,___ftadd@f1+1
  1472  000D1A  CFDD F029          	movff	postdec2,___ftadd@f1+2
  1473  000D1E  0E00               	movlw	0
  1474  000D20  6E0C               	movwf	___ftdiv@f2,c
  1475  000D22  0E70               	movlw	112
  1476  000D24  6E0D               	movwf	___ftdiv@f2+1,c
  1477  000D26  0E42               	movlw	66
  1478  000D28  6E0E               	movwf	___ftdiv@f2+2,c
  1479  000D2A  C035  F009         	movff	_read_gps$1135,___ftdiv@f1
  1480  000D2E  C036  F00A         	movff	_read_gps$1135+1,___ftdiv@f1+1
  1481  000D32  C037  F00B         	movff	_read_gps$1135+2,___ftdiv@f1+2
  1482  000D36  ECA4  F00D         	call	___ftdiv	;wreg free
  1483  000D3A  C009  F02A         	movff	?___ftdiv,___ftadd@f2
  1484  000D3E  C00A  F02B         	movff	?___ftdiv+1,___ftadd@f2+1
  1485  000D42  C00B  F02C         	movff	?___ftdiv+2,___ftadd@f2+2
  1486  000D46  EC82  F008         	call	___ftadd	;wreg free
  1487  000D4A  C05E  FFD9         	movff	_longitude,fsr2l
  1488  000D4E  C05F  FFDA         	movff	_longitude+1,fsr2h
  1489  000D52  C027  FFDE         	movff	?___ftadd,postinc2
  1490  000D56  C028  FFDE         	movff	?___ftadd+1,postinc2
  1491  000D5A  C029  FFDE         	movff	?___ftadd+2,postinc2
  1492                           
  1493                           ;main.c: 160: data = terminator+1;
  1494  000D5E  0E01               	movlw	1
  1495  000D60  2451               	addwf	_terminator,w,c
  1496  000D62  6E55               	movwf	_data,c
  1497  000D64  0E00               	movlw	0
  1498  000D66  2052               	addwfc	_terminator+1,w,c
  1499  000D68  6E56               	movwf	_data+1,c
  1500                           
  1501                           ;main.c: 161: terminator = strstr(data,",");
  1502  000D6A  C055  F010         	movff	_data,strstr@s1
  1503  000D6E  C056  F011         	movff	_data+1,strstr@s1+1
  1504  000D72  0E6E               	movlw	low STR_7
  1505  000D74  6E12               	movwf	strstr@s2,c
  1506  000D76  0E06               	movlw	high STR_7
  1507  000D78  6E13               	movwf	strstr@s2+1,c
  1508  000D7A  EC1C  F00F         	call	_strstr	;wreg free
  1509  000D7E  C010  F051         	movff	?_strstr,_terminator
  1510  000D82  C011  F052         	movff	?_strstr+1,_terminator+1
  1511                           
  1512                           ;main.c: 162: if(terminator == (0))
  1513  000D86  5051               	movf	_terminator,w,c
  1514  000D88  1052               	iorwf	_terminator+1,w,c
  1515  000D8A  B4D8               	btfsc	status,2,c
  1516  000D8C  0012               	return	
  1517                           
  1518                           ;main.c: 165: }
  1519                           ;main.c: 166: if(*data == 'W')
  1520                           
  1521                           ;main.c: 163: {
  1522                           ;main.c: 164: return;
  1523  000D8E  C055  FFD9         	movff	_data,fsr2l
  1524  000D92  C056  FFDA         	movff	_data+1,fsr2h
  1525  000D96  0E57               	movlw	87
  1526  000D98  18DE               	xorwf	postinc2,w,c
  1527  000D9A  A4D8               	btfss	status,2,c
  1528  000D9C  0012               	return	
  1529                           
  1530                           ;main.c: 167: {
  1531                           ;main.c: 168: *longitude *= -1;
  1532  000D9E  C05E  FFD9         	movff	_longitude,fsr2l
  1533  000DA2  C05F  FFDA         	movff	_longitude+1,fsr2h
  1534  000DA6  CFDE F009          	movff	postinc2,___ftmul@f1
  1535  000DAA  CFDE F00A          	movff	postinc2,___ftmul@f1+1
  1536  000DAE  CFDD F00B          	movff	postdec2,___ftmul@f1+2
  1537  000DB2  0E00               	movlw	0
  1538  000DB4  6E0C               	movwf	___ftmul@f2,c
  1539  000DB6  0E80               	movlw	128
  1540  000DB8  6E0D               	movwf	___ftmul@f2+1,c
  1541  000DBA  0EBF               	movlw	191
  1542  000DBC  6E0E               	movwf	___ftmul@f2+2,c
  1543  000DBE  EC2A  F00D         	call	___ftmul	;wreg free
  1544  000DC2  C05E  FFD9         	movff	_longitude,fsr2l
  1545  000DC6  C05F  FFDA         	movff	_longitude+1,fsr2h
  1546  000DCA  C009  FFDE         	movff	?___ftmul,postinc2
  1547  000DCE  C00A  FFDE         	movff	?___ftmul+1,postinc2
  1548  000DD2  C00B  FFDE         	movff	?___ftmul+2,postinc2
  1549  000DD6  0012               	return	
  1550  000DD8                     __end_of_read_gps:
  1551                           	opt stack 0
  1552                           tblptru	equ	0xFF8
  1553                           tblptrh	equ	0xFF7
  1554                           tblptrl	equ	0xFF6
  1555                           tablat	equ	0xFF5
  1556                           intcon	equ	0xFF2
  1557                           postinc0	equ	0xFEE
  1558                           wreg	equ	0xFE8
  1559                           postdec1	equ	0xFE5
  1560                           fsr1h	equ	0xFE2
  1561                           fsr1l	equ	0xFE1
  1562                           indf2	equ	0xFDF
  1563                           postinc2	equ	0xFDE
  1564                           postdec2	equ	0xFDD
  1565                           fsr2h	equ	0xFDA
  1566                           fsr2l	equ	0xFD9
  1567                           status	equ	0xFD8
  1568                           
  1569 ;; *************** function _strstr *****************
  1570 ;; Defined at:
  1571 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strstr.c"
  1572 ;; Parameters:    Size  Location     Type
  1573 ;;  s1              2   15[COMRAM] PTR const unsigned char 
  1574 ;;		 -> NULL(0), uartBuffer(300), 
  1575 ;;  s2              2   17[COMRAM] PTR const unsigned char 
  1576 ;;		 -> STR_11(2), STR_10(2), STR_9(2), STR_8(2), 
  1577 ;;		 -> STR_7(2), STR_6(7), 
  1578 ;; Auto vars:     Size  Location     Type
  1579 ;;		None
  1580 ;; Return value:  Size  Location     Type
  1581 ;;                  2   15[COMRAM] PTR unsigned char 
  1582 ;; Registers used:
  1583 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1584 ;; Tracked objects:
  1585 ;;		On entry : 0/0
  1586 ;;		On exit  : 0/0
  1587 ;;		Unchanged: 0/0
  1588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1589 ;;      Params:         4       0       0       0       0       0       0
  1590 ;;      Locals:         0       0       0       0       0       0       0
  1591 ;;      Temps:          0       0       0       0       0       0       0
  1592 ;;      Totals:         4       0       0       0       0       0       0
  1593 ;;Total ram usage:        4 bytes
  1594 ;; Hardware stack levels used:    1
  1595 ;; Hardware stack levels required when called:    1
  1596 ;; This function calls:
  1597 ;;		_strchr
  1598 ;;		_strlen
  1599 ;;		_strncmp
  1600 ;; This function is called by:
  1601 ;;		_read_gps
  1602 ;; This function uses a non-reentrant model
  1603 ;;
  1604                           
  1605                           	psect	text2
  1606  001E38                     __ptext2:
  1607                           	opt stack 0
  1608  001E38                     _strstr:
  1609                           	opt stack 28
  1610                           
  1611                           ;incstack = 0
  1612  001E38  D031               	goto	l878
  1613  001E3A  C010  F007         	movff	strstr@s1,strncmp@s1
  1614  001E3E  C011  F008         	movff	strstr@s1+1,strncmp@s1+1
  1615  001E42  C012  F009         	movff	strstr@s2,strncmp@s2
  1616  001E46  C013  F00A         	movff	strstr@s2+1,strncmp@s2+1
  1617  001E4A  C012  F001         	movff	strstr@s2,strlen@s
  1618  001E4E  C013  F002         	movff	strstr@s2+1,strlen@s+1
  1619  001E52  EC49  F011         	call	_strlen	;wreg free
  1620  001E56  C001  F00B         	movff	?_strlen,strncmp@len
  1621  001E5A  C002  F00C         	movff	?_strlen+1,strncmp@len+1
  1622  001E5E  EC5E  F00F         	call	_strncmp	;wreg free
  1623  001E62  5007               	movf	?_strncmp,w,c
  1624  001E64  1008               	iorwf	?_strncmp+1,w,c
  1625  001E66  A4D8               	btfss	status,2,c
  1626  001E68  D005               	goto	l880
  1627  001E6A  C010  F010         	movff	strstr@s1,?_strstr
  1628  001E6E  C011  F011         	movff	strstr@s1+1,?_strstr+1
  1629  001E72  0012               	return	
  1630  001E74                     l880:
  1631  001E74  0E01               	movlw	1
  1632  001E76  2410               	addwf	strstr@s1,w,c
  1633  001E78  6E01               	movwf	strchr@ptr,c
  1634  001E7A  0E00               	movlw	0
  1635  001E7C  2011               	addwfc	strstr@s1+1,w,c
  1636  001E7E  6E02               	movwf	strchr@ptr+1,c
  1637  001E80  C012  FFF6         	movff	strstr@s2,tblptrl
  1638  001E84  C013  FFF7         	movff	strstr@s2+1,tblptrh
  1639  001E88                     	if	0	;tblptru may be non-zero
  1640  001E88                     	endif
  1641  001E88                     	if	0	;tblptru may be non-zero
  1642  001E88                     	endif
  1643  001E88  0008               	tblrd		*
  1644  001E8A  50F5               	movf	tablat,w,c
  1645  001E8C  6E03               	movwf	strchr@chr,c
  1646  001E8E  6A04               	clrf	strchr@chr+1,c
  1647  001E90  EC68  F011         	call	_strchr	;wreg free
  1648  001E94  C001  F010         	movff	?_strchr,strstr@s1
  1649  001E98  C002  F011         	movff	?_strchr+1,strstr@s1+1
  1650  001E9C                     l878:
  1651  001E9C  5010               	movf	strstr@s1,w,c
  1652  001E9E  1011               	iorwf	strstr@s1+1,w,c
  1653  001EA0  B4D8               	btfsc	status,2,c
  1654  001EA2  D007               	goto	u3070
  1655  001EA4  C010  FFD9         	movff	strstr@s1,fsr2l
  1656  001EA8  C011  FFDA         	movff	strstr@s1+1,fsr2h
  1657  001EAC  50DF               	movf	indf2,w,c
  1658  001EAE  A4D8               	btfss	status,2,c
  1659  001EB0  D7C4               	goto	l879
  1660  001EB2                     u3070:
  1661  001EB2  0E00               	movlw	0
  1662  001EB4  6E10               	movwf	?_strstr,c
  1663  001EB6  0E00               	movlw	0
  1664  001EB8  6E11               	movwf	?_strstr+1,c
  1665  001EBA  0012               	return	
  1666  001EBC                     __end_of_strstr:
  1667                           	opt stack 0
  1668                           tblptru	equ	0xFF8
  1669                           tblptrh	equ	0xFF7
  1670                           tblptrl	equ	0xFF6
  1671                           tablat	equ	0xFF5
  1672                           intcon	equ	0xFF2
  1673                           postinc0	equ	0xFEE
  1674                           wreg	equ	0xFE8
  1675                           postdec1	equ	0xFE5
  1676                           fsr1h	equ	0xFE2
  1677                           fsr1l	equ	0xFE1
  1678                           indf2	equ	0xFDF
  1679                           postinc2	equ	0xFDE
  1680                           postdec2	equ	0xFDD
  1681                           fsr2h	equ	0xFDA
  1682                           fsr2l	equ	0xFD9
  1683                           status	equ	0xFD8
  1684                           
  1685 ;; *************** function _strncmp *****************
  1686 ;; Defined at:
  1687 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strncmp.c"
  1688 ;; Parameters:    Size  Location     Type
  1689 ;;  s1              2    6[COMRAM] PTR const unsigned char 
  1690 ;;		 -> NULL(0), uartBuffer(300), 
  1691 ;;  s2              2    8[COMRAM] PTR const unsigned char 
  1692 ;;		 -> STR_11(2), STR_10(2), STR_9(2), STR_8(2), 
  1693 ;;		 -> STR_7(2), STR_6(7), 
  1694 ;;  len             2   10[COMRAM] unsigned int 
  1695 ;; Auto vars:     Size  Location     Type
  1696 ;;		None
  1697 ;; Return value:  Size  Location     Type
  1698 ;;                  2    6[COMRAM] int 
  1699 ;; Registers used:
  1700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1701 ;; Tracked objects:
  1702 ;;		On entry : 0/0
  1703 ;;		On exit  : 0/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1706 ;;      Params:         6       0       0       0       0       0       0
  1707 ;;      Locals:         0       0       0       0       0       0       0
  1708 ;;      Temps:          3       0       0       0       0       0       0
  1709 ;;      Totals:         9       0       0       0       0       0       0
  1710 ;;Total ram usage:        9 bytes
  1711 ;; Hardware stack levels used:    1
  1712 ;; This function calls:
  1713 ;;		Nothing
  1714 ;; This function is called by:
  1715 ;;		_strstr
  1716 ;; This function uses a non-reentrant model
  1717 ;;
  1718                           
  1719                           	psect	text3
  1720  001EBC                     __ptext3:
  1721                           	opt stack 0
  1722  001EBC                     _strncmp:
  1723                           	opt stack 28
  1724                           
  1725                           ;incstack = 0
  1726  001EBC  D033               	goto	l918
  1727  001EBE                     l2904:
  1728  001EBE  C007  FFD9         	movff	strncmp@s1,fsr2l
  1729  001EC2  C008  FFDA         	movff	strncmp@s1+1,fsr2h
  1730  001EC6  50DF               	movf	indf2,w,c
  1731  001EC8  B4D8               	btfsc	status,2,c
  1732  001ECA  D00F               	goto	u2990
  1733  001ECC  C007  FFD9         	movff	strncmp@s1,fsr2l
  1734  001ED0  C008  FFDA         	movff	strncmp@s1+1,fsr2h
  1735  001ED4  50DF               	movf	indf2,w,c
  1736  001ED6  6E0D               	movwf	??_strncmp& (0+255),c
  1737  001ED8  C009  FFF6         	movff	strncmp@s2,tblptrl
  1738  001EDC  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
  1739  001EE0                     	if	0	;tblptru may be non-zero
  1740  001EE0                     	endif
  1741  001EE0                     	if	0	;tblptru may be non-zero
  1742  001EE0                     	endif
  1743  001EE0  0008               	tblrd		*
  1744  001EE2  50F5               	movf	tablat,w,c
  1745  001EE4  180D               	xorwf	??_strncmp,w,c
  1746  001EE6  B4D8               	btfsc	status,2,c
  1747  001EE8  D019               	goto	l920
  1748  001EEA                     u2990:
  1749  001EEA  C009  FFF6         	movff	strncmp@s2,tblptrl
  1750  001EEE  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
  1751  001EF2                     	if	0	;tblptru may be non-zero
  1752  001EF2                     	endif
  1753  001EF2                     	if	0	;tblptru may be non-zero
  1754  001EF2                     	endif
  1755  001EF2  0008               	tblrd		*
  1756  001EF4  50F5               	movf	tablat,w,c
  1757  001EF6  6E0D               	movwf	??_strncmp& (0+255),c
  1758  001EF8  6A0E               	clrf	(??_strncmp+1)& (0+255),c
  1759  001EFA  1E0D               	comf	??_strncmp,f,c
  1760  001EFC  1E0E               	comf	??_strncmp+1,f,c
  1761  001EFE  4A0D               	infsnz	??_strncmp,f,c
  1762  001F00  2A0E               	incf	??_strncmp+1,f,c
  1763  001F02  C007  FFD9         	movff	strncmp@s1,fsr2l
  1764  001F06  C008  FFDA         	movff	strncmp@s1+1,fsr2h
  1765  001F0A  50DF               	movf	indf2,w,c
  1766  001F0C  6E0F               	movwf	(??_strncmp+2)& (0+255),c
  1767  001F0E  500F               	movf	??_strncmp+2,w,c
  1768  001F10  240D               	addwf	??_strncmp,w,c
  1769  001F12  6E07               	movwf	?_strncmp,c
  1770  001F14  0E00               	movlw	0
  1771  001F16  200E               	addwfc	??_strncmp+1,w,c
  1772  001F18  6E08               	movwf	?_strncmp+1,c
  1773  001F1A  0012               	return	
  1774  001F1C                     l920:
  1775  001F1C  4A07               	infsnz	strncmp@s1,f,c
  1776  001F1E  2A08               	incf	strncmp@s1+1,f,c
  1777  001F20  4A09               	infsnz	strncmp@s2,f,c
  1778  001F22  2A0A               	incf	strncmp@s2+1,f,c
  1779  001F24                     l918:
  1780  001F24  060B               	decf	strncmp@len,f,c
  1781  001F26  A0D8               	btfss	status,0,c
  1782  001F28  060C               	decf	strncmp@len+1,f,c
  1783  001F2A  280B               	incf	strncmp@len,w,c
  1784  001F2C  E1C8               	bnz	l2904
  1785  001F2E  280C               	incf	strncmp@len+1,w,c
  1786  001F30  A4D8               	btfss	status,2,c
  1787  001F32  D7C5               	goto	l919
  1788  001F34  0E00               	movlw	0
  1789  001F36  6E08               	movwf	?_strncmp+1,c
  1790  001F38  0E00               	movlw	0
  1791  001F3A  6E07               	movwf	?_strncmp,c
  1792  001F3C  0012               	return	
  1793  001F3E                     __end_of_strncmp:
  1794                           	opt stack 0
  1795                           tblptru	equ	0xFF8
  1796                           tblptrh	equ	0xFF7
  1797                           tblptrl	equ	0xFF6
  1798                           tablat	equ	0xFF5
  1799                           intcon	equ	0xFF2
  1800                           postinc0	equ	0xFEE
  1801                           wreg	equ	0xFE8
  1802                           postdec1	equ	0xFE5
  1803                           fsr1h	equ	0xFE2
  1804                           fsr1l	equ	0xFE1
  1805                           indf2	equ	0xFDF
  1806                           postinc2	equ	0xFDE
  1807                           postdec2	equ	0xFDD
  1808                           fsr2h	equ	0xFDA
  1809                           fsr2l	equ	0xFD9
  1810                           status	equ	0xFD8
  1811                           
  1812 ;; *************** function _strlen *****************
  1813 ;; Defined at:
  1814 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1817 ;;		 -> STR_11(2), STR_10(2), STR_9(2), STR_8(2), 
  1818 ;;		 -> STR_7(2), STR_6(7), 
  1819 ;; Auto vars:     Size  Location     Type
  1820 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  1821 ;;		 -> STR_11(2), STR_10(2), STR_9(2), STR_8(2), 
  1822 ;;		 -> STR_7(2), STR_6(7), 
  1823 ;; Return value:  Size  Location     Type
  1824 ;;                  2    0[COMRAM] unsigned int 
  1825 ;; Registers used:
  1826 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  1827 ;; Tracked objects:
  1828 ;;		On entry : 0/0
  1829 ;;		On exit  : 0/0
  1830 ;;		Unchanged: 0/0
  1831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1832 ;;      Params:         2       0       0       0       0       0       0
  1833 ;;      Locals:         2       0       0       0       0       0       0
  1834 ;;      Temps:          2       0       0       0       0       0       0
  1835 ;;      Totals:         6       0       0       0       0       0       0
  1836 ;;Total ram usage:        6 bytes
  1837 ;; Hardware stack levels used:    1
  1838 ;; This function calls:
  1839 ;;		Nothing
  1840 ;; This function is called by:
  1841 ;;		_strstr
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           	psect	text4
  1846  002292                     __ptext4:
  1847                           	opt stack 0
  1848  002292                     _strlen:
  1849                           	opt stack 28
  1850                           
  1851                           ;incstack = 0
  1852  002292  C001  F005         	movff	strlen@s,strlen@cp
  1853  002296  C002  F006         	movff	strlen@s+1,strlen@cp+1
  1854  00229A  D002               	goto	l912
  1855  00229C  4A05               	infsnz	strlen@cp,f,c
  1856  00229E  2A06               	incf	strlen@cp+1,f,c
  1857  0022A0                     l912:
  1858  0022A0  C005  FFF6         	movff	strlen@cp,tblptrl
  1859  0022A4  C006  FFF7         	movff	strlen@cp+1,tblptrh
  1860  0022A8                     	if	0	;tblptru may be non-zero
  1861  0022A8                     	endif
  1862  0022A8                     	if	0	;tblptru may be non-zero
  1863  0022A8                     	endif
  1864  0022A8  0008               	tblrd		*
  1865  0022AA  50F5               	movf	tablat,w,c
  1866  0022AC  0900               	iorlw	0
  1867  0022AE  A4D8               	btfss	status,2,c
  1868  0022B0  D7F5               	goto	l913
  1869  0022B2  C001  F003         	movff	strlen@s,??_strlen
  1870  0022B6  C002  F004         	movff	strlen@s+1,??_strlen+1
  1871  0022BA  1E03               	comf	??_strlen,f,c
  1872  0022BC  1E04               	comf	??_strlen+1,f,c
  1873  0022BE  4A03               	infsnz	??_strlen,f,c
  1874  0022C0  2A04               	incf	??_strlen+1,f,c
  1875  0022C2  5005               	movf	strlen@cp,w,c
  1876  0022C4  2403               	addwf	??_strlen,w,c
  1877  0022C6  6E01               	movwf	?_strlen,c
  1878  0022C8  5006               	movf	strlen@cp+1,w,c
  1879  0022CA  2004               	addwfc	??_strlen+1,w,c
  1880  0022CC  6E02               	movwf	?_strlen+1,c
  1881  0022CE  0012               	return	
  1882  0022D0                     __end_of_strlen:
  1883                           	opt stack 0
  1884                           tblptru	equ	0xFF8
  1885                           tblptrh	equ	0xFF7
  1886                           tblptrl	equ	0xFF6
  1887                           tablat	equ	0xFF5
  1888                           intcon	equ	0xFF2
  1889                           postinc0	equ	0xFEE
  1890                           wreg	equ	0xFE8
  1891                           postdec1	equ	0xFE5
  1892                           fsr1h	equ	0xFE2
  1893                           fsr1l	equ	0xFE1
  1894                           indf2	equ	0xFDF
  1895                           postinc2	equ	0xFDE
  1896                           postdec2	equ	0xFDD
  1897                           fsr2h	equ	0xFDA
  1898                           fsr2l	equ	0xFD9
  1899                           status	equ	0xFD8
  1900                           
  1901 ;; *************** function _strchr *****************
  1902 ;; Defined at:
  1903 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strchr.c"
  1904 ;; Parameters:    Size  Location     Type
  1905 ;;  ptr             2    0[COMRAM] PTR const unsigned char 
  1906 ;;		 -> NULL(0), uartBuffer(300), 
  1907 ;;  chr             2    2[COMRAM] int 
  1908 ;; Auto vars:     Size  Location     Type
  1909 ;;		None
  1910 ;; Return value:  Size  Location     Type
  1911 ;;                  2    0[COMRAM] PTR unsigned char 
  1912 ;; Registers used:
  1913 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1914 ;; Tracked objects:
  1915 ;;		On entry : 0/0
  1916 ;;		On exit  : 0/0
  1917 ;;		Unchanged: 0/0
  1918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1919 ;;      Params:         4       0       0       0       0       0       0
  1920 ;;      Locals:         0       0       0       0       0       0       0
  1921 ;;      Temps:          1       0       0       0       0       0       0
  1922 ;;      Totals:         5       0       0       0       0       0       0
  1923 ;;Total ram usage:        5 bytes
  1924 ;; Hardware stack levels used:    1
  1925 ;; This function calls:
  1926 ;;		Nothing
  1927 ;; This function is called by:
  1928 ;;		_strstr
  1929 ;; This function uses a non-reentrant model
  1930 ;;
  1931                           
  1932                           	psect	text5
  1933  0022D0                     __ptext5:
  1934                           	opt stack 0
  1935  0022D0                     _strchr:
  1936                           	opt stack 28
  1937                           
  1938                           ;incstack = 0
  1939  0022D0  C001  FFD9         	movff	strchr@ptr,fsr2l
  1940  0022D4  C002  FFDA         	movff	strchr@ptr+1,fsr2h
  1941  0022D8  5003               	movf	strchr@chr,w,c
  1942  0022DA  18DE               	xorwf	postinc2,w,c
  1943  0022DC  A4D8               	btfss	status,2,c
  1944  0022DE  D005               	goto	l907
  1945  0022E0  C001  F001         	movff	strchr@ptr,?_strchr
  1946  0022E4  C002  F002         	movff	strchr@ptr+1,?_strchr+1
  1947  0022E8  0012               	return	
  1948  0022EA                     l907:
  1949  0022EA  C001  FFD9         	movff	strchr@ptr,fsr2l
  1950  0022EE  C002  FFDA         	movff	strchr@ptr+1,fsr2h
  1951  0022F2  4A01               	infsnz	strchr@ptr,f,c
  1952  0022F4  2A02               	incf	strchr@ptr+1,f,c
  1953  0022F6  50DF               	movf	indf2,w,c
  1954  0022F8  A4D8               	btfss	status,2,c
  1955  0022FA  D7EA               	goto	_strchr
  1956  0022FC  0E00               	movlw	0
  1957  0022FE  6E01               	movwf	?_strchr,c
  1958  002300  0E00               	movlw	0
  1959  002302  6E02               	movwf	?_strchr+1,c
  1960  002304  0012               	return	
  1961  002306                     __end_of_strchr:
  1962                           	opt stack 0
  1963                           tblptru	equ	0xFF8
  1964                           tblptrh	equ	0xFF7
  1965                           tblptrl	equ	0xFF6
  1966                           tablat	equ	0xFF5
  1967                           intcon	equ	0xFF2
  1968                           postinc0	equ	0xFEE
  1969                           wreg	equ	0xFE8
  1970                           postdec1	equ	0xFE5
  1971                           fsr1h	equ	0xFE2
  1972                           fsr1l	equ	0xFE1
  1973                           indf2	equ	0xFDF
  1974                           postinc2	equ	0xFDE
  1975                           postdec2	equ	0xFDD
  1976                           fsr2h	equ	0xFDA
  1977                           fsr2l	equ	0xFD9
  1978                           status	equ	0xFD8
  1979                           
  1980 ;; *************** function _memset *****************
  1981 ;; Defined at:
  1982 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  1983 ;; Parameters:    Size  Location     Type
  1984 ;;  p1              2    0[COMRAM] PTR void 
  1985 ;;		 -> conversionString(8), 
  1986 ;;  c               2    2[COMRAM] int 
  1987 ;;  n               2    4[COMRAM] unsigned int 
  1988 ;; Auto vars:     Size  Location     Type
  1989 ;;  p               2    6[COMRAM] PTR unsigned char 
  1990 ;;		 -> conversionString(8), 
  1991 ;; Return value:  Size  Location     Type
  1992 ;;                  2    0[COMRAM] PTR void 
  1993 ;; Registers used:
  1994 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1995 ;; Tracked objects:
  1996 ;;		On entry : 0/0
  1997 ;;		On exit  : 0/0
  1998 ;;		Unchanged: 0/0
  1999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2000 ;;      Params:         6       0       0       0       0       0       0
  2001 ;;      Locals:         2       0       0       0       0       0       0
  2002 ;;      Temps:          0       0       0       0       0       0       0
  2003 ;;      Totals:         8       0       0       0       0       0       0
  2004 ;;Total ram usage:        8 bytes
  2005 ;; Hardware stack levels used:    1
  2006 ;; This function calls:
  2007 ;;		Nothing
  2008 ;; This function is called by:
  2009 ;;		_read_gps
  2010 ;; This function uses a non-reentrant model
  2011 ;;
  2012                           
  2013                           	psect	text6
  2014  002334                     __ptext6:
  2015                           	opt stack 0
  2016  002334                     _memset:
  2017                           	opt stack 29
  2018                           
  2019                           ;incstack = 0
  2020  002334  C001  F007         	movff	memset@p1,memset@p
  2021  002338  C002  F008         	movff	memset@p1+1,memset@p+1
  2022  00233C  D008               	goto	l746
  2023  00233E                     l2986:
  2024  00233E  C007  FFD9         	movff	memset@p,fsr2l
  2025  002342  C008  FFDA         	movff	memset@p+1,fsr2h
  2026  002346  C003  FFDF         	movff	memset@c,indf2
  2027  00234A  4A07               	infsnz	memset@p,f,c
  2028  00234C  2A08               	incf	memset@p+1,f,c
  2029  00234E                     l746:
  2030  00234E  0605               	decf	memset@n,f,c
  2031  002350  A0D8               	btfss	status,0,c
  2032  002352  0606               	decf	memset@n+1,f,c
  2033  002354  2805               	incf	memset@n,w,c
  2034  002356  E1F3               	bnz	l2986
  2035  002358  2806               	incf	memset@n+1,w,c
  2036  00235A  B4D8               	btfsc	status,2,c
  2037  00235C  0012               	return	
  2038  00235E  D7EF               	goto	l747
  2039  002360                     __end_of_memset:
  2040                           	opt stack 0
  2041                           tblptru	equ	0xFF8
  2042                           tblptrh	equ	0xFF7
  2043                           tblptrl	equ	0xFF6
  2044                           tablat	equ	0xFF5
  2045                           intcon	equ	0xFF2
  2046                           postinc0	equ	0xFEE
  2047                           wreg	equ	0xFE8
  2048                           postdec1	equ	0xFE5
  2049                           fsr1h	equ	0xFE2
  2050                           fsr1l	equ	0xFE1
  2051                           indf2	equ	0xFDF
  2052                           postinc2	equ	0xFDE
  2053                           postdec2	equ	0xFDD
  2054                           fsr2h	equ	0xFDA
  2055                           fsr2l	equ	0xFD9
  2056                           status	equ	0xFD8
  2057                           
  2058 ;; *************** function _memcpy *****************
  2059 ;; Defined at:
  2060 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
  2061 ;; Parameters:    Size  Location     Type
  2062 ;;  d1              2    0[COMRAM] PTR void 
  2063 ;;		 -> conversionString(8), 
  2064 ;;  s1              2    2[COMRAM] PTR const void 
  2065 ;;		 -> NULL(0), uartBuffer(300), 
  2066 ;;  n               2    4[COMRAM] unsigned int 
  2067 ;; Auto vars:     Size  Location     Type
  2068 ;;  s               2    8[COMRAM] PTR const unsigned char 
  2069 ;;		 -> NULL(0), uartBuffer(300), 
  2070 ;;  d               2    6[COMRAM] PTR unsigned char 
  2071 ;;		 -> conversionString(8), 
  2072 ;;  tmp             1   10[COMRAM] unsigned char 
  2073 ;; Return value:  Size  Location     Type
  2074 ;;                  2    0[COMRAM] PTR void 
  2075 ;; Registers used:
  2076 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2077 ;; Tracked objects:
  2078 ;;		On entry : 0/0
  2079 ;;		On exit  : 0/0
  2080 ;;		Unchanged: 0/0
  2081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2082 ;;      Params:         6       0       0       0       0       0       0
  2083 ;;      Locals:         5       0       0       0       0       0       0
  2084 ;;      Temps:          0       0       0       0       0       0       0
  2085 ;;      Totals:        11       0       0       0       0       0       0
  2086 ;;Total ram usage:       11 bytes
  2087 ;; Hardware stack levels used:    1
  2088 ;; This function calls:
  2089 ;;		Nothing
  2090 ;; This function is called by:
  2091 ;;		_read_gps
  2092 ;; This function uses a non-reentrant model
  2093 ;;
  2094                           
  2095                           	psect	text7
  2096  00220E                     __ptext7:
  2097                           	opt stack 0
  2098  00220E                     _memcpy:
  2099                           	opt stack 29
  2100                           
  2101                           ;incstack = 0
  2102  00220E  C003  F009         	movff	memcpy@s1,memcpy@s
  2103  002212  C004  F00A         	movff	memcpy@s1+1,memcpy@s+1
  2104  002216  C001  F007         	movff	memcpy@d1,memcpy@d
  2105  00221A  C002  F008         	movff	memcpy@d1+1,memcpy@d+1
  2106  00221E  D010               	goto	l740
  2107  002220                     l2994:
  2108  002220  C009  FFD9         	movff	memcpy@s,fsr2l
  2109  002224  C00A  FFDA         	movff	memcpy@s+1,fsr2h
  2110  002228  50DF               	movf	indf2,w,c
  2111  00222A  6E0B               	movwf	memcpy@tmp,c
  2112  00222C  4A09               	infsnz	memcpy@s,f,c
  2113  00222E  2A0A               	incf	memcpy@s+1,f,c
  2114  002230  C007  FFD9         	movff	memcpy@d,fsr2l
  2115  002234  C008  FFDA         	movff	memcpy@d+1,fsr2h
  2116  002238  C00B  FFDF         	movff	memcpy@tmp,indf2
  2117  00223C  4A07               	infsnz	memcpy@d,f,c
  2118  00223E  2A08               	incf	memcpy@d+1,f,c
  2119  002240                     l740:
  2120  002240  0605               	decf	memcpy@n,f,c
  2121  002242  A0D8               	btfss	status,0,c
  2122  002244  0606               	decf	memcpy@n+1,f,c
  2123  002246  2805               	incf	memcpy@n,w,c
  2124  002248  E1EB               	bnz	l2994
  2125  00224A  2806               	incf	memcpy@n+1,w,c
  2126  00224C  B4D8               	btfsc	status,2,c
  2127  00224E  0012               	return	
  2128  002250  D7E7               	goto	l741
  2129  002252                     __end_of_memcpy:
  2130                           	opt stack 0
  2131                           tblptru	equ	0xFF8
  2132                           tblptrh	equ	0xFF7
  2133                           tblptrl	equ	0xFF6
  2134                           tablat	equ	0xFF5
  2135                           intcon	equ	0xFF2
  2136                           postinc0	equ	0xFEE
  2137                           wreg	equ	0xFE8
  2138                           postdec1	equ	0xFE5
  2139                           fsr1h	equ	0xFE2
  2140                           fsr1l	equ	0xFE1
  2141                           indf2	equ	0xFDF
  2142                           postinc2	equ	0xFDE
  2143                           postdec2	equ	0xFDD
  2144                           fsr2h	equ	0xFDA
  2145                           fsr2l	equ	0xFD9
  2146                           status	equ	0xFD8
  2147                           
  2148 ;; *************** function _atof *****************
  2149 ;; Defined at:
  2150 ;;		line 200 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atof.c"
  2151 ;; Parameters:    Size  Location     Type
  2152 ;;  s               2   35[COMRAM] PTR const unsigned char 
  2153 ;;		 -> conversionString(8), NULL(0), uartBuffer(300), 
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;		None
  2156 ;; Return value:  Size  Location     Type
  2157 ;;                  3   35[COMRAM] PTR const unsigned char 
  2158 ;; Registers used:
  2159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2160 ;; Tracked objects:
  2161 ;;		On entry : 0/0
  2162 ;;		On exit  : 0/0
  2163 ;;		Unchanged: 0/0
  2164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2165 ;;      Params:         3       0       0       0       0       0       0
  2166 ;;      Locals:         0       0       0       0       0       0       0
  2167 ;;      Temps:          0       0       0       0       0       0       0
  2168 ;;      Totals:         3       0       0       0       0       0       0
  2169 ;;Total ram usage:        3 bytes
  2170 ;; Hardware stack levels used:    1
  2171 ;; Hardware stack levels required when called:    3
  2172 ;; This function calls:
  2173 ;;		_strtod
  2174 ;; This function is called by:
  2175 ;;		_read_gps
  2176 ;; This function uses a non-reentrant model
  2177 ;;
  2178                           
  2179                           	psect	text8
  2180  0023F4                     __ptext8:
  2181                           	opt stack 0
  2182  0023F4                     _atof:
  2183                           	opt stack 26
  2184                           
  2185                           ;incstack = 0
  2186  0023F4  C024  F018         	movff	atof@s,strtod@s
  2187  0023F8  C025  F019         	movff	atof@s+1,strtod@s+1
  2188  0023FC  0E00               	movlw	0
  2189  0023FE  6E1A               	movwf	strtod@res,c
  2190  002400  0E00               	movlw	0
  2191  002402  6E1B               	movwf	strtod@res+1,c
  2192  002404  EC39  F003         	call	_strtod	;wreg free
  2193  002408  C018  F024         	movff	?_strtod,?_atof
  2194  00240C  C019  F025         	movff	?_strtod+1,?_atof+1
  2195  002410  C01A  F026         	movff	?_strtod+2,?_atof+2
  2196  002414  0012               	return	
  2197  002416                     __end_of_atof:
  2198                           	opt stack 0
  2199                           tblptru	equ	0xFF8
  2200                           tblptrh	equ	0xFF7
  2201                           tblptrl	equ	0xFF6
  2202                           tablat	equ	0xFF5
  2203                           intcon	equ	0xFF2
  2204                           postinc0	equ	0xFEE
  2205                           wreg	equ	0xFE8
  2206                           postdec1	equ	0xFE5
  2207                           fsr1h	equ	0xFE2
  2208                           fsr1l	equ	0xFE1
  2209                           indf2	equ	0xFDF
  2210                           postinc2	equ	0xFDE
  2211                           postdec2	equ	0xFDD
  2212                           fsr2h	equ	0xFDA
  2213                           fsr2l	equ	0xFD9
  2214                           status	equ	0xFD8
  2215                           
  2216 ;; *************** function _strtod *****************
  2217 ;; Defined at:
  2218 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atof.c"
  2219 ;; Parameters:    Size  Location     Type
  2220 ;;  s               2   23[COMRAM] PTR const unsigned char 
  2221 ;;		 -> conversionString(8), NULL(0), uartBuffer(300), 
  2222 ;;  res             2   25[COMRAM] PTR PTR const unsigned c
  2223 ;;		 -> NULL(0), 
  2224 ;; Auto vars:     Size  Location     Type
  2225 ;;  _u              4   31[COMRAM] struct .
  2226 ;;  expon           1   30[COMRAM] char 
  2227 ;;  flags           1   29[COMRAM] unsigned char 
  2228 ;;  eexp            1   28[COMRAM] char 
  2229 ;; Return value:  Size  Location     Type
  2230 ;;                  3   23[COMRAM] char 
  2231 ;; Registers used:
  2232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2233 ;; Tracked objects:
  2234 ;;		On entry : 0/0
  2235 ;;		On exit  : 0/0
  2236 ;;		Unchanged: 0/0
  2237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2238 ;;      Params:         4       0       0       0       0       0       0
  2239 ;;      Locals:         7       0       0       0       0       0       0
  2240 ;;      Temps:          1       0       0       0       0       0       0
  2241 ;;      Totals:        12       0       0       0       0       0       0
  2242 ;;Total ram usage:       12 bytes
  2243 ;; Hardware stack levels used:    1
  2244 ;; Hardware stack levels required when called:    2
  2245 ;; This function calls:
  2246 ;;		___altoft
  2247 ;;		___ftdiv
  2248 ;;		___ftge
  2249 ;;		___ftmul
  2250 ;;		___ftneg
  2251 ;;		___lmul
  2252 ;;		_isdigit
  2253 ;;		_isspace
  2254 ;; This function is called by:
  2255 ;;		_atof
  2256 ;; This function uses a non-reentrant model
  2257 ;;
  2258                           
  2259                           	psect	text9
  2260  000672                     __ptext9:
  2261                           	opt stack 0
  2262  000672                     _strtod:
  2263                           	opt stack 26
  2264                           
  2265                           ;incstack = 0
  2266  000672  501A               	movf	strtod@res,w,c
  2267  000674  101B               	iorwf	strtod@res+1,w,c
  2268  000676  B4D8               	btfsc	status,2,c
  2269  000678  D00B               	goto	l400
  2270  00067A  C01A  FFD9         	movff	strtod@res,fsr2l
  2271  00067E  C01B  FFDA         	movff	strtod@res+1,fsr2h
  2272  000682  C018  FFDE         	movff	strtod@s,postinc2
  2273  000686  C019  FFDD         	movff	strtod@s+1,postdec2
  2274  00068A  D002               	goto	l400
  2275  00068C  4A18               	infsnz	strtod@s,f,c
  2276  00068E  2A19               	incf	strtod@s+1,f,c
  2277  000690                     l400:
  2278  000690  C018  FFD9         	movff	strtod@s,fsr2l
  2279  000694  C019  FFDA         	movff	strtod@s+1,fsr2h
  2280  000698  50DF               	movf	indf2,w,c
  2281  00069A  6E1D               	movwf	strtod@eexp,c
  2282  00069C  501D               	movf	strtod@eexp,w,c
  2283  00069E  ECB0  F011         	call	_isspace
  2284  0006A2  B0D8               	btfsc	status,0,c
  2285  0006A4  D7F3               	goto	l401
  2286  0006A6  0E00               	movlw	0
  2287  0006A8  6E1E               	movwf	strtod@flags,c
  2288  0006AA  0E2D               	movlw	45
  2289  0006AC  181D               	xorwf	strtod@eexp,w,c
  2290  0006AE  A4D8               	btfss	status,2,c
  2291  0006B0  D003               	goto	l403
  2292  0006B2  0E01               	movlw	1
  2293  0006B4  6E1E               	movwf	strtod@flags,c
  2294  0006B6  D004               	goto	u2580
  2295  0006B8                     l403:
  2296  0006B8  0E2B               	movlw	43
  2297  0006BA  181D               	xorwf	strtod@eexp,w,c
  2298  0006BC  A4D8               	btfss	status,2,c
  2299  0006BE  D002               	goto	l405
  2300  0006C0                     u2580:
  2301  0006C0  4A18               	infsnz	strtod@s,f,c
  2302  0006C2  2A19               	incf	strtod@s+1,f,c
  2303  0006C4                     l405:
  2304  0006C4  0E00               	movlw	0
  2305  0006C6  6E1D               	movwf	strtod@eexp,c
  2306  0006C8  0E00               	movlw	0
  2307  0006CA  6E20               	movwf	strtod@_u,c
  2308  0006CC  0E00               	movlw	0
  2309  0006CE  6E21               	movwf	strtod@_u+1,c
  2310  0006D0  0E00               	movlw	0
  2311  0006D2  6E22               	movwf	strtod@_u+2,c
  2312  0006D4  0E00               	movlw	0
  2313  0006D6  6E23               	movwf	strtod@_u+3,c
  2314  0006D8  0E00               	movlw	0
  2315  0006DA  6E1F               	movwf	strtod@expon,c
  2316  0006DC  B81E               	btfsc	strtod@flags,4,c
  2317  0006DE  D00A               	goto	l407
  2318  0006E0  C018  FFD9         	movff	strtod@s,fsr2l
  2319  0006E4  C019  FFDA         	movff	strtod@s+1,fsr2h
  2320  0006E8  0E2E               	movlw	46
  2321  0006EA  18DE               	xorwf	postinc2,w,c
  2322  0006EC  A4D8               	btfss	status,2,c
  2323  0006EE  D002               	goto	l407
  2324  0006F0  881E               	bsf	strtod@flags,4,c
  2325  0006F2  D03C               	goto	l414
  2326  0006F4                     l407:
  2327  0006F4  C018  FFD9         	movff	strtod@s,fsr2l
  2328  0006F8  C019  FFDA         	movff	strtod@s+1,fsr2h
  2329  0006FC  50DF               	movf	indf2,w,c
  2330  0006FE  EC0B  F012         	call	_isdigit
  2331  000702  A0D8               	btfss	status,0,c
  2332  000704  D036               	goto	l410
  2333  000706  821E               	bsf	strtod@flags,1,c
  2334  000708  0E08               	movlw	8
  2335  00070A  181D               	xorwf	strtod@eexp,w,c
  2336  00070C  B4D8               	btfsc	status,2,c
  2337  00070E  D02C               	goto	l411
  2338  000710  B81E               	btfsc	strtod@flags,4,c
  2339  000712  061F               	decf	strtod@expon,f,c
  2340  000714  2A1D               	incf	strtod@eexp,f,c
  2341  000716  C020  F001         	movff	strtod@_u,___lmul@multiplier
  2342  00071A  C021  F002         	movff	strtod@_u+1,___lmul@multiplier+1
  2343  00071E  C022  F003         	movff	strtod@_u+2,___lmul@multiplier+2
  2344  000722  C023  F004         	movff	strtod@_u+3,___lmul@multiplier+3
  2345  000726  0E0A               	movlw	10
  2346  000728  6E05               	movwf	___lmul@multiplicand,c
  2347  00072A  0E00               	movlw	0
  2348  00072C  6E06               	movwf	___lmul@multiplicand+1,c
  2349  00072E  0E00               	movlw	0
  2350  000730  6E07               	movwf	___lmul@multiplicand+2,c
  2351  000732  0E00               	movlw	0
  2352  000734  6E08               	movwf	___lmul@multiplicand+3,c
  2353  000736  ECDC  F010         	call	___lmul	;wreg free
  2354  00073A  C001  F020         	movff	?___lmul,strtod@_u
  2355  00073E  C002  F021         	movff	?___lmul+1,strtod@_u+1
  2356  000742  C003  F022         	movff	?___lmul+2,strtod@_u+2
  2357  000746  C004  F023         	movff	?___lmul+3,strtod@_u+3
  2358  00074A  C018  FFD9         	movff	strtod@s,fsr2l
  2359  00074E  C019  FFDA         	movff	strtod@s+1,fsr2h
  2360  000752  50DF               	movf	indf2,w,c
  2361  000754  6E1C               	movwf	??_strtod& (0+255),c
  2362  000756  0ED0               	movlw	208
  2363  000758  261C               	addwf	??_strtod,f,c
  2364  00075A  501C               	movf	??_strtod,w,c
  2365  00075C  2620               	addwf	strtod@_u,f,c
  2366  00075E  0E00               	movlw	0
  2367  000760  2221               	addwfc	strtod@_u+1,f,c
  2368  000762  2222               	addwfc	strtod@_u+2,f,c
  2369  000764  2223               	addwfc	strtod@_u+3,f,c
  2370  000766  D002               	goto	l414
  2371  000768                     l411:
  2372  000768  A81E               	btfss	strtod@flags,4,c
  2373  00076A  2A1F               	incf	strtod@expon,f,c
  2374  00076C                     l414:
  2375  00076C  4A18               	infsnz	strtod@s,f,c
  2376  00076E  2A19               	incf	strtod@s+1,f,c
  2377  000770  D7B5               	goto	l406
  2378  000772                     l410:
  2379  000772  0E00               	movlw	0
  2380  000774  6E1D               	movwf	strtod@eexp,c
  2381  000776  C018  FFD9         	movff	strtod@s,fsr2l
  2382  00077A  C019  FFDA         	movff	strtod@s+1,fsr2h
  2383  00077E  0E65               	movlw	101
  2384  000780  18DE               	xorwf	postinc2,w,c
  2385  000782  B4D8               	btfsc	status,2,c
  2386  000784  D008               	goto	u2660
  2387  000786  C018  FFD9         	movff	strtod@s,fsr2l
  2388  00078A  C019  FFDA         	movff	strtod@s+1,fsr2h
  2389  00078E  0E45               	movlw	69
  2390  000790  18DE               	xorwf	postinc2,w,c
  2391  000792  A4D8               	btfss	status,2,c
  2392  000794  D05E               	goto	l427
  2393  000796                     u2660:
  2394  000796  4A18               	infsnz	strtod@s,f,c
  2395  000798  2A19               	incf	strtod@s+1,f,c
  2396  00079A  C018  FFD9         	movff	strtod@s,fsr2l
  2397  00079E  C019  FFDA         	movff	strtod@s+1,fsr2h
  2398  0007A2  0E2D               	movlw	45
  2399  0007A4  18DE               	xorwf	postinc2,w,c
  2400  0007A6  A4D8               	btfss	status,2,c
  2401  0007A8  D002               	goto	l418
  2402  0007AA  861E               	bsf	strtod@flags,3,c
  2403  0007AC  D008               	goto	u2680
  2404  0007AE                     l418:
  2405  0007AE  C018  FFD9         	movff	strtod@s,fsr2l
  2406  0007B2  C019  FFDA         	movff	strtod@s+1,fsr2h
  2407  0007B6  0E2B               	movlw	43
  2408  0007B8  18DE               	xorwf	postinc2,w,c
  2409  0007BA  A4D8               	btfss	status,2,c
  2410  0007BC  D002               	goto	l421
  2411  0007BE                     u2680:
  2412  0007BE  4A18               	infsnz	strtod@s,f,c
  2413  0007C0  2A19               	incf	strtod@s+1,f,c
  2414  0007C2                     l421:
  2415  0007C2  C018  FFD9         	movff	strtod@s,fsr2l
  2416  0007C6  C019  FFDA         	movff	strtod@s+1,fsr2h
  2417  0007CA  0E30               	movlw	48
  2418  0007CC  18DE               	xorwf	postinc2,w,c
  2419  0007CE  B4D8               	btfsc	status,2,c
  2420  0007D0  D7F6               	goto	u2680
  2421  0007D2  C018  FFD9         	movff	strtod@s,fsr2l
  2422  0007D6  C019  FFDA         	movff	strtod@s+1,fsr2h
  2423  0007DA  50DF               	movf	indf2,w,c
  2424  0007DC  EC0B  F012         	call	_isdigit
  2425  0007E0  A0D8               	btfss	status,0,c
  2426  0007E2  D035               	goto	l426
  2427  0007E4  C018  FFD9         	movff	strtod@s,fsr2l
  2428  0007E8  C019  FFDA         	movff	strtod@s+1,fsr2h
  2429  0007EC  50DF               	movf	indf2,w,c
  2430  0007EE  0FD0               	addlw	208
  2431  0007F0  6E1D               	movwf	strtod@eexp,c
  2432  0007F2  4A18               	infsnz	strtod@s,f,c
  2433  0007F4  2A19               	incf	strtod@s+1,f,c
  2434  0007F6  C018  FFD9         	movff	strtod@s,fsr2l
  2435  0007FA  C019  FFDA         	movff	strtod@s+1,fsr2h
  2436  0007FE  50DF               	movf	indf2,w,c
  2437  000800  EC0B  F012         	call	_isdigit
  2438  000804  A0D8               	btfss	status,0,c
  2439  000806  D023               	goto	l426
  2440  000808  C018  FFD9         	movff	strtod@s,fsr2l
  2441  00080C  C019  FFDA         	movff	strtod@s+1,fsr2h
  2442  000810  50DF               	movf	indf2,w,c
  2443  000812  6E1C               	movwf	??_strtod& (0+255),c
  2444  000814  501D               	movf	strtod@eexp,w,c
  2445  000816  0D0A               	mullw	10
  2446  000818  50F3               	movf	prodl,w,c
  2447  00081A  241C               	addwf	??_strtod,w,c
  2448  00081C  0FD0               	addlw	208
  2449  00081E  6E1D               	movwf	strtod@eexp,c
  2450  000820  4A18               	infsnz	strtod@s,f,c
  2451  000822  2A19               	incf	strtod@s+1,f,c
  2452  000824  C018  FFD9         	movff	strtod@s,fsr2l
  2453  000828  C019  FFDA         	movff	strtod@s+1,fsr2h
  2454  00082C  50DF               	movf	indf2,w,c
  2455  00082E  EC0B  F012         	call	_isdigit
  2456  000832  A0D8               	btfss	status,0,c
  2457  000834  D00C               	goto	l426
  2458  000836  C018  FFD9         	movff	strtod@s,fsr2l
  2459  00083A  C019  FFDA         	movff	strtod@s+1,fsr2h
  2460  00083E  50DF               	movf	indf2,w,c
  2461  000840  6E1C               	movwf	??_strtod& (0+255),c
  2462  000842  501D               	movf	strtod@eexp,w,c
  2463  000844  0D0A               	mullw	10
  2464  000846  50F3               	movf	prodl,w,c
  2465  000848  241C               	addwf	??_strtod,w,c
  2466  00084A  0FD0               	addlw	208
  2467  00084C  6E1D               	movwf	strtod@eexp,c
  2468  00084E                     l426:
  2469  00084E  B61E               	btfsc	strtod@flags,3,c
  2470  000850  6C1D               	negf	strtod@eexp,c
  2471  000852                     l427:
  2472  000852  501D               	movf	strtod@eexp,w,c
  2473  000854  261F               	addwf	strtod@expon,f,c
  2474  000856  501A               	movf	strtod@res,w,c
  2475  000858  101B               	iorwf	strtod@res+1,w,c
  2476  00085A  A4D8               	btfss	status,2,c
  2477  00085C  A21E               	btfss	strtod@flags,1,c
  2478  00085E  D008               	goto	l428
  2479  000860  C01A  FFD9         	movff	strtod@res,fsr2l
  2480  000864  C01B  FFDA         	movff	strtod@res+1,fsr2h
  2481  000868  C018  FFDE         	movff	strtod@s,postinc2
  2482  00086C  C019  FFDD         	movff	strtod@s+1,postdec2
  2483  000870                     l428:
  2484  000870  C020  F009         	movff	strtod@_u,___altoft@c
  2485  000874  C021  F00A         	movff	strtod@_u+1,___altoft@c+1
  2486  000878  C022  F00B         	movff	strtod@_u+2,___altoft@c+2
  2487  00087C  C023  F00C         	movff	strtod@_u+3,___altoft@c+3
  2488  000880  ECE0  F00F         	call	___altoft	;wreg free
  2489  000884  C009  F020         	movff	?___altoft,strtod@_u
  2490  000888  C00A  F021         	movff	?___altoft+1,strtod@_u+1
  2491  00088C  C00B  F022         	movff	?___altoft+2,strtod@_u+2
  2492  000890  5020               	movf	strtod@_u,w,c
  2493  000892  1021               	iorwf	strtod@_u+1,w,c
  2494  000894  1022               	iorwf	strtod@_u+2,w,c
  2495  000896  A4D8               	btfss	status,2,c
  2496  000898  D007               	goto	l429
  2497  00089A  0E00               	movlw	0
  2498  00089C  6E18               	movwf	?_strtod,c
  2499  00089E  0E00               	movlw	0
  2500  0008A0  6E19               	movwf	?_strtod+1,c
  2501  0008A2  0E00               	movlw	0
  2502  0008A4  6E1A               	movwf	?_strtod+2,c
  2503  0008A6  0012               	return	
  2504  0008A8                     l429:
  2505  0008A8  AE1F               	btfss	strtod@expon,7,c
  2506  0008AA  D056               	goto	l431
  2507  0008AC  6C1F               	negf	strtod@expon,c
  2508  0008AE  D016               	goto	l432
  2509  0008B0  C020  F009         	movff	strtod@_u,___ftdiv@f1
  2510  0008B4  C021  F00A         	movff	strtod@_u+1,___ftdiv@f1+1
  2511  0008B8  C022  F00B         	movff	strtod@_u+2,___ftdiv@f1+2
  2512  0008BC  0E03               	movlw	3
  2513  0008BE  6E0C               	movwf	___ftdiv@f2,c
  2514  0008C0  0E15               	movlw	21
  2515  0008C2  6E0D               	movwf	___ftdiv@f2+1,c
  2516  0008C4  0E50               	movlw	80
  2517  0008C6  6E0E               	movwf	___ftdiv@f2+2,c
  2518  0008C8  ECA4  F00D         	call	___ftdiv	;wreg free
  2519  0008CC  C009  F020         	movff	?___ftdiv,strtod@_u
  2520  0008D0  C00A  F021         	movff	?___ftdiv+1,strtod@_u+1
  2521  0008D4  C00B  F022         	movff	?___ftdiv+2,strtod@_u+2
  2522  0008D8  0EF6               	movlw	246
  2523  0008DA  261F               	addwf	strtod@expon,f,c
  2524  0008DC                     l432:
  2525  0008DC  501F               	movf	strtod@expon,w,c
  2526  0008DE  0A80               	xorlw	128
  2527  0008E0  0F76               	addlw	-138
  2528  0008E2  A0D8               	btfss	status,0,c
  2529  0008E4  D016               	goto	l435
  2530  0008E6  D7E4               	goto	l433
  2531  0008E8  C020  F009         	movff	strtod@_u,___ftdiv@f1
  2532  0008EC  C021  F00A         	movff	strtod@_u+1,___ftdiv@f1+1
  2533  0008F0  C022  F00B         	movff	strtod@_u+2,___ftdiv@f1+2
  2534  0008F4  0E00               	movlw	0
  2535  0008F6  6E0C               	movwf	___ftdiv@f2,c
  2536  0008F8  0E20               	movlw	32
  2537  0008FA  6E0D               	movwf	___ftdiv@f2+1,c
  2538  0008FC  0E41               	movlw	65
  2539  0008FE  6E0E               	movwf	___ftdiv@f2+2,c
  2540  000900  ECA4  F00D         	call	___ftdiv	;wreg free
  2541  000904  C009  F020         	movff	?___ftdiv,strtod@_u
  2542  000908  C00A  F021         	movff	?___ftdiv+1,strtod@_u+1
  2543  00090C  C00B  F022         	movff	?___ftdiv+2,strtod@_u+2
  2544  000910  061F               	decf	strtod@expon,f,c
  2545  000912                     l435:
  2546  000912  501F               	movf	strtod@expon,w,c
  2547  000914  A4D8               	btfss	status,2,c
  2548  000916  D7E8               	goto	l436
  2549  000918  C020  F001         	movff	strtod@_u,___ftge@ff1
  2550  00091C  C021  F002         	movff	strtod@_u+1,___ftge@ff1+1
  2551  000920  C022  F003         	movff	strtod@_u+2,___ftge@ff1+2
  2552  000924  0E00               	movlw	0
  2553  000926  6E04               	movwf	___ftge@ff2,c
  2554  000928  0E80               	movlw	128
  2555  00092A  6E05               	movwf	___ftge@ff2+1,c
  2556  00092C  0E00               	movlw	0
  2557  00092E  6E06               	movwf	___ftge@ff2+2,c
  2558  000930  ECD4  F00E         	call	___ftge	;wreg free
  2559  000934  B0D8               	btfsc	status,0,c
  2560  000936  D068               	goto	l448
  2561  000938  A01E               	btfss	strtod@flags,0,c
  2562  00093A  D007               	goto	l439
  2563  00093C  0E00               	movlw	0
  2564  00093E  6E18               	movwf	?_strtod,c
  2565  000940  0E80               	movlw	128
  2566  000942  6E19               	movwf	?_strtod+1,c
  2567  000944  0E80               	movlw	128
  2568  000946  6E1A               	movwf	?_strtod+2,c
  2569  000948  0012               	return	
  2570  00094A                     l439:
  2571  00094A  0E00               	movlw	0
  2572  00094C  6E18               	movwf	?_strtod,c
  2573  00094E  0E80               	movlw	128
  2574  000950  6E19               	movwf	?_strtod+1,c
  2575  000952  0E00               	movlw	0
  2576  000954  6E1A               	movwf	?_strtod+2,c
  2577  000956  0012               	return	
  2578  000958                     l431:
  2579  000958  501F               	movf	strtod@expon,w,c
  2580  00095A  0A80               	xorlw	128
  2581  00095C  0F7F               	addlw	-129
  2582  00095E  B0D8               	btfsc	status,0,c
  2583  000960  D017               	goto	l442
  2584  000962  D052               	goto	l448
  2585  000964  C020  F009         	movff	strtod@_u,___ftmul@f1
  2586  000968  C021  F00A         	movff	strtod@_u+1,___ftmul@f1+1
  2587  00096C  C022  F00B         	movff	strtod@_u+2,___ftmul@f1+2
  2588  000970  0E03               	movlw	3
  2589  000972  6E0C               	movwf	___ftmul@f2,c
  2590  000974  0E15               	movlw	21
  2591  000976  6E0D               	movwf	___ftmul@f2+1,c
  2592  000978  0E50               	movlw	80
  2593  00097A  6E0E               	movwf	___ftmul@f2+2,c
  2594  00097C  EC2A  F00D         	call	___ftmul	;wreg free
  2595  000980  C009  F020         	movff	?___ftmul,strtod@_u
  2596  000984  C00A  F021         	movff	?___ftmul+1,strtod@_u+1
  2597  000988  C00B  F022         	movff	?___ftmul+2,strtod@_u+2
  2598  00098C  0EF6               	movlw	246
  2599  00098E  261F               	addwf	strtod@expon,f,c
  2600  000990                     l442:
  2601  000990  0E0A               	movlw	10
  2602  000992  601F               	cpfslt	strtod@expon,c
  2603  000994  D7E7               	goto	l443
  2604  000996  D015               	goto	l445
  2605  000998  C020  F009         	movff	strtod@_u,___ftmul@f1
  2606  00099C  C021  F00A         	movff	strtod@_u+1,___ftmul@f1+1
  2607  0009A0  C022  F00B         	movff	strtod@_u+2,___ftmul@f1+2
  2608  0009A4  0E00               	movlw	0
  2609  0009A6  6E0C               	movwf	___ftmul@f2,c
  2610  0009A8  0E20               	movlw	32
  2611  0009AA  6E0D               	movwf	___ftmul@f2+1,c
  2612  0009AC  0E41               	movlw	65
  2613  0009AE  6E0E               	movwf	___ftmul@f2+2,c
  2614  0009B0  EC2A  F00D         	call	___ftmul	;wreg free
  2615  0009B4  C009  F020         	movff	?___ftmul,strtod@_u
  2616  0009B8  C00A  F021         	movff	?___ftmul+1,strtod@_u+1
  2617  0009BC  C00B  F022         	movff	?___ftmul+2,strtod@_u+2
  2618  0009C0  061F               	decf	strtod@expon,f,c
  2619  0009C2                     l445:
  2620  0009C2  501F               	movf	strtod@expon,w,c
  2621  0009C4  A4D8               	btfss	status,2,c
  2622  0009C6  D7E8               	goto	l446
  2623  0009C8  0EFF               	movlw	255
  2624  0009CA  6E01               	movwf	___ftge@ff1,c
  2625  0009CC  0E7F               	movlw	127
  2626  0009CE  6E02               	movwf	___ftge@ff1+1,c
  2627  0009D0  0E7F               	movlw	127
  2628  0009D2  6E03               	movwf	___ftge@ff1+2,c
  2629  0009D4  C020  F004         	movff	strtod@_u,___ftge@ff2
  2630  0009D8  C021  F005         	movff	strtod@_u+1,___ftge@ff2+1
  2631  0009DC  C022  F006         	movff	strtod@_u+2,___ftge@ff2+2
  2632  0009E0  ECD4  F00E         	call	___ftge	;wreg free
  2633  0009E4  B0D8               	btfsc	status,0,c
  2634  0009E6  D010               	goto	l448
  2635  0009E8  A01E               	btfss	strtod@flags,0,c
  2636  0009EA  D007               	goto	l449
  2637  0009EC  0E00               	movlw	0
  2638  0009EE  6E18               	movwf	?_strtod,c
  2639  0009F0  0E80               	movlw	128
  2640  0009F2  6E19               	movwf	?_strtod+1,c
  2641  0009F4  0E80               	movlw	128
  2642  0009F6  6E1A               	movwf	?_strtod+2,c
  2643  0009F8  0012               	return	
  2644  0009FA                     l449:
  2645  0009FA  0E00               	movlw	0
  2646  0009FC  6E18               	movwf	?_strtod,c
  2647  0009FE  0E80               	movlw	128
  2648  000A00  6E19               	movwf	?_strtod+1,c
  2649  000A02  0E00               	movlw	0
  2650  000A04  6E1A               	movwf	?_strtod+2,c
  2651  000A06  0012               	return	
  2652  000A08                     l448:
  2653  000A08  A01E               	btfss	strtod@flags,0,c
  2654  000A0A  D00E               	goto	l450
  2655  000A0C  C020  F001         	movff	strtod@_u,___ftneg@f1
  2656  000A10  C021  F002         	movff	strtod@_u+1,___ftneg@f1+1
  2657  000A14  C022  F003         	movff	strtod@_u+2,___ftneg@f1+2
  2658  000A18  ECD6  F011         	call	___ftneg	;wreg free
  2659  000A1C  C001  F020         	movff	?___ftneg,strtod@_u
  2660  000A20  C002  F021         	movff	?___ftneg+1,strtod@_u+1
  2661  000A24  C003  F022         	movff	?___ftneg+2,strtod@_u+2
  2662  000A28                     l450:
  2663  000A28  C020  F018         	movff	strtod@_u,?_strtod
  2664  000A2C  C021  F019         	movff	strtod@_u+1,?_strtod+1
  2665  000A30  C022  F01A         	movff	strtod@_u+2,?_strtod+2
  2666  000A34  0012               	return	
  2667  000A36                     __end_of_strtod:
  2668                           	opt stack 0
  2669                           tblptru	equ	0xFF8
  2670                           tblptrh	equ	0xFF7
  2671                           tblptrl	equ	0xFF6
  2672                           tablat	equ	0xFF5
  2673                           prodl	equ	0xFF3
  2674                           intcon	equ	0xFF2
  2675                           postinc0	equ	0xFEE
  2676                           wreg	equ	0xFE8
  2677                           postdec1	equ	0xFE5
  2678                           fsr1h	equ	0xFE2
  2679                           fsr1l	equ	0xFE1
  2680                           indf2	equ	0xFDF
  2681                           postinc2	equ	0xFDE
  2682                           postdec2	equ	0xFDD
  2683                           fsr2h	equ	0xFDA
  2684                           fsr2l	equ	0xFD9
  2685                           status	equ	0xFD8
  2686                           
  2687 ;; *************** function _isspace *****************
  2688 ;; Defined at:
  2689 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;  c               1    wreg     unsigned char 
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;  c               1    2[COMRAM] unsigned char 
  2694 ;; Return value:  Size  Location     Type
  2695 ;;		None               void
  2696 ;; Registers used:
  2697 ;;		wreg, status,2, status,0
  2698 ;; Tracked objects:
  2699 ;;		On entry : 0/0
  2700 ;;		On exit  : 0/0
  2701 ;;		Unchanged: 0/0
  2702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2703 ;;      Params:         0       0       0       0       0       0       0
  2704 ;;      Locals:         2       0       0       0       0       0       0
  2705 ;;      Temps:          1       0       0       0       0       0       0
  2706 ;;      Totals:         3       0       0       0       0       0       0
  2707 ;;Total ram usage:        3 bytes
  2708 ;; Hardware stack levels used:    1
  2709 ;; This function calls:
  2710 ;;		Nothing
  2711 ;; This function is called by:
  2712 ;;		_strtod
  2713 ;; This function uses a non-reentrant model
  2714 ;;
  2715                           
  2716                           	psect	text10
  2717  002360                     __ptext10:
  2718                           	opt stack 0
  2719  002360                     _isspace:
  2720                           	opt stack 27
  2721                           
  2722                           ;incstack = 0
  2723                           ;isspace@c stored from wreg
  2724  002360  6E03               	movwf	isspace@c,c
  2725  002362  0E01               	movlw	1
  2726  002364  6E02               	movwf	_isspace$737,c
  2727  002366  0E20               	movlw	32
  2728  002368  1803               	xorwf	isspace@c,w,c
  2729  00236A  B4D8               	btfsc	status,2,c
  2730  00236C  D008               	goto	l637
  2731  00236E  0E0E               	movlw	14
  2732  002370  6003               	cpfslt	isspace@c,c
  2733  002372  D003               	goto	u2200
  2734  002374  0E09               	movlw	9
  2735  002376  6003               	cpfslt	isspace@c,c
  2736  002378  D002               	goto	l637
  2737  00237A                     u2200:
  2738  00237A  0E00               	movlw	0
  2739  00237C  6E02               	movwf	_isspace$737,c
  2740  00237E                     l637:
  2741  00237E  C002  F001         	movff	_isspace$737,??_isspace
  2742  002382  3001               	rrcf	??_isspace,w,c
  2743  002384  0012               	return	
  2744  002386                     __end_of_isspace:
  2745                           	opt stack 0
  2746                           tblptru	equ	0xFF8
  2747                           tblptrh	equ	0xFF7
  2748                           tblptrl	equ	0xFF6
  2749                           tablat	equ	0xFF5
  2750                           prodl	equ	0xFF3
  2751                           intcon	equ	0xFF2
  2752                           postinc0	equ	0xFEE
  2753                           wreg	equ	0xFE8
  2754                           postdec1	equ	0xFE5
  2755                           fsr1h	equ	0xFE2
  2756                           fsr1l	equ	0xFE1
  2757                           indf2	equ	0xFDF
  2758                           postinc2	equ	0xFDE
  2759                           postdec2	equ	0xFDD
  2760                           fsr2h	equ	0xFDA
  2761                           fsr2l	equ	0xFD9
  2762                           status	equ	0xFD8
  2763                           
  2764 ;; *************** function ___lmul *****************
  2765 ;; Defined at:
  2766 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;  multiplier      4    0[COMRAM] unsigned long 
  2769 ;;  multiplicand    4    4[COMRAM] unsigned long 
  2770 ;; Auto vars:     Size  Location     Type
  2771 ;;  product         4    8[COMRAM] unsigned long 
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  4    0[COMRAM] unsigned long 
  2774 ;; Registers used:
  2775 ;;		wreg, status,2, status,0
  2776 ;; Tracked objects:
  2777 ;;		On entry : 0/0
  2778 ;;		On exit  : 0/0
  2779 ;;		Unchanged: 0/0
  2780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2781 ;;      Params:         8       0       0       0       0       0       0
  2782 ;;      Locals:         4       0       0       0       0       0       0
  2783 ;;      Temps:          0       0       0       0       0       0       0
  2784 ;;      Totals:        12       0       0       0       0       0       0
  2785 ;;Total ram usage:       12 bytes
  2786 ;; Hardware stack levels used:    1
  2787 ;; This function calls:
  2788 ;;		Nothing
  2789 ;; This function is called by:
  2790 ;;		_strtod
  2791 ;; This function uses a non-reentrant model
  2792 ;;
  2793                           
  2794                           	psect	text11
  2795  0021B8                     __ptext11:
  2796                           	opt stack 0
  2797  0021B8                     ___lmul:
  2798                           	opt stack 27
  2799                           
  2800                           ;incstack = 0
  2801  0021B8  0E00               	movlw	0
  2802  0021BA  6E09               	movwf	___lmul@product,c
  2803  0021BC  0E00               	movlw	0
  2804  0021BE  6E0A               	movwf	___lmul@product+1,c
  2805  0021C0  0E00               	movlw	0
  2806  0021C2  6E0B               	movwf	___lmul@product+2,c
  2807  0021C4  0E00               	movlw	0
  2808  0021C6  6E0C               	movwf	___lmul@product+3,c
  2809  0021C8  A001               	btfss	___lmul@multiplier,0,c
  2810  0021CA  D008               	goto	l246
  2811  0021CC  5005               	movf	___lmul@multiplicand,w,c
  2812  0021CE  2609               	addwf	___lmul@product,f,c
  2813  0021D0  5006               	movf	___lmul@multiplicand+1,w,c
  2814  0021D2  220A               	addwfc	___lmul@product+1,f,c
  2815  0021D4  5007               	movf	___lmul@multiplicand+2,w,c
  2816  0021D6  220B               	addwfc	___lmul@product+2,f,c
  2817  0021D8  5008               	movf	___lmul@multiplicand+3,w,c
  2818  0021DA  220C               	addwfc	___lmul@product+3,f,c
  2819  0021DC                     l246:
  2820  0021DC  90D8               	bcf	status,0,c
  2821  0021DE  3605               	rlcf	___lmul@multiplicand,f,c
  2822  0021E0  3606               	rlcf	___lmul@multiplicand+1,f,c
  2823  0021E2  3607               	rlcf	___lmul@multiplicand+2,f,c
  2824  0021E4  3608               	rlcf	___lmul@multiplicand+3,f,c
  2825  0021E6  90D8               	bcf	status,0,c
  2826  0021E8  3204               	rrcf	___lmul@multiplier+3,f,c
  2827  0021EA  3203               	rrcf	___lmul@multiplier+2,f,c
  2828  0021EC  3202               	rrcf	___lmul@multiplier+1,f,c
  2829  0021EE  3201               	rrcf	___lmul@multiplier,f,c
  2830  0021F0  5001               	movf	___lmul@multiplier,w,c
  2831  0021F2  1002               	iorwf	___lmul@multiplier+1,w,c
  2832  0021F4  1003               	iorwf	___lmul@multiplier+2,w,c
  2833  0021F6  1004               	iorwf	___lmul@multiplier+3,w,c
  2834  0021F8  A4D8               	btfss	status,2,c
  2835  0021FA  D7E6               	goto	l245
  2836  0021FC  C009  F001         	movff	___lmul@product,?___lmul
  2837  002200  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  2838  002204  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  2839  002208  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  2840  00220C  0012               	return		;funcret
  2841  00220E                     __end_of___lmul:
  2842                           	opt stack 0
  2843                           tblptru	equ	0xFF8
  2844                           tblptrh	equ	0xFF7
  2845                           tblptrl	equ	0xFF6
  2846                           tablat	equ	0xFF5
  2847                           prodl	equ	0xFF3
  2848                           intcon	equ	0xFF2
  2849                           postinc0	equ	0xFEE
  2850                           wreg	equ	0xFE8
  2851                           postdec1	equ	0xFE5
  2852                           fsr1h	equ	0xFE2
  2853                           fsr1l	equ	0xFE1
  2854                           indf2	equ	0xFDF
  2855                           postinc2	equ	0xFDE
  2856                           postdec2	equ	0xFDD
  2857                           fsr2h	equ	0xFDA
  2858                           fsr2l	equ	0xFD9
  2859                           status	equ	0xFD8
  2860                           
  2861 ;; *************** function ___ftge *****************
  2862 ;; Defined at:
  2863 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  2864 ;; Parameters:    Size  Location     Type
  2865 ;;  ff1             3    0[COMRAM] float 
  2866 ;;  ff2             3    3[COMRAM] float 
  2867 ;; Auto vars:     Size  Location     Type
  2868 ;;		None
  2869 ;; Return value:  Size  Location     Type
  2870 ;;		None               void
  2871 ;; Registers used:
  2872 ;;		wreg, status,2, status,0
  2873 ;; Tracked objects:
  2874 ;;		On entry : 0/0
  2875 ;;		On exit  : 0/0
  2876 ;;		Unchanged: 0/0
  2877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2878 ;;      Params:         6       0       0       0       0       0       0
  2879 ;;      Locals:         0       0       0       0       0       0       0
  2880 ;;      Temps:          3       0       0       0       0       0       0
  2881 ;;      Totals:         9       0       0       0       0       0       0
  2882 ;;Total ram usage:        9 bytes
  2883 ;; Hardware stack levels used:    1
  2884 ;; This function calls:
  2885 ;;		Nothing
  2886 ;; This function is called by:
  2887 ;;		_strtod
  2888 ;; This function uses a non-reentrant model
  2889 ;;
  2890                           
  2891                           	psect	text12
  2892  001DA8                     __ptext12:
  2893                           	opt stack 0
  2894  001DA8                     ___ftge:
  2895                           	opt stack 27
  2896                           
  2897                           ;incstack = 0
  2898  001DA8  AE03               	btfss	___ftge@ff1+2,7,c
  2899  001DAA  D016               	goto	l581
  2900  001DAC  C001  F007         	movff	___ftge@ff1,??___ftge
  2901  001DB0  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  2902  001DB4  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  2903  001DB8  1E07               	comf	??___ftge,f,c
  2904  001DBA  1E08               	comf	??___ftge+1,f,c
  2905  001DBC  1E09               	comf	??___ftge+2,f,c
  2906  001DBE  2A07               	incf	??___ftge,f,c
  2907  001DC0  0E00               	movlw	0
  2908  001DC2  2208               	addwfc	??___ftge+1,f,c
  2909  001DC4  2209               	addwfc	??___ftge+2,f,c
  2910  001DC6  0E00               	movlw	0
  2911  001DC8  2407               	addwf	??___ftge,w,c
  2912  001DCA  6E01               	movwf	___ftge@ff1,c
  2913  001DCC  0E00               	movlw	0
  2914  001DCE  2008               	addwfc	??___ftge+1,w,c
  2915  001DD0  6E02               	movwf	___ftge@ff1+1,c
  2916  001DD2  0E80               	movlw	128
  2917  001DD4  2009               	addwfc	??___ftge+2,w,c
  2918  001DD6  6E03               	movwf	___ftge@ff1+2,c
  2919  001DD8                     l581:
  2920  001DD8  AE06               	btfss	___ftge@ff2+2,7,c
  2921  001DDA  D016               	goto	l582
  2922  001DDC  C004  F007         	movff	___ftge@ff2,??___ftge
  2923  001DE0  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  2924  001DE4  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  2925  001DE8  1E07               	comf	??___ftge,f,c
  2926  001DEA  1E08               	comf	??___ftge+1,f,c
  2927  001DEC  1E09               	comf	??___ftge+2,f,c
  2928  001DEE  2A07               	incf	??___ftge,f,c
  2929  001DF0  0E00               	movlw	0
  2930  001DF2  2208               	addwfc	??___ftge+1,f,c
  2931  001DF4  2209               	addwfc	??___ftge+2,f,c
  2932  001DF6  0E00               	movlw	0
  2933  001DF8  2407               	addwf	??___ftge,w,c
  2934  001DFA  6E04               	movwf	___ftge@ff2,c
  2935  001DFC  0E00               	movlw	0
  2936  001DFE  2008               	addwfc	??___ftge+1,w,c
  2937  001E00  6E05               	movwf	___ftge@ff2+1,c
  2938  001E02  0E80               	movlw	128
  2939  001E04  2009               	addwfc	??___ftge+2,w,c
  2940  001E06  6E06               	movwf	___ftge@ff2+2,c
  2941  001E08                     l582:
  2942  001E08  0E00               	movlw	0
  2943  001E0A  1A01               	xorwf	___ftge@ff1,f,c
  2944  001E0C  0E00               	movlw	0
  2945  001E0E  1A02               	xorwf	___ftge@ff1+1,f,c
  2946  001E10  0E80               	movlw	128
  2947  001E12  1A03               	xorwf	___ftge@ff1+2,f,c
  2948  001E14  0E00               	movlw	0
  2949  001E16  1A04               	xorwf	___ftge@ff2,f,c
  2950  001E18  0E00               	movlw	0
  2951  001E1A  1A05               	xorwf	___ftge@ff2+1,f,c
  2952  001E1C  0E80               	movlw	128
  2953  001E1E  1A06               	xorwf	___ftge@ff2+2,f,c
  2954  001E20  5004               	movf	___ftge@ff2,w,c
  2955  001E22  5C01               	subwf	___ftge@ff1,w,c
  2956  001E24  5005               	movf	___ftge@ff2+1,w,c
  2957  001E26  5802               	subwfb	___ftge@ff1+1,w,c
  2958  001E28  5006               	movf	___ftge@ff2+2,w,c
  2959  001E2A  5803               	subwfb	___ftge@ff1+2,w,c
  2960  001E2C  B0D8               	btfsc	status,0,c
  2961  001E2E  D002               	goto	l2182
  2962  001E30  90D8               	bcf	status,0,c
  2963  001E32  0012               	return	
  2964  001E34                     l2182:
  2965  001E34  80D8               	bsf	status,0,c
  2966  001E36  0012               	return	
  2967  001E38                     __end_of___ftge:
  2968                           	opt stack 0
  2969                           tblptru	equ	0xFF8
  2970                           tblptrh	equ	0xFF7
  2971                           tblptrl	equ	0xFF6
  2972                           tablat	equ	0xFF5
  2973                           prodl	equ	0xFF3
  2974                           intcon	equ	0xFF2
  2975                           postinc0	equ	0xFEE
  2976                           wreg	equ	0xFE8
  2977                           postdec1	equ	0xFE5
  2978                           fsr1h	equ	0xFE2
  2979                           fsr1l	equ	0xFE1
  2980                           indf2	equ	0xFDF
  2981                           postinc2	equ	0xFDE
  2982                           postdec2	equ	0xFDD
  2983                           fsr2h	equ	0xFDA
  2984                           fsr2l	equ	0xFD9
  2985                           status	equ	0xFD8
  2986                           
  2987 ;; *************** function ___ftdiv *****************
  2988 ;; Defined at:
  2989 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;  f1              3    8[COMRAM] float 
  2992 ;;  f2              3   11[COMRAM] float 
  2993 ;; Auto vars:     Size  Location     Type
  2994 ;;  f3              3   18[COMRAM] float 
  2995 ;;  sign            1   22[COMRAM] unsigned char 
  2996 ;;  exp             1   21[COMRAM] unsigned char 
  2997 ;;  cntr            1   17[COMRAM] unsigned char 
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  3    8[COMRAM] float 
  3000 ;; Registers used:
  3001 ;;		wreg, status,2, status,0, cstack
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3007 ;;      Params:         6       0       0       0       0       0       0
  3008 ;;      Locals:         6       0       0       0       0       0       0
  3009 ;;      Temps:          3       0       0       0       0       0       0
  3010 ;;      Totals:        15       0       0       0       0       0       0
  3011 ;;Total ram usage:       15 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    1
  3014 ;; This function calls:
  3015 ;;		___ftpack
  3016 ;; This function is called by:
  3017 ;;		_read_gps
  3018 ;;		_strtod
  3019 ;; This function uses a non-reentrant model
  3020 ;;
  3021                           
  3022                           	psect	text13
  3023  001B48                     __ptext13:
  3024                           	opt stack 0
  3025  001B48                     ___ftdiv:
  3026                           	opt stack 26
  3027                           
  3028                           ;incstack = 0
  3029  001B48  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  3030  001B4C  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  3031  001B4E  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  3032  001B50  340A               	rlcf	___ftdiv@f1+1,w,c
  3033  001B52  360F               	rlcf	??___ftdiv& (0+255),f,c
  3034  001B54  E301               	bnc	u2071
  3035  001B56  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  3036  001B58                     u2071:
  3037  001B58  500F               	movf	??___ftdiv,w,c
  3038  001B5A  6E16               	movwf	___ftdiv@exp,c
  3039  001B5C  5016               	movf	___ftdiv@exp,w,c
  3040  001B5E  A4D8               	btfss	status,2,c
  3041  001B60  D007               	goto	l573
  3042  001B62  0E00               	movlw	0
  3043  001B64  6E09               	movwf	?___ftdiv,c
  3044  001B66  0E00               	movlw	0
  3045  001B68  6E0A               	movwf	?___ftdiv+1,c
  3046  001B6A  0E00               	movlw	0
  3047  001B6C  6E0B               	movwf	?___ftdiv+2,c
  3048  001B6E  0012               	return	
  3049  001B70                     l573:
  3050  001B70  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  3051  001B74  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  3052  001B76  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  3053  001B78  340D               	rlcf	___ftdiv@f2+1,w,c
  3054  001B7A  360F               	rlcf	??___ftdiv& (0+255),f,c
  3055  001B7C  E301               	bnc	u2091
  3056  001B7E  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  3057  001B80                     u2091:
  3058  001B80  500F               	movf	??___ftdiv,w,c
  3059  001B82  6E17               	movwf	___ftdiv@sign,c
  3060  001B84  5017               	movf	___ftdiv@sign,w,c
  3061  001B86  A4D8               	btfss	status,2,c
  3062  001B88  D007               	goto	l575
  3063  001B8A  0E00               	movlw	0
  3064  001B8C  6E09               	movwf	?___ftdiv,c
  3065  001B8E  0E00               	movlw	0
  3066  001B90  6E0A               	movwf	?___ftdiv+1,c
  3067  001B92  0E00               	movlw	0
  3068  001B94  6E0B               	movwf	?___ftdiv+2,c
  3069  001B96  0012               	return	
  3070  001B98                     l575:
  3071  001B98  0E00               	movlw	0
  3072  001B9A  6E13               	movwf	___ftdiv@f3,c
  3073  001B9C  0E00               	movlw	0
  3074  001B9E  6E14               	movwf	___ftdiv@f3+1,c
  3075  001BA0  0E00               	movlw	0
  3076  001BA2  6E15               	movwf	___ftdiv@f3+2,c
  3077  001BA4  5017               	movf	___ftdiv@sign,w,c
  3078  001BA6  0F89               	addlw	137
  3079  001BA8  5E16               	subwf	___ftdiv@exp,f,c
  3080  001BAA  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  3081  001BAE  500E               	movf	___ftdiv@f2+2,w,c
  3082  001BB0  1A17               	xorwf	___ftdiv@sign,f,c
  3083  001BB2  0E80               	movlw	128
  3084  001BB4  1617               	andwf	___ftdiv@sign,f,c
  3085  001BB6  8E0A               	bsf	___ftdiv@f1+1,7,c
  3086  001BB8  0EFF               	movlw	255
  3087  001BBA  1609               	andwf	___ftdiv@f1,f,c
  3088  001BBC  0EFF               	movlw	255
  3089  001BBE  160A               	andwf	___ftdiv@f1+1,f,c
  3090  001BC0  0E00               	movlw	0
  3091  001BC2  160B               	andwf	___ftdiv@f1+2,f,c
  3092  001BC4  8E0D               	bsf	___ftdiv@f2+1,7,c
  3093  001BC6  0EFF               	movlw	255
  3094  001BC8  160C               	andwf	___ftdiv@f2,f,c
  3095  001BCA  0EFF               	movlw	255
  3096  001BCC  160D               	andwf	___ftdiv@f2+1,f,c
  3097  001BCE  0E00               	movlw	0
  3098  001BD0  160E               	andwf	___ftdiv@f2+2,f,c
  3099  001BD2  0E18               	movlw	24
  3100  001BD4  6E12               	movwf	___ftdiv@cntr,c
  3101  001BD6  90D8               	bcf	status,0,c
  3102  001BD8  3613               	rlcf	___ftdiv@f3,f,c
  3103  001BDA  3614               	rlcf	___ftdiv@f3+1,f,c
  3104  001BDC  3615               	rlcf	___ftdiv@f3+2,f,c
  3105  001BDE  500C               	movf	___ftdiv@f2,w,c
  3106  001BE0  5C09               	subwf	___ftdiv@f1,w,c
  3107  001BE2  500D               	movf	___ftdiv@f2+1,w,c
  3108  001BE4  580A               	subwfb	___ftdiv@f1+1,w,c
  3109  001BE6  500E               	movf	___ftdiv@f2+2,w,c
  3110  001BE8  580B               	subwfb	___ftdiv@f1+2,w,c
  3111  001BEA  A0D8               	btfss	status,0,c
  3112  001BEC  D007               	goto	l577
  3113  001BEE  500C               	movf	___ftdiv@f2,w,c
  3114  001BF0  5E09               	subwf	___ftdiv@f1,f,c
  3115  001BF2  500D               	movf	___ftdiv@f2+1,w,c
  3116  001BF4  5A0A               	subwfb	___ftdiv@f1+1,f,c
  3117  001BF6  500E               	movf	___ftdiv@f2+2,w,c
  3118  001BF8  5A0B               	subwfb	___ftdiv@f1+2,f,c
  3119  001BFA  8013               	bsf	___ftdiv@f3,0,c
  3120  001BFC                     l577:
  3121  001BFC  90D8               	bcf	status,0,c
  3122  001BFE  3609               	rlcf	___ftdiv@f1,f,c
  3123  001C00  360A               	rlcf	___ftdiv@f1+1,f,c
  3124  001C02  360B               	rlcf	___ftdiv@f1+2,f,c
  3125  001C04  2E12               	decfsz	___ftdiv@cntr,f,c
  3126  001C06  D7E7               	goto	l576
  3127  001C08  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  3128  001C0C  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3129  001C10  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3130  001C14  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  3131  001C18  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  3132  001C1C  EC7D  F00E         	call	___ftpack	;wreg free
  3133  001C20  C001  F009         	movff	?___ftpack,?___ftdiv
  3134  001C24  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  3135  001C28  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  3136  001C2C  0012               	return	
  3137  001C2E                     __end_of___ftdiv:
  3138                           	opt stack 0
  3139                           tblptru	equ	0xFF8
  3140                           tblptrh	equ	0xFF7
  3141                           tblptrl	equ	0xFF6
  3142                           tablat	equ	0xFF5
  3143                           prodl	equ	0xFF3
  3144                           intcon	equ	0xFF2
  3145                           postinc0	equ	0xFEE
  3146                           wreg	equ	0xFE8
  3147                           postdec1	equ	0xFE5
  3148                           fsr1h	equ	0xFE2
  3149                           fsr1l	equ	0xFE1
  3150                           indf2	equ	0xFDF
  3151                           postinc2	equ	0xFDE
  3152                           postdec2	equ	0xFDD
  3153                           fsr2h	equ	0xFDA
  3154                           fsr2l	equ	0xFD9
  3155                           status	equ	0xFD8
  3156                           
  3157 ;; *************** function ___altoft *****************
  3158 ;; Defined at:
  3159 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  3160 ;; Parameters:    Size  Location     Type
  3161 ;;  c               4    8[COMRAM] long 
  3162 ;; Auto vars:     Size  Location     Type
  3163 ;;  sign            1   17[COMRAM] unsigned char 
  3164 ;;  exp             1   16[COMRAM] unsigned char 
  3165 ;; Return value:  Size  Location     Type
  3166 ;;                  3    8[COMRAM] float 
  3167 ;; Registers used:
  3168 ;;		wreg, status,2, status,0, cstack
  3169 ;; Tracked objects:
  3170 ;;		On entry : 0/0
  3171 ;;		On exit  : 0/0
  3172 ;;		Unchanged: 0/0
  3173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3174 ;;      Params:         4       0       0       0       0       0       0
  3175 ;;      Locals:         2       0       0       0       0       0       0
  3176 ;;      Temps:          4       0       0       0       0       0       0
  3177 ;;      Totals:        10       0       0       0       0       0       0
  3178 ;;Total ram usage:       10 bytes
  3179 ;; Hardware stack levels used:    1
  3180 ;; Hardware stack levels required when called:    1
  3181 ;; This function calls:
  3182 ;;		___ftpack
  3183 ;; This function is called by:
  3184 ;;		_strtod
  3185 ;; This function uses a non-reentrant model
  3186 ;;
  3187                           
  3188                           	psect	text14
  3189  001FC0                     __ptext14:
  3190                           	opt stack 0
  3191  001FC0                     ___altoft:
  3192                           	opt stack 26
  3193                           
  3194                           ;incstack = 0
  3195  001FC0  0E00               	movlw	0
  3196  001FC2  6E12               	movwf	___altoft@sign,c
  3197  001FC4  0E8E               	movlw	142
  3198  001FC6  6E11               	movwf	___altoft@exp,c
  3199  001FC8  AE0C               	btfss	___altoft@c+3,7,c
  3200  001FCA  D011               	goto	l318
  3201  001FCC  1E0C               	comf	___altoft@c+3,f,c
  3202  001FCE  1E0B               	comf	___altoft@c+2,f,c
  3203  001FD0  1E0A               	comf	___altoft@c+1,f,c
  3204  001FD2  6C09               	negf	___altoft@c,c
  3205  001FD4  0E00               	movlw	0
  3206  001FD6  220A               	addwfc	___altoft@c+1,f,c
  3207  001FD8  220B               	addwfc	___altoft@c+2,f,c
  3208  001FDA  220C               	addwfc	___altoft@c+3,f,c
  3209  001FDC  0E01               	movlw	1
  3210  001FDE  6E12               	movwf	___altoft@sign,c
  3211  001FE0  D006               	goto	l318
  3212  001FE2  90D8               	bcf	status,0,c
  3213  001FE4  320C               	rrcf	___altoft@c+3,f,c
  3214  001FE6  320B               	rrcf	___altoft@c+2,f,c
  3215  001FE8  320A               	rrcf	___altoft@c+1,f,c
  3216  001FEA  3209               	rrcf	___altoft@c,f,c
  3217  001FEC  2A11               	incf	___altoft@exp,f,c
  3218  001FEE                     l318:
  3219  001FEE  0E00               	movlw	0
  3220  001FF0  1409               	andwf	___altoft@c,w,c
  3221  001FF2  6E0D               	movwf	??___altoft& (0+255),c
  3222  001FF4  0E00               	movlw	0
  3223  001FF6  140A               	andwf	___altoft@c+1,w,c
  3224  001FF8  6E0E               	movwf	(??___altoft+1)& (0+255),c
  3225  001FFA  0E00               	movlw	0
  3226  001FFC  140B               	andwf	___altoft@c+2,w,c
  3227  001FFE  6E0F               	movwf	(??___altoft+2)& (0+255),c
  3228  002000  0EFF               	movlw	255
  3229  002002  140C               	andwf	___altoft@c+3,w,c
  3230  002004  6E10               	movwf	(??___altoft+3)& (0+255),c
  3231  002006  500D               	movf	??___altoft,w,c
  3232  002008  100E               	iorwf	??___altoft+1,w,c
  3233  00200A  100F               	iorwf	??___altoft+2,w,c
  3234  00200C  1010               	iorwf	??___altoft+3,w,c
  3235  00200E  A4D8               	btfss	status,2,c
  3236  002010  D7E8               	goto	l319
  3237  002012  C009  F001         	movff	___altoft@c,___ftpack@arg
  3238  002016  C00A  F002         	movff	___altoft@c+1,___ftpack@arg+1
  3239  00201A  C00B  F003         	movff	___altoft@c+2,___ftpack@arg+2
  3240  00201E  C011  F004         	movff	___altoft@exp,___ftpack@exp
  3241  002022  C012  F005         	movff	___altoft@sign,___ftpack@sign
  3242  002026  EC7D  F00E         	call	___ftpack	;wreg free
  3243  00202A  C001  F009         	movff	?___ftpack,?___altoft
  3244  00202E  C002  F00A         	movff	?___ftpack+1,?___altoft+1
  3245  002032  C003  F00B         	movff	?___ftpack+2,?___altoft+2
  3246  002036  0012               	return	
  3247  002038                     __end_of___altoft:
  3248                           	opt stack 0
  3249                           tblptru	equ	0xFF8
  3250                           tblptrh	equ	0xFF7
  3251                           tblptrl	equ	0xFF6
  3252                           tablat	equ	0xFF5
  3253                           prodl	equ	0xFF3
  3254                           intcon	equ	0xFF2
  3255                           postinc0	equ	0xFEE
  3256                           wreg	equ	0xFE8
  3257                           postdec1	equ	0xFE5
  3258                           fsr1h	equ	0xFE2
  3259                           fsr1l	equ	0xFE1
  3260                           indf2	equ	0xFDF
  3261                           postinc2	equ	0xFDE
  3262                           postdec2	equ	0xFDD
  3263                           fsr2h	equ	0xFDA
  3264                           fsr2l	equ	0xFD9
  3265                           status	equ	0xFD8
  3266                           
  3267 ;; *************** function _UART_Read_Char *****************
  3268 ;; Defined at:
  3269 ;;		line 41 in file "uart.h"
  3270 ;; Parameters:    Size  Location     Type
  3271 ;;  Output          2    0[COMRAM] PTR unsigned char 
  3272 ;;		 -> RAM(1535), 
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;		None
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  1    wreg      unsigned char 
  3277 ;; Registers used:
  3278 ;;		wreg, status,2, cstack
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3284 ;;      Params:         2       0       0       0       0       0       0
  3285 ;;      Locals:         0       0       0       0       0       0       0
  3286 ;;      Temps:          2       0       0       0       0       0       0
  3287 ;;      Totals:         4       0       0       0       0       0       0
  3288 ;;Total ram usage:        4 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; Hardware stack levels required when called:    1
  3291 ;; This function calls:
  3292 ;;		_UART_Read
  3293 ;; This function is called by:
  3294 ;;		_read_gps
  3295 ;; This function uses a non-reentrant model
  3296 ;;
  3297                           
  3298                           	psect	text15
  3299  002434                     __ptext15:
  3300                           	opt stack 0
  3301  002434                     _UART_Read_Char:
  3302                           	opt stack 28
  3303                           
  3304                           ;uart.h: 43: Output = UART_Read();
  3305                           
  3306                           ;incstack = 0
  3307  002434  EC24  F012         	call	_UART_Read	;wreg free
  3308  002438  6E03               	movwf	??_UART_Read_Char& (0+255),c
  3309  00243A  6A04               	clrf	(??_UART_Read_Char+1)& (0+255),c
  3310  00243C  C003  F001         	movff	??_UART_Read_Char,UART_Read_Char@Output
  3311  002440  C004  F002         	movff	??_UART_Read_Char+1,UART_Read_Char@Output+1
  3312                           
  3313                           ;uart.h: 44: return Output;
  3314  002444  5001               	movf	UART_Read_Char@Output,w,c
  3315  002446  0012               	return	
  3316  002448                     __end_of_UART_Read_Char:
  3317                           	opt stack 0
  3318                           tblptru	equ	0xFF8
  3319                           tblptrh	equ	0xFF7
  3320                           tblptrl	equ	0xFF6
  3321                           tablat	equ	0xFF5
  3322                           prodl	equ	0xFF3
  3323                           intcon	equ	0xFF2
  3324                           postinc0	equ	0xFEE
  3325                           wreg	equ	0xFE8
  3326                           postdec1	equ	0xFE5
  3327                           fsr1h	equ	0xFE2
  3328                           fsr1l	equ	0xFE1
  3329                           indf2	equ	0xFDF
  3330                           postinc2	equ	0xFDE
  3331                           postdec2	equ	0xFDD
  3332                           fsr2h	equ	0xFDA
  3333                           fsr2l	equ	0xFD9
  3334                           status	equ	0xFD8
  3335                           
  3336 ;; *************** function _UART_Read *****************
  3337 ;; Defined at:
  3338 ;;		line 34 in file "uart.h"
  3339 ;; Parameters:    Size  Location     Type
  3340 ;;		None
  3341 ;; Auto vars:     Size  Location     Type
  3342 ;;		None
  3343 ;; Return value:  Size  Location     Type
  3344 ;;                  1    wreg      unsigned char 
  3345 ;; Registers used:
  3346 ;;		wreg, status,2
  3347 ;; Tracked objects:
  3348 ;;		On entry : 0/0
  3349 ;;		On exit  : 0/0
  3350 ;;		Unchanged: 0/0
  3351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3352 ;;      Params:         0       0       0       0       0       0       0
  3353 ;;      Locals:         0       0       0       0       0       0       0
  3354 ;;      Temps:          0       0       0       0       0       0       0
  3355 ;;      Totals:         0       0       0       0       0       0       0
  3356 ;;Total ram usage:        0 bytes
  3357 ;; Hardware stack levels used:    1
  3358 ;; This function calls:
  3359 ;;		Nothing
  3360 ;; This function is called by:
  3361 ;;		_UART_Read_Char
  3362 ;;		_UART_Read_Text
  3363 ;; This function uses a non-reentrant model
  3364 ;;
  3365                           
  3366                           	psect	text16
  3367  002448                     __ptext16:
  3368                           	opt stack 0
  3369  002448                     _UART_Read:
  3370                           	opt stack 28
  3371                           
  3372                           ;uart.h: 37: while(!RCIF);
  3373                           
  3374                           ;incstack = 0
  3375  002448  AA9E               	btfss	3998,5,c	;volatile
  3376  00244A  D7FE               	goto	_UART_Read
  3377                           
  3378                           ;uart.h: 38: return RCREG;
  3379  00244C  50AE               	movf	4014,w,c	;volatile
  3380  00244E  0012               	return	
  3381  002450                     __end_of_UART_Read:
  3382                           	opt stack 0
  3383                           tblptru	equ	0xFF8
  3384                           tblptrh	equ	0xFF7
  3385                           tblptrl	equ	0xFF6
  3386                           tablat	equ	0xFF5
  3387                           prodl	equ	0xFF3
  3388                           intcon	equ	0xFF2
  3389                           postinc0	equ	0xFEE
  3390                           wreg	equ	0xFE8
  3391                           postdec1	equ	0xFE5
  3392                           fsr1h	equ	0xFE2
  3393                           fsr1l	equ	0xFE1
  3394                           indf2	equ	0xFDF
  3395                           postinc2	equ	0xFDE
  3396                           postdec2	equ	0xFDD
  3397                           fsr2h	equ	0xFDA
  3398                           fsr2l	equ	0xFD9
  3399                           status	equ	0xFD8
  3400                           
  3401 ;; *************** function _UART_Init *****************
  3402 ;; Defined at:
  3403 ;;		line 2 in file "uart.h"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;  baudrate        4   14[COMRAM] const long 
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;  x               2   26[COMRAM] unsigned int 
  3408 ;; Return value:  Size  Location     Type
  3409 ;;                  1    wreg      unsigned char 
  3410 ;; Registers used:
  3411 ;;		wreg, status,2, status,0, cstack
  3412 ;; Tracked objects:
  3413 ;;		On entry : 0/0
  3414 ;;		On exit  : 0/0
  3415 ;;		Unchanged: 0/0
  3416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3417 ;;      Params:         4       0       0       0       0       0       0
  3418 ;;      Locals:         2       0       0       0       0       0       0
  3419 ;;      Temps:          8       0       0       0       0       0       0
  3420 ;;      Totals:        14       0       0       0       0       0       0
  3421 ;;Total ram usage:       14 bytes
  3422 ;; Hardware stack levels used:    1
  3423 ;; Hardware stack levels required when called:    1
  3424 ;; This function calls:
  3425 ;;		___aldiv
  3426 ;; This function is called by:
  3427 ;;		_main
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           	psect	text17
  3432  0013EC                     __ptext17:
  3433                           	opt stack 0
  3434  0013EC                     _UART_Init:
  3435                           	opt stack 29
  3436                           
  3437                           ;uart.h: 4: unsigned int x;
  3438                           ;uart.h: 5: x = (800000 - baudrate*64)/(baudrate*64);
  3439                           
  3440                           ;incstack = 0
  3441  0013EC  C00F  F013         	movff	UART_Init@baudrate,??_UART_Init
  3442  0013F0  C010  F014         	movff	UART_Init@baudrate+1,??_UART_Init+1
  3443  0013F4  C011  F015         	movff	UART_Init@baudrate+2,??_UART_Init+2
  3444  0013F8  C012  F016         	movff	UART_Init@baudrate+3,??_UART_Init+3
  3445  0013FC  0E06               	movlw	6
  3446  0013FE                     u3175:
  3447  0013FE  90D8               	bcf	status,0,c
  3448  001400  3613               	rlcf	??_UART_Init,f,c
  3449  001402  3614               	rlcf	??_UART_Init+1,f,c
  3450  001404  3615               	rlcf	??_UART_Init+2,f,c
  3451  001406  3616               	rlcf	??_UART_Init+3,f,c
  3452  001408  2EE8               	decfsz	wreg,f,c
  3453  00140A  D7F9               	goto	u3175
  3454  00140C  1E13               	comf	??_UART_Init,f,c
  3455  00140E  1E14               	comf	??_UART_Init+1,f,c
  3456  001410  1E15               	comf	??_UART_Init+2,f,c
  3457  001412  1E16               	comf	??_UART_Init+3,f,c
  3458  001414  2A13               	incf	??_UART_Init,f,c
  3459  001416  0E00               	movlw	0
  3460  001418  2214               	addwfc	??_UART_Init+1,f,c
  3461  00141A  2215               	addwfc	??_UART_Init+2,f,c
  3462  00141C  2216               	addwfc	??_UART_Init+3,f,c
  3463  00141E  0E00               	movlw	0
  3464  001420  2413               	addwf	??_UART_Init,w,c
  3465  001422  6E01               	movwf	___aldiv@dividend,c
  3466  001424  0E35               	movlw	53
  3467  001426  2014               	addwfc	??_UART_Init+1,w,c
  3468  001428  6E02               	movwf	___aldiv@dividend+1,c
  3469  00142A  0E0C               	movlw	12
  3470  00142C  2015               	addwfc	??_UART_Init+2,w,c
  3471  00142E  6E03               	movwf	___aldiv@dividend+2,c
  3472  001430  0E00               	movlw	0
  3473  001432  2016               	addwfc	??_UART_Init+3,w,c
  3474  001434  6E04               	movwf	___aldiv@dividend+3,c
  3475  001436  C00F  F017         	movff	UART_Init@baudrate,??_UART_Init+4
  3476  00143A  C010  F018         	movff	UART_Init@baudrate+1,??_UART_Init+5
  3477  00143E  C011  F019         	movff	UART_Init@baudrate+2,??_UART_Init+6
  3478  001442  C012  F01A         	movff	UART_Init@baudrate+3,??_UART_Init+7
  3479  001446  0E06               	movlw	6
  3480  001448                     u3185:
  3481  001448  90D8               	bcf	status,0,c
  3482  00144A  3617               	rlcf	??_UART_Init+4,f,c
  3483  00144C  3618               	rlcf	??_UART_Init+5,f,c
  3484  00144E  3619               	rlcf	??_UART_Init+6,f,c
  3485  001450  361A               	rlcf	??_UART_Init+7,f,c
  3486  001452  2EE8               	decfsz	wreg,f,c
  3487  001454  D7F9               	goto	u3185
  3488  001456  C017  F005         	movff	??_UART_Init+4,___aldiv@divisor
  3489  00145A  C018  F006         	movff	??_UART_Init+5,___aldiv@divisor+1
  3490  00145E  C019  F007         	movff	??_UART_Init+6,___aldiv@divisor+2
  3491  001462  C01A  F008         	movff	??_UART_Init+7,___aldiv@divisor+3
  3492  001466  EC17  F00E         	call	___aldiv	;wreg free
  3493  00146A  C001  F01B         	movff	?___aldiv,UART_Init@x
  3494  00146E  C002  F01C         	movff	?___aldiv+1,UART_Init@x+1
  3495                           
  3496                           ;uart.h: 6: if(x>255)
  3497  001472  041C               	decf	UART_Init@x+1,w,c
  3498  001474  A0D8               	btfss	status,0,c
  3499  001476  D044               	goto	l106
  3500                           
  3501                           ;uart.h: 7: {
  3502                           ;uart.h: 8: x = (800000 - baudrate*16)/(baudrate*16);
  3503  001478  C00F  F013         	movff	UART_Init@baudrate,??_UART_Init
  3504  00147C  C010  F014         	movff	UART_Init@baudrate+1,??_UART_Init+1
  3505  001480  C011  F015         	movff	UART_Init@baudrate+2,??_UART_Init+2
  3506  001484  C012  F016         	movff	UART_Init@baudrate+3,??_UART_Init+3
  3507  001488  0E04               	movlw	4
  3508  00148A                     u3205:
  3509  00148A  90D8               	bcf	status,0,c
  3510  00148C  3613               	rlcf	??_UART_Init,f,c
  3511  00148E  3614               	rlcf	??_UART_Init+1,f,c
  3512  001490  3615               	rlcf	??_UART_Init+2,f,c
  3513  001492  3616               	rlcf	??_UART_Init+3,f,c
  3514  001494  2EE8               	decfsz	wreg,f,c
  3515  001496  D7F9               	goto	u3205
  3516  001498  1E13               	comf	??_UART_Init,f,c
  3517  00149A  1E14               	comf	??_UART_Init+1,f,c
  3518  00149C  1E15               	comf	??_UART_Init+2,f,c
  3519  00149E  1E16               	comf	??_UART_Init+3,f,c
  3520  0014A0  2A13               	incf	??_UART_Init,f,c
  3521  0014A2  0E00               	movlw	0
  3522  0014A4  2214               	addwfc	??_UART_Init+1,f,c
  3523  0014A6  2215               	addwfc	??_UART_Init+2,f,c
  3524  0014A8  2216               	addwfc	??_UART_Init+3,f,c
  3525  0014AA  0E00               	movlw	0
  3526  0014AC  2413               	addwf	??_UART_Init,w,c
  3527  0014AE  6E01               	movwf	___aldiv@dividend,c
  3528  0014B0  0E35               	movlw	53
  3529  0014B2  2014               	addwfc	??_UART_Init+1,w,c
  3530  0014B4  6E02               	movwf	___aldiv@dividend+1,c
  3531  0014B6  0E0C               	movlw	12
  3532  0014B8  2015               	addwfc	??_UART_Init+2,w,c
  3533  0014BA  6E03               	movwf	___aldiv@dividend+2,c
  3534  0014BC  0E00               	movlw	0
  3535  0014BE  2016               	addwfc	??_UART_Init+3,w,c
  3536  0014C0  6E04               	movwf	___aldiv@dividend+3,c
  3537  0014C2  C00F  F017         	movff	UART_Init@baudrate,??_UART_Init+4
  3538  0014C6  C010  F018         	movff	UART_Init@baudrate+1,??_UART_Init+5
  3539  0014CA  C011  F019         	movff	UART_Init@baudrate+2,??_UART_Init+6
  3540  0014CE  C012  F01A         	movff	UART_Init@baudrate+3,??_UART_Init+7
  3541  0014D2  0E04               	movlw	4
  3542  0014D4                     u3215:
  3543  0014D4  90D8               	bcf	status,0,c
  3544  0014D6  3617               	rlcf	??_UART_Init+4,f,c
  3545  0014D8  3618               	rlcf	??_UART_Init+5,f,c
  3546  0014DA  3619               	rlcf	??_UART_Init+6,f,c
  3547  0014DC  361A               	rlcf	??_UART_Init+7,f,c
  3548  0014DE  2EE8               	decfsz	wreg,f,c
  3549  0014E0  D7F9               	goto	u3215
  3550  0014E2  C017  F005         	movff	??_UART_Init+4,___aldiv@divisor
  3551  0014E6  C018  F006         	movff	??_UART_Init+5,___aldiv@divisor+1
  3552  0014EA  C019  F007         	movff	??_UART_Init+6,___aldiv@divisor+2
  3553  0014EE  C01A  F008         	movff	??_UART_Init+7,___aldiv@divisor+3
  3554  0014F2  EC17  F00E         	call	___aldiv	;wreg free
  3555  0014F6  C001  F01B         	movff	?___aldiv,UART_Init@x
  3556  0014FA  C002  F01C         	movff	?___aldiv+1,UART_Init@x+1
  3557                           
  3558                           ;uart.h: 9: BRGH = 1;
  3559  0014FE  84AC               	bsf	4012,2,c	;volatile
  3560  001500                     l106:
  3561                           
  3562                           ;uart.h: 10: }
  3563                           ;uart.h: 11: if(x<256)
  3564  001500  041C               	decf	UART_Init@x+1,w,c
  3565  001502  B0D8               	btfsc	status,0,c
  3566  001504  0012               	return	
  3567                           
  3568                           ;uart.h: 12: {
  3569                           ;uart.h: 13: SPBRG = x;
  3570  001506  C01B  FFAF         	movff	UART_Init@x,4015	;volatile
  3571                           
  3572                           ;uart.h: 14: SYNC = 0;
  3573  00150A  98AC               	bcf	4012,4,c	;volatile
  3574                           
  3575                           ;uart.h: 15: SPEN = 1;
  3576  00150C  8EAB               	bsf	4011,7,c	;volatile
  3577                           
  3578                           ;uart.h: 16: TRISC7 = 1;
  3579  00150E  8E94               	bsf	3988,7,c	;volatile
  3580                           
  3581                           ;uart.h: 17: TRISC6 = 1;
  3582  001510  8C94               	bsf	3988,6,c	;volatile
  3583                           
  3584                           ;uart.h: 18: CREN = 1;
  3585  001512  88AB               	bsf	4011,4,c	;volatile
  3586                           
  3587                           ;uart.h: 19: TXEN = 1;
  3588  001514  8AAC               	bsf	4012,5,c	;volatile
  3589                           
  3590                           ;uart.h: 20: return 1;
  3591                           ;	Return value of _UART_Init is never used
  3592  001516  0012               	return	
  3593  001518                     __end_of_UART_Init:
  3594                           	opt stack 0
  3595                           tblptru	equ	0xFF8
  3596                           tblptrh	equ	0xFF7
  3597                           tblptrl	equ	0xFF6
  3598                           tablat	equ	0xFF5
  3599                           prodl	equ	0xFF3
  3600                           intcon	equ	0xFF2
  3601                           postinc0	equ	0xFEE
  3602                           wreg	equ	0xFE8
  3603                           postdec1	equ	0xFE5
  3604                           fsr1h	equ	0xFE2
  3605                           fsr1l	equ	0xFE1
  3606                           indf2	equ	0xFDF
  3607                           postinc2	equ	0xFDE
  3608                           postdec2	equ	0xFDD
  3609                           fsr2h	equ	0xFDA
  3610                           fsr2l	equ	0xFD9
  3611                           status	equ	0xFD8
  3612                           
  3613 ;; *************** function ___aldiv *****************
  3614 ;; Defined at:
  3615 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;  dividend        4    0[COMRAM] long 
  3618 ;;  divisor         4    4[COMRAM] long 
  3619 ;; Auto vars:     Size  Location     Type
  3620 ;;  quotient        4   10[COMRAM] long 
  3621 ;;  sign            1    9[COMRAM] unsigned char 
  3622 ;;  counter         1    8[COMRAM] unsigned char 
  3623 ;; Return value:  Size  Location     Type
  3624 ;;                  4    0[COMRAM] long 
  3625 ;; Registers used:
  3626 ;;		wreg, status,2, status,0
  3627 ;; Tracked objects:
  3628 ;;		On entry : 0/0
  3629 ;;		On exit  : 0/0
  3630 ;;		Unchanged: 0/0
  3631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3632 ;;      Params:         8       0       0       0       0       0       0
  3633 ;;      Locals:         6       0       0       0       0       0       0
  3634 ;;      Temps:          0       0       0       0       0       0       0
  3635 ;;      Totals:        14       0       0       0       0       0       0
  3636 ;;Total ram usage:       14 bytes
  3637 ;; Hardware stack levels used:    1
  3638 ;; This function calls:
  3639 ;;		Nothing
  3640 ;; This function is called by:
  3641 ;;		_UART_Init
  3642 ;; This function uses a non-reentrant model
  3643 ;;
  3644                           
  3645                           	psect	text18
  3646  001C2E                     __ptext18:
  3647                           	opt stack 0
  3648  001C2E                     ___aldiv:
  3649                           	opt stack 29
  3650                           
  3651                           ;incstack = 0
  3652  001C2E  0E00               	movlw	0
  3653  001C30  6E0A               	movwf	___aldiv@sign,c
  3654  001C32  AE08               	btfss	___aldiv@divisor+3,7,c
  3655  001C34  D00A               	goto	l289
  3656  001C36  1E08               	comf	___aldiv@divisor+3,f,c
  3657  001C38  1E07               	comf	___aldiv@divisor+2,f,c
  3658  001C3A  1E06               	comf	___aldiv@divisor+1,f,c
  3659  001C3C  6C05               	negf	___aldiv@divisor,c
  3660  001C3E  0E00               	movlw	0
  3661  001C40  2206               	addwfc	___aldiv@divisor+1,f,c
  3662  001C42  2207               	addwfc	___aldiv@divisor+2,f,c
  3663  001C44  2208               	addwfc	___aldiv@divisor+3,f,c
  3664  001C46  0E01               	movlw	1
  3665  001C48  6E0A               	movwf	___aldiv@sign,c
  3666  001C4A                     l289:
  3667  001C4A  AE04               	btfss	___aldiv@dividend+3,7,c
  3668  001C4C  D00A               	goto	l290
  3669  001C4E  1E04               	comf	___aldiv@dividend+3,f,c
  3670  001C50  1E03               	comf	___aldiv@dividend+2,f,c
  3671  001C52  1E02               	comf	___aldiv@dividend+1,f,c
  3672  001C54  6C01               	negf	___aldiv@dividend,c
  3673  001C56  0E00               	movlw	0
  3674  001C58  2202               	addwfc	___aldiv@dividend+1,f,c
  3675  001C5A  2203               	addwfc	___aldiv@dividend+2,f,c
  3676  001C5C  2204               	addwfc	___aldiv@dividend+3,f,c
  3677  001C5E  0E01               	movlw	1
  3678  001C60  1A0A               	xorwf	___aldiv@sign,f,c
  3679  001C62                     l290:
  3680  001C62  0E00               	movlw	0
  3681  001C64  6E0B               	movwf	___aldiv@quotient,c
  3682  001C66  0E00               	movlw	0
  3683  001C68  6E0C               	movwf	___aldiv@quotient+1,c
  3684  001C6A  0E00               	movlw	0
  3685  001C6C  6E0D               	movwf	___aldiv@quotient+2,c
  3686  001C6E  0E00               	movlw	0
  3687  001C70  6E0E               	movwf	___aldiv@quotient+3,c
  3688  001C72  5005               	movf	___aldiv@divisor,w,c
  3689  001C74  1006               	iorwf	___aldiv@divisor+1,w,c
  3690  001C76  1007               	iorwf	___aldiv@divisor+2,w,c
  3691  001C78  1008               	iorwf	___aldiv@divisor+3,w,c
  3692  001C7A  B4D8               	btfsc	status,2,c
  3693  001C7C  D02A               	goto	l297
  3694  001C7E  0E01               	movlw	1
  3695  001C80  6E09               	movwf	___aldiv@counter,c
  3696  001C82  D006               	goto	l292
  3697  001C84  90D8               	bcf	status,0,c
  3698  001C86  3605               	rlcf	___aldiv@divisor,f,c
  3699  001C88  3606               	rlcf	___aldiv@divisor+1,f,c
  3700  001C8A  3607               	rlcf	___aldiv@divisor+2,f,c
  3701  001C8C  3608               	rlcf	___aldiv@divisor+3,f,c
  3702  001C8E  2A09               	incf	___aldiv@counter,f,c
  3703  001C90                     l292:
  3704  001C90  AE08               	btfss	___aldiv@divisor+3,7,c
  3705  001C92  D7F8               	goto	l293
  3706  001C94                     u3130:
  3707  001C94  90D8               	bcf	status,0,c
  3708  001C96  360B               	rlcf	___aldiv@quotient,f,c
  3709  001C98  360C               	rlcf	___aldiv@quotient+1,f,c
  3710  001C9A  360D               	rlcf	___aldiv@quotient+2,f,c
  3711  001C9C  360E               	rlcf	___aldiv@quotient+3,f,c
  3712  001C9E  5005               	movf	___aldiv@divisor,w,c
  3713  001CA0  5C01               	subwf	___aldiv@dividend,w,c
  3714  001CA2  5006               	movf	___aldiv@divisor+1,w,c
  3715  001CA4  5802               	subwfb	___aldiv@dividend+1,w,c
  3716  001CA6  5007               	movf	___aldiv@divisor+2,w,c
  3717  001CA8  5803               	subwfb	___aldiv@dividend+2,w,c
  3718  001CAA  5008               	movf	___aldiv@divisor+3,w,c
  3719  001CAC  5804               	subwfb	___aldiv@dividend+3,w,c
  3720  001CAE  A0D8               	btfss	status,0,c
  3721  001CB0  D009               	goto	l296
  3722  001CB2  5005               	movf	___aldiv@divisor,w,c
  3723  001CB4  5E01               	subwf	___aldiv@dividend,f,c
  3724  001CB6  5006               	movf	___aldiv@divisor+1,w,c
  3725  001CB8  5A02               	subwfb	___aldiv@dividend+1,f,c
  3726  001CBA  5007               	movf	___aldiv@divisor+2,w,c
  3727  001CBC  5A03               	subwfb	___aldiv@dividend+2,f,c
  3728  001CBE  5008               	movf	___aldiv@divisor+3,w,c
  3729  001CC0  5A04               	subwfb	___aldiv@dividend+3,f,c
  3730  001CC2  800B               	bsf	___aldiv@quotient,0,c
  3731  001CC4                     l296:
  3732  001CC4  90D8               	bcf	status,0,c
  3733  001CC6  3208               	rrcf	___aldiv@divisor+3,f,c
  3734  001CC8  3207               	rrcf	___aldiv@divisor+2,f,c
  3735  001CCA  3206               	rrcf	___aldiv@divisor+1,f,c
  3736  001CCC  3205               	rrcf	___aldiv@divisor,f,c
  3737  001CCE  2E09               	decfsz	___aldiv@counter,f,c
  3738  001CD0  D7E1               	goto	u3130
  3739  001CD2                     l297:
  3740  001CD2  500A               	movf	___aldiv@sign,w,c
  3741  001CD4  B4D8               	btfsc	status,2,c
  3742  001CD6  D008               	goto	l298
  3743  001CD8  1E0E               	comf	___aldiv@quotient+3,f,c
  3744  001CDA  1E0D               	comf	___aldiv@quotient+2,f,c
  3745  001CDC  1E0C               	comf	___aldiv@quotient+1,f,c
  3746  001CDE  6C0B               	negf	___aldiv@quotient,c
  3747  001CE0  0E00               	movlw	0
  3748  001CE2  220C               	addwfc	___aldiv@quotient+1,f,c
  3749  001CE4  220D               	addwfc	___aldiv@quotient+2,f,c
  3750  001CE6  220E               	addwfc	___aldiv@quotient+3,f,c
  3751  001CE8                     l298:
  3752  001CE8  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  3753  001CEC  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  3754  001CF0  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  3755  001CF4  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  3756  001CF8  0012               	return	
  3757  001CFA                     __end_of___aldiv:
  3758                           	opt stack 0
  3759                           tblptru	equ	0xFF8
  3760                           tblptrh	equ	0xFF7
  3761                           tblptrl	equ	0xFF6
  3762                           tablat	equ	0xFF5
  3763                           prodl	equ	0xFF3
  3764                           intcon	equ	0xFF2
  3765                           postinc0	equ	0xFEE
  3766                           wreg	equ	0xFE8
  3767                           postdec1	equ	0xFE5
  3768                           fsr1h	equ	0xFE2
  3769                           fsr1l	equ	0xFE1
  3770                           indf2	equ	0xFDF
  3771                           postinc2	equ	0xFDE
  3772                           postdec2	equ	0xFDD
  3773                           fsr2h	equ	0xFDA
  3774                           fsr2l	equ	0xFD9
  3775                           status	equ	0xFD8
  3776                           
  3777 ;; *************** function _Lcd_Write_Float *****************
  3778 ;; Defined at:
  3779 ;;		line 180 in file "lcd.h"
  3780 ;; Parameters:    Size  Location     Type
  3781 ;;  f               3   71[COMRAM] float 
  3782 ;; Auto vars:     Size  Location     Type
  3783 ;;  buf11           2   76[COMRAM] PTR unsigned char 
  3784 ;;		 -> ftoa@buf(17), 
  3785 ;;  status          2   74[COMRAM] int 
  3786 ;; Return value:  Size  Location     Type
  3787 ;;                  1    wreg      void 
  3788 ;; Registers used:
  3789 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3790 ;; Tracked objects:
  3791 ;;		On entry : 0/0
  3792 ;;		On exit  : 0/0
  3793 ;;		Unchanged: 0/0
  3794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3795 ;;      Params:         3       0       0       0       0       0       0
  3796 ;;      Locals:         4       0       0       0       0       0       0
  3797 ;;      Temps:          0       0       0       0       0       0       0
  3798 ;;      Totals:         7       0       0       0       0       0       0
  3799 ;;Total ram usage:        7 bytes
  3800 ;; Hardware stack levels used:    1
  3801 ;; Hardware stack levels required when called:    4
  3802 ;; This function calls:
  3803 ;;		_LCD_String
  3804 ;;		_ftoa
  3805 ;; This function is called by:
  3806 ;;		_main
  3807 ;; This function uses a non-reentrant model
  3808 ;;
  3809                           
  3810                           	psect	text19
  3811  002306                     __ptext19:
  3812                           	opt stack 0
  3813  002306                     _Lcd_Write_Float:
  3814                           	opt stack 26
  3815                           
  3816                           ;lcd.h: 182: char* buf11;
  3817                           ;lcd.h: 183: int status;
  3818                           ;lcd.h: 184: buf11 = ftoa(f, &status);
  3819                           
  3820                           ;incstack = 0
  3821  002306  C048  F039         	movff	Lcd_Write_Float@f,ftoa@f
  3822  00230A  C049  F03A         	movff	Lcd_Write_Float@f+1,ftoa@f+1
  3823  00230E  C04A  F03B         	movff	Lcd_Write_Float@f+2,ftoa@f+2
  3824  002312  0E4B               	movlw	low Lcd_Write_Float@status
  3825  002314  6E3C               	movwf	ftoa@status,c
  3826  002316  0E00               	movlw	high Lcd_Write_Float@status
  3827  002318  6E3D               	movwf	ftoa@status+1,c
  3828  00231A  ECAC  F00B         	call	_ftoa	;wreg free
  3829  00231E  C039  F04D         	movff	?_ftoa,Lcd_Write_Float@buf11
  3830  002322  C03A  F04E         	movff	?_ftoa+1,Lcd_Write_Float@buf11+1
  3831                           
  3832                           ;lcd.h: 185: LCD_String(buf11);
  3833  002326  C04D  F004         	movff	Lcd_Write_Float@buf11,LCD_String@str
  3834  00232A  C04E  F005         	movff	Lcd_Write_Float@buf11+1,LCD_String@str+1
  3835  00232E  ECE8  F011         	call	_LCD_String	;wreg free
  3836  002332  0012               	return		;funcret
  3837  002334                     __end_of_Lcd_Write_Float:
  3838                           	opt stack 0
  3839                           tblptru	equ	0xFF8
  3840                           tblptrh	equ	0xFF7
  3841                           tblptrl	equ	0xFF6
  3842                           tablat	equ	0xFF5
  3843                           prodl	equ	0xFF3
  3844                           intcon	equ	0xFF2
  3845                           postinc0	equ	0xFEE
  3846                           wreg	equ	0xFE8
  3847                           postdec1	equ	0xFE5
  3848                           fsr1h	equ	0xFE2
  3849                           fsr1l	equ	0xFE1
  3850                           indf2	equ	0xFDF
  3851                           postinc2	equ	0xFDE
  3852                           postdec2	equ	0xFDD
  3853                           fsr2h	equ	0xFDA
  3854                           fsr2l	equ	0xFD9
  3855                           status	equ	0xFD8
  3856                           
  3857 ;; *************** function _ftoa *****************
  3858 ;; Defined at:
  3859 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftoa.c"
  3860 ;; Parameters:    Size  Location     Type
  3861 ;;  f               3   56[COMRAM] float 
  3862 ;;  status          2   59[COMRAM] PTR int 
  3863 ;;		 -> Lcd_Write_Float@status(2), 
  3864 ;; Auto vars:     Size  Location     Type
  3865 ;;  l               4   65[COMRAM] unsigned long 
  3866 ;;  rem             4   61[COMRAM] unsigned long 
  3867 ;;  cp              2   69[COMRAM] PTR unsigned char 
  3868 ;;		 -> ftoa@buf(17), 
  3869 ;; Return value:  Size  Location     Type
  3870 ;;                  2   56[COMRAM] PTR unsigned char 
  3871 ;; Registers used:
  3872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3873 ;; Tracked objects:
  3874 ;;		On entry : 0/0
  3875 ;;		On exit  : 0/0
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3878 ;;      Params:         5       0       0       0       0       0       0
  3879 ;;      Locals:        10       0       0       0       0       0       0
  3880 ;;      Temps:          0       0       0       0       0       0       0
  3881 ;;      Totals:        15       0       0       0       0       0       0
  3882 ;;Total ram usage:       15 bytes
  3883 ;; Hardware stack levels used:    1
  3884 ;; Hardware stack levels required when called:    3
  3885 ;; This function calls:
  3886 ;;		___ftmul
  3887 ;;		___ftneg
  3888 ;;		___ftsub
  3889 ;;		___fttol
  3890 ;;		___lltoft
  3891 ;;		_sprintf
  3892 ;; This function is called by:
  3893 ;;		_Lcd_Write_Float
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           	psect	text20
  3898  001758                     __ptext20:
  3899                           	opt stack 0
  3900  001758                     _ftoa:
  3901                           	opt stack 26
  3902                           
  3903                           ;incstack = 0
  3904  001758  0E60               	movlw	low ftoa@buf
  3905  00175A  6E46               	movwf	ftoa@cp,c
  3906  00175C  0E00               	movlw	high ftoa@buf
  3907  00175E  6E47               	movwf	ftoa@cp+1,c
  3908  001760  AE3B               	btfss	ftoa@f+2,7,c
  3909  001762  D016               	goto	l607
  3910  001764  C046  FFD9         	movff	ftoa@cp,fsr2l
  3911  001768  C047  FFDA         	movff	ftoa@cp+1,fsr2h
  3912  00176C  0E2D               	movlw	45
  3913  00176E  6EDF               	movwf	indf2,c
  3914  001770  4A46               	infsnz	ftoa@cp,f,c
  3915  001772  2A47               	incf	ftoa@cp+1,f,c
  3916  001774  C039  F001         	movff	ftoa@f,___ftneg@f1
  3917  001778  C03A  F002         	movff	ftoa@f+1,___ftneg@f1+1
  3918  00177C  C03B  F003         	movff	ftoa@f+2,___ftneg@f1+2
  3919  001780  ECD6  F011         	call	___ftneg	;wreg free
  3920  001784  C001  F039         	movff	?___ftneg,ftoa@f
  3921  001788  C002  F03A         	movff	?___ftneg+1,ftoa@f+1
  3922  00178C  C003  F03B         	movff	?___ftneg+2,ftoa@f+2
  3923  001790                     l607:
  3924  001790  C039  F018         	movff	ftoa@f,___fttol@f1
  3925  001794  C03A  F019         	movff	ftoa@f+1,___fttol@f1+1
  3926  001798  C03B  F01A         	movff	ftoa@f+2,___fttol@f1+2
  3927  00179C  ECB0  F00C         	call	___fttol	;wreg free
  3928  0017A0  C018  F042         	movff	?___fttol,ftoa@l
  3929  0017A4  C019  F043         	movff	?___fttol+1,ftoa@l+1
  3930  0017A8  C01A  F044         	movff	?___fttol+2,ftoa@l+2
  3931  0017AC  C01B  F045         	movff	?___fttol+3,ftoa@l+3
  3932  0017B0  C039  F033         	movff	ftoa@f,___ftsub@f1
  3933  0017B4  C03A  F034         	movff	ftoa@f+1,___ftsub@f1+1
  3934  0017B8  C03B  F035         	movff	ftoa@f+2,___ftsub@f1+2
  3935  0017BC  C042  F009         	movff	ftoa@l,___lltoft@c
  3936  0017C0  C043  F00A         	movff	ftoa@l+1,___lltoft@c+1
  3937  0017C4  C044  F00B         	movff	ftoa@l+2,___lltoft@c+2
  3938  0017C8  C045  F00C         	movff	ftoa@l+3,___lltoft@c+3
  3939  0017CC  EC83  F010         	call	___lltoft	;wreg free
  3940  0017D0  C009  F036         	movff	?___lltoft,___ftsub@f2
  3941  0017D4  C00A  F037         	movff	?___lltoft+1,___ftsub@f2+1
  3942  0017D8  C00B  F038         	movff	?___lltoft+2,___ftsub@f2+2
  3943  0017DC  EC29  F011         	call	___ftsub	;wreg free
  3944  0017E0  C033  F039         	movff	?___ftsub,ftoa@f
  3945  0017E4  C034  F03A         	movff	?___ftsub+1,ftoa@f+1
  3946  0017E8  C035  F03B         	movff	?___ftsub+2,ftoa@f+2
  3947  0017EC  0E24               	movlw	36
  3948  0017EE  6E0C               	movwf	___ftmul@f2,c
  3949  0017F0  0E74               	movlw	116
  3950  0017F2  6E0D               	movwf	___ftmul@f2+1,c
  3951  0017F4  0E49               	movlw	73
  3952  0017F6  6E0E               	movwf	___ftmul@f2+2,c
  3953  0017F8  C039  F009         	movff	ftoa@f,___ftmul@f1
  3954  0017FC  C03A  F00A         	movff	ftoa@f+1,___ftmul@f1+1
  3955  001800  C03B  F00B         	movff	ftoa@f+2,___ftmul@f1+2
  3956  001804  EC2A  F00D         	call	___ftmul	;wreg free
  3957  001808  C009  F018         	movff	?___ftmul,___fttol@f1
  3958  00180C  C00A  F019         	movff	?___ftmul+1,___fttol@f1+1
  3959  001810  C00B  F01A         	movff	?___ftmul+2,___fttol@f1+2
  3960  001814  ECB0  F00C         	call	___fttol	;wreg free
  3961  001818  C018  F03E         	movff	?___fttol,ftoa@rem
  3962  00181C  C019  F03F         	movff	?___fttol+1,ftoa@rem+1
  3963  001820  C01A  F040         	movff	?___fttol+2,ftoa@rem+2
  3964  001824  C01B  F041         	movff	?___fttol+3,ftoa@rem+3
  3965  001828  C046  F017         	movff	ftoa@cp,sprintf@sp
  3966  00182C  C047  F018         	movff	ftoa@cp+1,sprintf@sp+1
  3967  001830  0E5C               	movlw	low STR_12
  3968  001832  6E19               	movwf	sprintf@f,c
  3969  001834  0E06               	movlw	high STR_12
  3970  001836  6E1A               	movwf	sprintf@f+1,c
  3971  001838  C042  F01B         	movff	ftoa@l,?_sprintf+4
  3972  00183C  C043  F01C         	movff	ftoa@l+1,?_sprintf+5
  3973  001840  C044  F01D         	movff	ftoa@l+2,?_sprintf+6
  3974  001844  C045  F01E         	movff	ftoa@l+3,?_sprintf+7
  3975  001848  C03E  F01F         	movff	ftoa@rem,?_sprintf+8
  3976  00184C  C03F  F020         	movff	ftoa@rem+1,?_sprintf+9
  3977  001850  C040  F021         	movff	ftoa@rem+2,?_sprintf+10
  3978  001854  C041  F022         	movff	ftoa@rem+3,?_sprintf+11
  3979  001858  ECEC  F006         	call	_sprintf	;wreg free
  3980  00185C  0E60               	movlw	low ftoa@buf
  3981  00185E  6E39               	movwf	?_ftoa,c
  3982  001860  0E00               	movlw	high ftoa@buf
  3983  001862  6E3A               	movwf	?_ftoa+1,c
  3984  001864  0012               	return	
  3985  001866                     __end_of_ftoa:
  3986                           	opt stack 0
  3987                           tblptru	equ	0xFF8
  3988                           tblptrh	equ	0xFF7
  3989                           tblptrl	equ	0xFF6
  3990                           tablat	equ	0xFF5
  3991                           prodl	equ	0xFF3
  3992                           intcon	equ	0xFF2
  3993                           postinc0	equ	0xFEE
  3994                           wreg	equ	0xFE8
  3995                           postdec1	equ	0xFE5
  3996                           fsr1h	equ	0xFE2
  3997                           fsr1l	equ	0xFE1
  3998                           indf2	equ	0xFDF
  3999                           postinc2	equ	0xFDE
  4000                           postdec2	equ	0xFDD
  4001                           fsr2h	equ	0xFDA
  4002                           fsr2l	equ	0xFD9
  4003                           status	equ	0xFD8
  4004                           
  4005 ;; *************** function _sprintf *****************
  4006 ;; Defined at:
  4007 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4008 ;; Parameters:    Size  Location     Type
  4009 ;;  sp              2   22[COMRAM] PTR unsigned char 
  4010 ;;		 -> ftoa@buf(17), 
  4011 ;;  f               2   24[COMRAM] PTR const unsigned char 
  4012 ;;		 -> STR_12(11), 
  4013 ;; Auto vars:     Size  Location     Type
  4014 ;;  val             4   41[COMRAM] unsigned long 
  4015 ;;  tmpval          4    0        struct .
  4016 ;;  cp              3    0        PTR const unsigned char 
  4017 ;;  prec            2   47[COMRAM] int 
  4018 ;;  width           2   45[COMRAM] int 
  4019 ;;  ap              2   39[COMRAM] PTR void [1]
  4020 ;;		 -> ?_sprintf(2), 
  4021 ;;  len             2    0        unsigned int 
  4022 ;;  c               1   49[COMRAM] char 
  4023 ;;  flag            1   38[COMRAM] unsigned char 
  4024 ;; Return value:  Size  Location     Type
  4025 ;;                  2   22[COMRAM] int 
  4026 ;; Registers used:
  4027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4028 ;; Tracked objects:
  4029 ;;		On entry : 0/0
  4030 ;;		On exit  : 0/0
  4031 ;;		Unchanged: 0/0
  4032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4033 ;;      Params:        12       0       0       0       0       0       0
  4034 ;;      Locals:        12       0       0       0       0       0       0
  4035 ;;      Temps:          4       0       0       0       0       0       0
  4036 ;;      Totals:        28       0       0       0       0       0       0
  4037 ;;Total ram usage:       28 bytes
  4038 ;; Hardware stack levels used:    1
  4039 ;; Hardware stack levels required when called:    1
  4040 ;; This function calls:
  4041 ;;		___lldiv
  4042 ;;		___llmod
  4043 ;;		___wmul
  4044 ;;		_isdigit
  4045 ;; This function is called by:
  4046 ;;		_ftoa
  4047 ;; This function uses a non-reentrant model
  4048 ;;
  4049                           
  4050                           	psect	text21
  4051  000DD8                     __ptext21:
  4052                           	opt stack 0
  4053  000DD8                     _sprintf:
  4054                           	opt stack 27
  4055                           
  4056                           ;doprnt.c: 494: va_list ap;
  4057                           ;doprnt.c: 499: signed char c;
  4058                           ;doprnt.c: 501: int width;
  4059                           ;doprnt.c: 504: int prec;
  4060                           ;doprnt.c: 508: unsigned char flag;
  4061                           ;doprnt.c: 523: union {
  4062                           ;doprnt.c: 524: unsigned long vd;
  4063                           ;doprnt.c: 525: double integ;
  4064                           ;doprnt.c: 526: } tmpval;
  4065                           ;doprnt.c: 528: unsigned long val;
  4066                           ;doprnt.c: 529: unsigned len;
  4067                           ;doprnt.c: 530: const char * cp;
  4068                           ;doprnt.c: 533: *ap = __va_start();
  4069                           
  4070                           ;incstack = 0
  4071  000DD8  0E1B               	movlw	low (?_sprintf+4)
  4072  000DDA  6E28               	movwf	sprintf@ap,c
  4073  000DDC  0E00               	movlw	high (?_sprintf+4)
  4074  000DDE  6E29               	movwf	sprintf@ap+1,c
  4075                           
  4076                           ;doprnt.c: 536: while(c = *f++) {
  4077  000DE0  D17E               	goto	u2520
  4078  000DE2                     
  4079                           ;doprnt.c: 538: if(c != '%')
  4080  000DE2  0E25               	movlw	37
  4081  000DE4  1832               	xorwf	sprintf@c,w,c
  4082  000DE6  B4D8               	btfsc	status,2,c
  4083  000DE8  D009               	goto	l198
  4084                           
  4085                           ;doprnt.c: 540: {
  4086                           ;doprnt.c: 541: ((*sp++ = (c)));
  4087  000DEA  C017  FFD9         	movff	sprintf@sp,fsr2l
  4088  000DEE  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  4089  000DF2  C032  FFDF         	movff	sprintf@c,indf2
  4090  000DF6  4A17               	infsnz	sprintf@sp,f,c
  4091  000DF8  2A18               	incf	sprintf@sp+1,f,c
  4092                           
  4093                           ;doprnt.c: 542: continue;
  4094  000DFA  D171               	goto	u2520
  4095  000DFC                     l198:
  4096                           
  4097                           ;doprnt.c: 543: }
  4098                           ;doprnt.c: 546: width = 0;
  4099  000DFC  0E00               	movlw	0
  4100  000DFE  6E2F               	movwf	sprintf@width+1,c
  4101  000E00  0E00               	movlw	0
  4102  000E02  6E2E               	movwf	sprintf@width,c
  4103                           
  4104                           ;doprnt.c: 548: flag = 0;
  4105  000E04  0E00               	movlw	0
  4106  000E06  6E27               	movwf	sprintf@flag,c
  4107                           
  4108                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4109  000E08  C019  FFF6         	movff	sprintf@f,tblptrl
  4110  000E0C  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  4111  000E10                     	if	0	;tblptru may be non-zero
  4112  000E10                     	endif
  4113  000E10                     	if	0	;tblptru may be non-zero
  4114  000E10                     	endif
  4115  000E10  0008               	tblrd		*
  4116  000E12  50F5               	movf	tablat,w,c
  4117  000E14  EC0B  F012         	call	_isdigit
  4118  000E18  A0D8               	btfss	status,0,c
  4119  000E1A  D032               	goto	u2380
  4120                           
  4121                           ;doprnt.c: 598: width = 0;
  4122  000E1C  0E00               	movlw	0
  4123  000E1E  6E2F               	movwf	sprintf@width+1,c
  4124  000E20  0E00               	movlw	0
  4125  000E22  6E2E               	movwf	sprintf@width,c
  4126  000E24                     
  4127                           ;doprnt.c: 600: width *= 10;
  4128  000E24  C02E  F001         	movff	sprintf@width,___wmul@multiplier
  4129  000E28  C02F  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  4130  000E2C  0E00               	movlw	0
  4131  000E2E  6E04               	movwf	___wmul@multiplicand+1,c
  4132  000E30  0E0A               	movlw	10
  4133  000E32  6E03               	movwf	___wmul@multiplicand,c
  4134  000E34  ECC3  F011         	call	___wmul	;wreg free
  4135  000E38  C001  F02E         	movff	?___wmul,sprintf@width
  4136  000E3C  C002  F02F         	movff	?___wmul+1,sprintf@width+1
  4137                           
  4138                           ;doprnt.c: 601: width += *f++ - '0';
  4139  000E40  0ED0               	movlw	208
  4140  000E42  6E23               	movwf	??_sprintf& (0+255),c
  4141  000E44  0EFF               	movlw	255
  4142  000E46  6E24               	movwf	(??_sprintf+1)& (0+255),c
  4143  000E48  C019  FFF6         	movff	sprintf@f,tblptrl
  4144  000E4C  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  4145  000E50                     	if	0	;tblptru may be non-zero
  4146  000E50                     	endif
  4147  000E50                     	if	0	;tblptru may be non-zero
  4148  000E50                     	endif
  4149  000E50  0008               	tblrd		*
  4150  000E52  50F5               	movf	tablat,w,c
  4151  000E54  6E25               	movwf	(??_sprintf+2)& (0+255),c
  4152  000E56  6A26               	clrf	(??_sprintf+3)& (0+255),c
  4153  000E58  5023               	movf	??_sprintf,w,c
  4154  000E5A  2625               	addwf	??_sprintf+2,f,c
  4155  000E5C  5024               	movf	??_sprintf+1,w,c
  4156  000E5E  2226               	addwfc	??_sprintf+3,f,c
  4157  000E60  5025               	movf	??_sprintf+2,w,c
  4158  000E62  262E               	addwf	sprintf@width,f,c
  4159  000E64  5026               	movf	??_sprintf+3,w,c
  4160  000E66  222F               	addwfc	sprintf@width+1,f,c
  4161  000E68  4A19               	infsnz	sprintf@f,f,c
  4162  000E6A  2A1A               	incf	sprintf@f+1,f,c
  4163                           
  4164                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4165  000E6C  C019  FFF6         	movff	sprintf@f,tblptrl
  4166  000E70  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  4167  000E74                     	if	0	;tblptru may be non-zero
  4168  000E74                     	endif
  4169  000E74                     	if	0	;tblptru may be non-zero
  4170  000E74                     	endif
  4171  000E74  0008               	tblrd		*
  4172  000E76  50F5               	movf	tablat,w,c
  4173  000E78  EC0B  F012         	call	_isdigit
  4174  000E7C  B0D8               	btfsc	status,0,c
  4175  000E7E  D7D2               	goto	l200
  4176  000E80                     u2380:
  4177                           
  4178                           ;doprnt.c: 608: }
  4179                           ;doprnt.c: 611: if(*f == '.') {
  4180  000E80  C019  FFF6         	movff	sprintf@f,tblptrl
  4181  000E84  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  4182  000E88                     	if	0	;tblptru may be non-zero
  4183  000E88                     	endif
  4184  000E88                     	if	0	;tblptru may be non-zero
  4185  000E88                     	endif
  4186  000E88  0008               	tblrd		*
  4187  000E8A  50F5               	movf	tablat,w,c
  4188  000E8C  0A2E               	xorlw	46
  4189  000E8E  A4D8               	btfss	status,2,c
  4190  000E90  D02D               	goto	l202
  4191                           
  4192                           ;doprnt.c: 613: f++;
  4193  000E92  4A19               	infsnz	sprintf@f,f,c
  4194  000E94  2A1A               	incf	sprintf@f+1,f,c
  4195                           
  4196                           ;doprnt.c: 620: {
  4197                           ;doprnt.c: 621: prec = 0;
  4198  000E96  0E00               	movlw	0
  4199  000E98  6E31               	movwf	sprintf@prec+1,c
  4200  000E9A  0E00               	movlw	0
  4201  000E9C  6E30               	movwf	sprintf@prec,c
  4202                           
  4203                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  4204  000E9E  D01B               	goto	l203
  4205  000EA0                     
  4206                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  4207  000EA0  C030  F001         	movff	sprintf@prec,___wmul@multiplier
  4208  000EA4  C031  F002         	movff	sprintf@prec+1,___wmul@multiplier+1
  4209  000EA8  0E00               	movlw	0
  4210  000EAA  6E04               	movwf	___wmul@multiplicand+1,c
  4211  000EAC  0E0A               	movlw	10
  4212  000EAE  6E03               	movwf	___wmul@multiplicand,c
  4213  000EB0  ECC3  F011         	call	___wmul	;wreg free
  4214  000EB4  C019  FFF6         	movff	sprintf@f,tblptrl
  4215  000EB8  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  4216  000EBC                     	if	0	;tblptru may be non-zero
  4217  000EBC                     	endif
  4218  000EBC                     	if	0	;tblptru may be non-zero
  4219  000EBC                     	endif
  4220  000EBC  0008               	tblrd		*
  4221  000EBE  50F5               	movf	tablat,w,c
  4222  000EC0  2601               	addwf	?___wmul,f,c
  4223  000EC2  0E00               	movlw	0
  4224  000EC4  2202               	addwfc	?___wmul+1,f,c
  4225  000EC6  0ED0               	movlw	208
  4226  000EC8  2401               	addwf	?___wmul,w,c
  4227  000ECA  6E30               	movwf	sprintf@prec,c
  4228  000ECC  0EFF               	movlw	255
  4229  000ECE  2002               	addwfc	?___wmul+1,w,c
  4230  000ED0  6E31               	movwf	sprintf@prec+1,c
  4231  000ED2  4A19               	infsnz	sprintf@f,f,c
  4232  000ED4  2A1A               	incf	sprintf@f+1,f,c
  4233  000ED6                     l203:
  4234  000ED6  C019  FFF6         	movff	sprintf@f,tblptrl
  4235  000EDA  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  4236  000EDE                     	if	0	;tblptru may be non-zero
  4237  000EDE                     	endif
  4238  000EDE                     	if	0	;tblptru may be non-zero
  4239  000EDE                     	endif
  4240  000EDE  0008               	tblrd		*
  4241  000EE0  50F5               	movf	tablat,w,c
  4242  000EE2  EC0B  F012         	call	_isdigit
  4243  000EE6  A0D8               	btfss	status,0,c
  4244  000EE8  D00B               	goto	l208
  4245  000EEA  D7DA               	goto	l204
  4246  000EEC                     l202:
  4247                           
  4248                           ;doprnt.c: 626: prec = 0;
  4249  000EEC  0E00               	movlw	0
  4250  000EEE  6E31               	movwf	sprintf@prec+1,c
  4251  000EF0  0E00               	movlw	0
  4252  000EF2  6E30               	movwf	sprintf@prec,c
  4253                           
  4254                           ;doprnt.c: 635: switch(c = *f++) {
  4255                           
  4256                           ;doprnt.c: 630: }
  4257                           ;doprnt.c: 633: loop:
  4258  000EF4  D005               	goto	l208
  4259  000EF6                     
  4260                           ;doprnt.c: 643: flag |= 0x10;
  4261  000EF6  8827               	bsf	sprintf@flag,4,c
  4262                           
  4263                           ;doprnt.c: 644: goto loop;
  4264  000EF8  D003               	goto	l208
  4265  000EFA                     
  4266                           ;doprnt.c: 818: flag |= 0xC0;
  4267  000EFA  0EC0               	movlw	192
  4268  000EFC  1227               	iorwf	sprintf@flag,f,c
  4269                           
  4270                           ;doprnt.c: 822: }
  4271                           
  4272                           ;doprnt.c: 819: break;
  4273  000EFE  D014               	goto	l214
  4274  000F00                     l208:
  4275  000F00  C019  FFF6         	movff	sprintf@f,tblptrl
  4276  000F04  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  4277  000F08  4A19               	infsnz	sprintf@f,f,c
  4278  000F0A  2A1A               	incf	sprintf@f+1,f,c
  4279  000F0C                     	if	0	;tblptru may be non-zero
  4280  000F0C                     	endif
  4281  000F0C                     	if	0	;tblptru may be non-zero
  4282  000F0C                     	endif
  4283  000F0C  0008               	tblrd		*
  4284  000F0E  CFF5 F032          	movff	tablat,sprintf@c
  4285  000F12  5032               	movf	sprintf@c,w,c
  4286                           
  4287                           ; Switch size 1, requested type "space"
  4288                           ; Number of cases is 3, Range of values is 0 to 117
  4289                           ; switch strategies available:
  4290                           ; Name         Instructions Cycles
  4291                           ; simple_byte           10     6 (average)
  4292                           ;	Chosen strategy is simple_byte
  4293  000F14  0A00               	xorlw	0	; case 0
  4294  000F16  B4D8               	btfsc	status,2,c
  4295  000F18  D0EE               	goto	u2530
  4296  000F1A  0A6C               	xorlw	108	; case 108
  4297  000F1C  B4D8               	btfsc	status,2,c
  4298  000F1E  D7EB               	goto	l211
  4299  000F20  0A19               	xorlw	25	; case 117
  4300  000F22  B4D8               	btfsc	status,2,c
  4301  000F24  D7EA               	goto	l213
  4302  000F26  D0DB               	goto	u2520
  4303  000F28                     l214:
  4304                           
  4305                           ;doprnt.c: 1273: {
  4306                           ;doprnt.c: 1281: if(flag & 0x10)
  4307  000F28  A827               	btfss	sprintf@flag,4,c
  4308  000F2A  D00E               	goto	l215
  4309                           
  4310                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  4311  000F2C  C028  FFD9         	movff	sprintf@ap,fsr2l
  4312  000F30  C029  FFDA         	movff	sprintf@ap+1,fsr2h
  4313  000F34  CFDE F02A          	movff	postinc2,sprintf@val
  4314  000F38  CFDE F02B          	movff	postinc2,sprintf@val+1
  4315  000F3C  CFDE F02C          	movff	postinc2,sprintf@val+2
  4316  000F40  CFDE F02D          	movff	postinc2,sprintf@val+3
  4317  000F44  0E04               	movlw	4
  4318  000F46  D00F               	goto	L1
  4319  000F48                     l215:
  4320                           
  4321                           ;doprnt.c: 1283: else
  4322                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4323  000F48  C028  FFD9         	movff	sprintf@ap,fsr2l
  4324  000F4C  C029  FFDA         	movff	sprintf@ap+1,fsr2h
  4325  000F50  CFDE F023          	movff	postinc2,??_sprintf
  4326  000F54  CFDD F024          	movff	postdec2,??_sprintf+1
  4327  000F58  C023  F02A         	movff	??_sprintf,sprintf@val
  4328  000F5C  C024  F02B         	movff	??_sprintf+1,sprintf@val+1
  4329  000F60  6A2C               	clrf	sprintf@val+2,c
  4330  000F62  6A2D               	clrf	sprintf@val+3,c
  4331  000F64  0E02               	movlw	2
  4332  000F66                     L1:
  4333  000F66  2628               	addwf	sprintf@ap,f,c
  4334  000F68  0E00               	movlw	0
  4335  000F6A  2229               	addwfc	sprintf@ap+1,f,c
  4336                           
  4337                           ;doprnt.c: 1287: }
  4338                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4339  000F6C  5030               	movf	sprintf@prec,w,c
  4340  000F6E  1031               	iorwf	sprintf@prec+1,w,c
  4341  000F70  A4D8               	btfss	status,2,c
  4342  000F72  D008               	goto	l217
  4343  000F74  502A               	movf	sprintf@val,w,c
  4344  000F76  102B               	iorwf	sprintf@val+1,w,c
  4345  000F78  102C               	iorwf	sprintf@val+2,w,c
  4346  000F7A  102D               	iorwf	sprintf@val+3,w,c
  4347  000F7C  A4D8               	btfss	status,2,c
  4348  000F7E  D002               	goto	l217
  4349                           
  4350                           ;doprnt.c: 1291: prec++;
  4351  000F80  4A30               	infsnz	sprintf@prec,f,c
  4352  000F82  2A31               	incf	sprintf@prec+1,f,c
  4353  000F84                     l217:
  4354                           
  4355                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4356  000F84  0E01               	movlw	1
  4357  000F86  6E32               	movwf	sprintf@c,c
  4358  000F88                     l2614:
  4359  000F88  0E0A               	movlw	10
  4360  000F8A  1832               	xorwf	sprintf@c,w,c
  4361  000F8C  B4D8               	btfsc	status,2,c
  4362  000F8E  D018               	goto	u2460
  4363                           
  4364                           ;doprnt.c: 1306: if(val < dpowers[c])
  4365  000F90  5032               	movf	sprintf@c,w,c
  4366  000F92  0D04               	mullw	4
  4367  000F94  0E01               	movlw	low _dpowers
  4368  000F96  24F3               	addwf	prodl,w,c
  4369  000F98  6EF6               	movwf	tblptrl,c
  4370  000F9A  0E06               	movlw	high _dpowers
  4371  000F9C  20F4               	addwfc	prodh,w,c
  4372  000F9E  6EF7               	movwf	tblptrh,c
  4373  000FA0                     	if	0	;There are less than 3 active tblptr bytes
  4374  000FA0                     	endif
  4375  000FA0  0009               	tblrd		*+
  4376  000FA2  50F5               	movf	tablat,w,c
  4377  000FA4  5C2A               	subwf	sprintf@val,w,c
  4378  000FA6  0009               	tblrd		*+
  4379  000FA8  50F5               	movf	tablat,w,c
  4380  000FAA  582B               	subwfb	sprintf@val+1,w,c
  4381  000FAC  0009               	tblrd		*+
  4382  000FAE  50F5               	movf	tablat,w,c
  4383  000FB0  582C               	subwfb	sprintf@val+2,w,c
  4384  000FB2  0009               	tblrd		*+
  4385  000FB4  50F5               	movf	tablat,w,c
  4386  000FB6  582D               	subwfb	sprintf@val+3,w,c
  4387  000FB8  A0D8               	btfss	status,0,c
  4388  000FBA  D002               	goto	u2460
  4389                           
  4390                           ;doprnt.c: 1307: break;
  4391  000FBC  2A32               	incf	sprintf@c,f,c
  4392  000FBE  D7E4               	goto	l2614
  4393  000FC0                     u2460:
  4394                           
  4395                           ;doprnt.c: 1339: if(c < prec)
  4396  000FC0  0E80               	movlw	128
  4397  000FC2  BE32               	btfsc	sprintf@c,7,c
  4398  000FC4  0E7F               	movlw	127
  4399  000FC6  6E23               	movwf	??_sprintf& (0+255),c
  4400  000FC8  5030               	movf	sprintf@prec,w,c
  4401  000FCA  5C32               	subwf	sprintf@c,w,c
  4402  000FCC  5031               	movf	sprintf@prec+1,w,c
  4403  000FCE  0A80               	xorlw	128
  4404  000FD0  5823               	subwfb	??_sprintf& (0+255),w,c
  4405  000FD2  B0D8               	btfsc	status,0,c
  4406  000FD4  D003               	goto	l221
  4407                           
  4408                           ;doprnt.c: 1340: c = prec;
  4409  000FD6  C030  F032         	movff	sprintf@prec,sprintf@c
  4410  000FDA  D010               	goto	l223
  4411  000FDC                     l221:
  4412                           
  4413                           ;doprnt.c: 1341: else if(prec < c)
  4414  000FDC  5031               	movf	sprintf@prec+1,w,c
  4415  000FDE  0A80               	xorlw	128
  4416  000FE0  6E23               	movwf	??_sprintf& (0+255),c
  4417  000FE2  5032               	movf	sprintf@c,w,c
  4418  000FE4  5C30               	subwf	sprintf@prec,w,c
  4419  000FE6  0E80               	movlw	128
  4420  000FE8  BE32               	btfsc	sprintf@c,7,c
  4421  000FEA  0E7F               	movlw	127
  4422  000FEC  5823               	subwfb	??_sprintf& (0+255),w,c
  4423  000FEE  B0D8               	btfsc	status,0,c
  4424  000FF0  D005               	goto	l223
  4425                           
  4426                           ;doprnt.c: 1342: prec = c;
  4427  000FF2  5032               	movf	sprintf@c,w,c
  4428  000FF4  6E30               	movwf	sprintf@prec,c
  4429  000FF6  6A31               	clrf	sprintf@prec+1,c
  4430  000FF8  BE30               	btfsc	sprintf@prec,7,c
  4431  000FFA  0631               	decf	sprintf@prec+1,f,c
  4432  000FFC                     l223:
  4433                           
  4434                           ;doprnt.c: 1381: if(width > c)
  4435  000FFC  0E80               	movlw	128
  4436  000FFE  BE32               	btfsc	sprintf@c,7,c
  4437  001000  0E7F               	movlw	127
  4438  001002  6E23               	movwf	??_sprintf& (0+255),c
  4439  001004  502E               	movf	sprintf@width,w,c
  4440  001006  5C32               	subwf	sprintf@c,w,c
  4441  001008  502F               	movf	sprintf@width+1,w,c
  4442  00100A  0A80               	xorlw	128
  4443  00100C  5823               	subwfb	??_sprintf& (0+255),w,c
  4444  00100E  B0D8               	btfsc	status,0,c
  4445  001010  D007               	goto	l224
  4446                           
  4447                           ;doprnt.c: 1382: width -= c;
  4448  001012  5032               	movf	sprintf@c,w,c
  4449  001014  5E2E               	subwf	sprintf@width,f,c
  4450  001016  0E00               	movlw	0
  4451  001018  BE32               	btfsc	sprintf@c,7,c
  4452  00101A  0EFF               	movlw	255
  4453  00101C  5A2F               	subwfb	sprintf@width+1,f,c
  4454  00101E  D004               	goto	l225
  4455  001020                     l224:
  4456                           
  4457                           ;doprnt.c: 1383: else
  4458                           ;doprnt.c: 1384: width = 0;
  4459  001020  0E00               	movlw	0
  4460  001022  6E2F               	movwf	sprintf@width+1,c
  4461  001024  0E00               	movlw	0
  4462  001026  6E2E               	movwf	sprintf@width,c
  4463  001028                     l225:
  4464                           
  4465                           ;doprnt.c: 1422: {
  4466                           ;doprnt.c: 1424: if(width
  4467                           ;doprnt.c: 1428: )
  4468  001028  502E               	movf	sprintf@width,w,c
  4469  00102A  102F               	iorwf	sprintf@width+1,w,c
  4470  00102C  B4D8               	btfsc	status,2,c
  4471  00102E  D04F               	goto	l229
  4472                           
  4473                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4474                           
  4475                           ;doprnt.c: 1429: do
  4476  001030  C017  FFD9         	movff	sprintf@sp,fsr2l
  4477  001034  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  4478  001038  0E20               	movlw	32
  4479  00103A  6EDF               	movwf	indf2,c
  4480  00103C  4A17               	infsnz	sprintf@sp,f,c
  4481  00103E  2A18               	incf	sprintf@sp+1,f,c
  4482                           
  4483                           ;doprnt.c: 1431: while(--width);
  4484  001040  062E               	decf	sprintf@width,f,c
  4485  001042  A0D8               	btfss	status,0,c
  4486  001044  062F               	decf	sprintf@width+1,f,c
  4487  001046  D7F0               	goto	l225
  4488  001048                     l2648:
  4489                           
  4490                           ;doprnt.c: 1478: {
  4491                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4492  001048  C030  F023         	movff	sprintf@prec,??_sprintf
  4493  00104C  C031  F024         	movff	sprintf@prec+1,??_sprintf+1
  4494  001050  90D8               	bcf	status,0,c
  4495  001052  3623               	rlcf	??_sprintf,f,c
  4496  001054  3624               	rlcf	??_sprintf+1,f,c
  4497  001056  90D8               	bcf	status,0,c
  4498  001058  3623               	rlcf	??_sprintf,f,c
  4499  00105A  3624               	rlcf	??_sprintf+1,f,c
  4500  00105C  0E01               	movlw	low _dpowers
  4501  00105E  2423               	addwf	??_sprintf,w,c
  4502  001060  6EF6               	movwf	tblptrl,c
  4503  001062  0E06               	movlw	high _dpowers
  4504  001064  2024               	addwfc	??_sprintf+1,w,c
  4505  001066  6EF7               	movwf	tblptrh,c
  4506  001068                     	if	0	;There are less than 3 active tblptr bytes
  4507  001068                     	endif
  4508  001068  0009               	tblrd		*+
  4509  00106A  CFF5 F005          	movff	tablat,___lldiv@divisor
  4510  00106E  0009               	tblrd		*+
  4511  001070  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  4512  001074  0009               	tblrd		*+
  4513  001076  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  4514  00107A  000A               	tblrd		*-
  4515  00107C  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  4516  001080  C02A  F001         	movff	sprintf@val,___lldiv@dividend
  4517  001084  C02B  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  4518  001088  C02C  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  4519  00108C  C02D  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  4520  001090  EC9F  F00F         	call	___lldiv	;wreg free
  4521  001094  C001  F00E         	movff	?___lldiv,___llmod@dividend
  4522  001098  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  4523  00109C  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  4524  0010A0  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  4525  0010A4  0E0A               	movlw	10
  4526  0010A6  6E12               	movwf	___llmod@divisor,c
  4527  0010A8  0E00               	movlw	0
  4528  0010AA  6E13               	movwf	___llmod@divisor+1,c
  4529  0010AC  0E00               	movlw	0
  4530  0010AE  6E14               	movwf	___llmod@divisor+2,c
  4531  0010B0  0E00               	movlw	0
  4532  0010B2  6E15               	movwf	___llmod@divisor+3,c
  4533  0010B4  EC50  F010         	call	___llmod	;wreg free
  4534  0010B8  500E               	movf	?___llmod,w,c
  4535  0010BA  0F30               	addlw	48
  4536  0010BC  6E32               	movwf	sprintf@c,c
  4537                           
  4538                           ;doprnt.c: 1523: }
  4539                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4540  0010BE  C017  FFD9         	movff	sprintf@sp,fsr2l
  4541  0010C2  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  4542  0010C6  C032  FFDF         	movff	sprintf@c,indf2
  4543  0010CA  4A17               	infsnz	sprintf@sp,f,c
  4544  0010CC  2A18               	incf	sprintf@sp+1,f,c
  4545  0010CE                     l229:
  4546  0010CE  0630               	decf	sprintf@prec,f,c
  4547  0010D0  A0D8               	btfss	status,0,c
  4548  0010D2  0631               	decf	sprintf@prec+1,f,c
  4549  0010D4  2830               	incf	sprintf@prec,w,c
  4550  0010D6  E1B8               	bnz	l2648
  4551  0010D8  2831               	incf	sprintf@prec+1,w,c
  4552  0010DA  A4D8               	btfss	status,2,c
  4553  0010DC  D7B5               	goto	l230
  4554  0010DE                     u2520:
  4555  0010DE  C019  FFF6         	movff	sprintf@f,tblptrl
  4556  0010E2  C01A  FFF7         	movff	sprintf@f+1,tblptrh
  4557  0010E6  4A19               	infsnz	sprintf@f,f,c
  4558  0010E8  2A1A               	incf	sprintf@f+1,f,c
  4559  0010EA                     	if	0	;tblptru may be non-zero
  4560  0010EA                     	endif
  4561  0010EA                     	if	0	;tblptru may be non-zero
  4562  0010EA                     	endif
  4563  0010EA  0008               	tblrd		*
  4564  0010EC  CFF5 F032          	movff	tablat,sprintf@c
  4565  0010F0  5032               	movf	sprintf@c,w,c
  4566  0010F2  A4D8               	btfss	status,2,c
  4567  0010F4  D676               	goto	l197
  4568  0010F6                     u2530:
  4569                           
  4570                           ;doprnt.c: 1538: *sp = 0;
  4571                           
  4572                           ;doprnt.c: 1525: }
  4573                           ;doprnt.c: 1533: }
  4574                           ;doprnt.c: 1535: alldone:
  4575  0010F6  C017  FFD9         	movff	sprintf@sp,fsr2l
  4576  0010FA  C018  FFDA         	movff	sprintf@sp+1,fsr2h
  4577  0010FE  0E00               	movlw	0
  4578  001100  6EDF               	movwf	indf2,c
  4579  001102  0012               	return	
  4580  001104                     __end_of_sprintf:
  4581                           	opt stack 0
  4582                           tblptru	equ	0xFF8
  4583                           tblptrh	equ	0xFF7
  4584                           tblptrl	equ	0xFF6
  4585                           tablat	equ	0xFF5
  4586                           prodh	equ	0xFF4
  4587                           prodl	equ	0xFF3
  4588                           intcon	equ	0xFF2
  4589                           postinc0	equ	0xFEE
  4590                           wreg	equ	0xFE8
  4591                           postdec1	equ	0xFE5
  4592                           fsr1h	equ	0xFE2
  4593                           fsr1l	equ	0xFE1
  4594                           indf2	equ	0xFDF
  4595                           postinc2	equ	0xFDE
  4596                           postdec2	equ	0xFDD
  4597                           fsr2h	equ	0xFDA
  4598                           fsr2l	equ	0xFD9
  4599                           status	equ	0xFD8
  4600                           
  4601 ;; *************** function _isdigit *****************
  4602 ;; Defined at:
  4603 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;  c               1    wreg     unsigned char 
  4606 ;; Auto vars:     Size  Location     Type
  4607 ;;  c               1    2[COMRAM] unsigned char 
  4608 ;; Return value:  Size  Location     Type
  4609 ;;		None               void
  4610 ;; Registers used:
  4611 ;;		wreg, status,2, status,0
  4612 ;; Tracked objects:
  4613 ;;		On entry : 0/0
  4614 ;;		On exit  : 0/0
  4615 ;;		Unchanged: 0/0
  4616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4617 ;;      Params:         0       0       0       0       0       0       0
  4618 ;;      Locals:         2       0       0       0       0       0       0
  4619 ;;      Temps:          1       0       0       0       0       0       0
  4620 ;;      Totals:         3       0       0       0       0       0       0
  4621 ;;Total ram usage:        3 bytes
  4622 ;; Hardware stack levels used:    1
  4623 ;; This function calls:
  4624 ;;		Nothing
  4625 ;; This function is called by:
  4626 ;;		_sprintf
  4627 ;;		_strtod
  4628 ;; This function uses a non-reentrant model
  4629 ;;
  4630                           
  4631                           	psect	text22
  4632  002416                     __ptext22:
  4633                           	opt stack 0
  4634  002416                     _isdigit:
  4635                           	opt stack 27
  4636                           
  4637                           ;incstack = 0
  4638                           ;isdigit@c stored from wreg
  4639  002416  6E03               	movwf	isdigit@c,c
  4640  002418  0E00               	movlw	0
  4641  00241A  6E02               	movwf	_isdigit$734,c
  4642  00241C  0E3A               	movlw	58
  4643  00241E  6003               	cpfslt	isdigit@c,c
  4644  002420  D005               	goto	l632
  4645  002422  0E2F               	movlw	47
  4646  002424  6403               	cpfsgt	isdigit@c,c
  4647  002426  D002               	goto	l632
  4648  002428  0E01               	movlw	1
  4649  00242A  6E02               	movwf	_isdigit$734,c
  4650  00242C                     l632:
  4651  00242C  C002  F001         	movff	_isdigit$734,??_isdigit
  4652  002430  3001               	rrcf	??_isdigit,w,c
  4653  002432  0012               	return	
  4654  002434                     __end_of_isdigit:
  4655                           	opt stack 0
  4656                           tblptru	equ	0xFF8
  4657                           tblptrh	equ	0xFF7
  4658                           tblptrl	equ	0xFF6
  4659                           tablat	equ	0xFF5
  4660                           prodh	equ	0xFF4
  4661                           prodl	equ	0xFF3
  4662                           intcon	equ	0xFF2
  4663                           postinc0	equ	0xFEE
  4664                           wreg	equ	0xFE8
  4665                           postdec1	equ	0xFE5
  4666                           fsr1h	equ	0xFE2
  4667                           fsr1l	equ	0xFE1
  4668                           indf2	equ	0xFDF
  4669                           postinc2	equ	0xFDE
  4670                           postdec2	equ	0xFDD
  4671                           fsr2h	equ	0xFDA
  4672                           fsr2l	equ	0xFD9
  4673                           status	equ	0xFD8
  4674                           
  4675 ;; *************** function ___wmul *****************
  4676 ;; Defined at:
  4677 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  4678 ;; Parameters:    Size  Location     Type
  4679 ;;  multiplier      2    0[COMRAM] unsigned int 
  4680 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4681 ;; Auto vars:     Size  Location     Type
  4682 ;;  product         2    4[COMRAM] unsigned int 
  4683 ;; Return value:  Size  Location     Type
  4684 ;;                  2    0[COMRAM] unsigned int 
  4685 ;; Registers used:
  4686 ;;		wreg, status,2, status,0, prodl, prodh
  4687 ;; Tracked objects:
  4688 ;;		On entry : 0/0
  4689 ;;		On exit  : 0/0
  4690 ;;		Unchanged: 0/0
  4691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4692 ;;      Params:         4       0       0       0       0       0       0
  4693 ;;      Locals:         2       0       0       0       0       0       0
  4694 ;;      Temps:          0       0       0       0       0       0       0
  4695 ;;      Totals:         6       0       0       0       0       0       0
  4696 ;;Total ram usage:        6 bytes
  4697 ;; Hardware stack levels used:    1
  4698 ;; This function calls:
  4699 ;;		Nothing
  4700 ;; This function is called by:
  4701 ;;		_sprintf
  4702 ;; This function uses a non-reentrant model
  4703 ;;
  4704                           
  4705                           	psect	text23
  4706  002386                     __ptext23:
  4707                           	opt stack 0
  4708  002386                     ___wmul:
  4709                           	opt stack 27
  4710                           
  4711                           ;incstack = 0
  4712  002386  5001               	movf	___wmul@multiplier,w,c
  4713  002388  0203               	mulwf	___wmul@multiplicand,c
  4714  00238A  CFF3 F005          	movff	prodl,___wmul@product
  4715  00238E  CFF4 F006          	movff	prodh,___wmul@product+1
  4716  002392  5001               	movf	___wmul@multiplier,w,c
  4717  002394  0204               	mulwf	___wmul@multiplicand+1,c
  4718  002396  50F3               	movf	prodl,w,c
  4719  002398  2606               	addwf	___wmul@product+1,f,c
  4720  00239A  5002               	movf	___wmul@multiplier+1,w,c
  4721  00239C  0203               	mulwf	___wmul@multiplicand,c
  4722  00239E  50F3               	movf	prodl,w,c
  4723  0023A0  2606               	addwf	___wmul@product+1,f,c
  4724  0023A2  C005  F001         	movff	___wmul@product,?___wmul
  4725  0023A6  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4726  0023AA  0012               	return	
  4727  0023AC                     __end_of___wmul:
  4728                           	opt stack 0
  4729                           tblptru	equ	0xFF8
  4730                           tblptrh	equ	0xFF7
  4731                           tblptrl	equ	0xFF6
  4732                           tablat	equ	0xFF5
  4733                           prodh	equ	0xFF4
  4734                           prodl	equ	0xFF3
  4735                           intcon	equ	0xFF2
  4736                           postinc0	equ	0xFEE
  4737                           wreg	equ	0xFE8
  4738                           postdec1	equ	0xFE5
  4739                           fsr1h	equ	0xFE2
  4740                           fsr1l	equ	0xFE1
  4741                           indf2	equ	0xFDF
  4742                           postinc2	equ	0xFDE
  4743                           postdec2	equ	0xFDD
  4744                           fsr2h	equ	0xFDA
  4745                           fsr2l	equ	0xFD9
  4746                           status	equ	0xFD8
  4747                           
  4748 ;; *************** function ___llmod *****************
  4749 ;; Defined at:
  4750 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4751 ;; Parameters:    Size  Location     Type
  4752 ;;  dividend        4   13[COMRAM] unsigned long 
  4753 ;;  divisor         4   17[COMRAM] unsigned long 
  4754 ;; Auto vars:     Size  Location     Type
  4755 ;;  counter         1   21[COMRAM] unsigned char 
  4756 ;; Return value:  Size  Location     Type
  4757 ;;                  4   13[COMRAM] unsigned long 
  4758 ;; Registers used:
  4759 ;;		wreg, status,2, status,0
  4760 ;; Tracked objects:
  4761 ;;		On entry : 0/0
  4762 ;;		On exit  : 0/0
  4763 ;;		Unchanged: 0/0
  4764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4765 ;;      Params:         8       0       0       0       0       0       0
  4766 ;;      Locals:         1       0       0       0       0       0       0
  4767 ;;      Temps:          0       0       0       0       0       0       0
  4768 ;;      Totals:         9       0       0       0       0       0       0
  4769 ;;Total ram usage:        9 bytes
  4770 ;; Hardware stack levels used:    1
  4771 ;; This function calls:
  4772 ;;		Nothing
  4773 ;; This function is called by:
  4774 ;;		_sprintf
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777                           
  4778                           	psect	text24
  4779  0020A0                     __ptext24:
  4780                           	opt stack 0
  4781  0020A0                     ___llmod:
  4782                           	opt stack 27
  4783                           
  4784                           ;incstack = 0
  4785  0020A0  5012               	movf	___llmod@divisor,w,c
  4786  0020A2  1013               	iorwf	___llmod@divisor+1,w,c
  4787  0020A4  1014               	iorwf	___llmod@divisor+2,w,c
  4788  0020A6  1015               	iorwf	___llmod@divisor+3,w,c
  4789  0020A8  B4D8               	btfsc	status,2,c
  4790  0020AA  D024               	goto	l678
  4791  0020AC  0E01               	movlw	1
  4792  0020AE  6E16               	movwf	___llmod@counter,c
  4793  0020B0  D006               	goto	l673
  4794  0020B2  90D8               	bcf	status,0,c
  4795  0020B4  3612               	rlcf	___llmod@divisor,f,c
  4796  0020B6  3613               	rlcf	___llmod@divisor+1,f,c
  4797  0020B8  3614               	rlcf	___llmod@divisor+2,f,c
  4798  0020BA  3615               	rlcf	___llmod@divisor+3,f,c
  4799  0020BC  2A16               	incf	___llmod@counter,f,c
  4800  0020BE                     l673:
  4801  0020BE  AE15               	btfss	___llmod@divisor+3,7,c
  4802  0020C0  D7F8               	goto	l674
  4803  0020C2                     u2290:
  4804  0020C2  5012               	movf	___llmod@divisor,w,c
  4805  0020C4  5C0E               	subwf	___llmod@dividend,w,c
  4806  0020C6  5013               	movf	___llmod@divisor+1,w,c
  4807  0020C8  580F               	subwfb	___llmod@dividend+1,w,c
  4808  0020CA  5014               	movf	___llmod@divisor+2,w,c
  4809  0020CC  5810               	subwfb	___llmod@dividend+2,w,c
  4810  0020CE  5015               	movf	___llmod@divisor+3,w,c
  4811  0020D0  5811               	subwfb	___llmod@dividend+3,w,c
  4812  0020D2  A0D8               	btfss	status,0,c
  4813  0020D4  D008               	goto	l677
  4814  0020D6  5012               	movf	___llmod@divisor,w,c
  4815  0020D8  5E0E               	subwf	___llmod@dividend,f,c
  4816  0020DA  5013               	movf	___llmod@divisor+1,w,c
  4817  0020DC  5A0F               	subwfb	___llmod@dividend+1,f,c
  4818  0020DE  5014               	movf	___llmod@divisor+2,w,c
  4819  0020E0  5A10               	subwfb	___llmod@dividend+2,f,c
  4820  0020E2  5015               	movf	___llmod@divisor+3,w,c
  4821  0020E4  5A11               	subwfb	___llmod@dividend+3,f,c
  4822  0020E6                     l677:
  4823  0020E6  90D8               	bcf	status,0,c
  4824  0020E8  3215               	rrcf	___llmod@divisor+3,f,c
  4825  0020EA  3214               	rrcf	___llmod@divisor+2,f,c
  4826  0020EC  3213               	rrcf	___llmod@divisor+1,f,c
  4827  0020EE  3212               	rrcf	___llmod@divisor,f,c
  4828  0020F0  2E16               	decfsz	___llmod@counter,f,c
  4829  0020F2  D7E7               	goto	u2290
  4830  0020F4                     l678:
  4831  0020F4  C00E  F00E         	movff	___llmod@dividend,?___llmod
  4832  0020F8  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  4833  0020FC  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  4834  002100  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  4835  002104  0012               	return		;funcret
  4836  002106                     __end_of___llmod:
  4837                           	opt stack 0
  4838                           tblptru	equ	0xFF8
  4839                           tblptrh	equ	0xFF7
  4840                           tblptrl	equ	0xFF6
  4841                           tablat	equ	0xFF5
  4842                           prodh	equ	0xFF4
  4843                           prodl	equ	0xFF3
  4844                           intcon	equ	0xFF2
  4845                           postinc0	equ	0xFEE
  4846                           wreg	equ	0xFE8
  4847                           postdec1	equ	0xFE5
  4848                           fsr1h	equ	0xFE2
  4849                           fsr1l	equ	0xFE1
  4850                           indf2	equ	0xFDF
  4851                           postinc2	equ	0xFDE
  4852                           postdec2	equ	0xFDD
  4853                           fsr2h	equ	0xFDA
  4854                           fsr2l	equ	0xFD9
  4855                           status	equ	0xFD8
  4856                           
  4857 ;; *************** function ___lldiv *****************
  4858 ;; Defined at:
  4859 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;  dividend        4    0[COMRAM] unsigned long 
  4862 ;;  divisor         4    4[COMRAM] unsigned long 
  4863 ;; Auto vars:     Size  Location     Type
  4864 ;;  quotient        4    8[COMRAM] unsigned long 
  4865 ;;  counter         1   12[COMRAM] unsigned char 
  4866 ;; Return value:  Size  Location     Type
  4867 ;;                  4    0[COMRAM] unsigned long 
  4868 ;; Registers used:
  4869 ;;		wreg, status,2, status,0
  4870 ;; Tracked objects:
  4871 ;;		On entry : 0/0
  4872 ;;		On exit  : 0/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4875 ;;      Params:         8       0       0       0       0       0       0
  4876 ;;      Locals:         5       0       0       0       0       0       0
  4877 ;;      Temps:          0       0       0       0       0       0       0
  4878 ;;      Totals:        13       0       0       0       0       0       0
  4879 ;;Total ram usage:       13 bytes
  4880 ;; Hardware stack levels used:    1
  4881 ;; This function calls:
  4882 ;;		Nothing
  4883 ;; This function is called by:
  4884 ;;		_sprintf
  4885 ;; This function uses a non-reentrant model
  4886 ;;
  4887                           
  4888                           	psect	text25
  4889  001F3E                     __ptext25:
  4890                           	opt stack 0
  4891  001F3E                     ___lldiv:
  4892                           	opt stack 27
  4893                           
  4894                           ;incstack = 0
  4895  001F3E  0E00               	movlw	0
  4896  001F40  6E09               	movwf	___lldiv@quotient,c
  4897  001F42  0E00               	movlw	0
  4898  001F44  6E0A               	movwf	___lldiv@quotient+1,c
  4899  001F46  0E00               	movlw	0
  4900  001F48  6E0B               	movwf	___lldiv@quotient+2,c
  4901  001F4A  0E00               	movlw	0
  4902  001F4C  6E0C               	movwf	___lldiv@quotient+3,c
  4903  001F4E  5005               	movf	___lldiv@divisor,w,c
  4904  001F50  1006               	iorwf	___lldiv@divisor+1,w,c
  4905  001F52  1007               	iorwf	___lldiv@divisor+2,w,c
  4906  001F54  1008               	iorwf	___lldiv@divisor+3,w,c
  4907  001F56  B4D8               	btfsc	status,2,c
  4908  001F58  D02A               	goto	l668
  4909  001F5A  0E01               	movlw	1
  4910  001F5C  6E0D               	movwf	___lldiv@counter,c
  4911  001F5E  D006               	goto	l663
  4912  001F60  90D8               	bcf	status,0,c
  4913  001F62  3605               	rlcf	___lldiv@divisor,f,c
  4914  001F64  3606               	rlcf	___lldiv@divisor+1,f,c
  4915  001F66  3607               	rlcf	___lldiv@divisor+2,f,c
  4916  001F68  3608               	rlcf	___lldiv@divisor+3,f,c
  4917  001F6A  2A0D               	incf	___lldiv@counter,f,c
  4918  001F6C                     l663:
  4919  001F6C  AE08               	btfss	___lldiv@divisor+3,7,c
  4920  001F6E  D7F8               	goto	l664
  4921  001F70                     u2260:
  4922  001F70  90D8               	bcf	status,0,c
  4923  001F72  3609               	rlcf	___lldiv@quotient,f,c
  4924  001F74  360A               	rlcf	___lldiv@quotient+1,f,c
  4925  001F76  360B               	rlcf	___lldiv@quotient+2,f,c
  4926  001F78  360C               	rlcf	___lldiv@quotient+3,f,c
  4927  001F7A  5005               	movf	___lldiv@divisor,w,c
  4928  001F7C  5C01               	subwf	___lldiv@dividend,w,c
  4929  001F7E  5006               	movf	___lldiv@divisor+1,w,c
  4930  001F80  5802               	subwfb	___lldiv@dividend+1,w,c
  4931  001F82  5007               	movf	___lldiv@divisor+2,w,c
  4932  001F84  5803               	subwfb	___lldiv@dividend+2,w,c
  4933  001F86  5008               	movf	___lldiv@divisor+3,w,c
  4934  001F88  5804               	subwfb	___lldiv@dividend+3,w,c
  4935  001F8A  A0D8               	btfss	status,0,c
  4936  001F8C  D009               	goto	l667
  4937  001F8E  5005               	movf	___lldiv@divisor,w,c
  4938  001F90  5E01               	subwf	___lldiv@dividend,f,c
  4939  001F92  5006               	movf	___lldiv@divisor+1,w,c
  4940  001F94  5A02               	subwfb	___lldiv@dividend+1,f,c
  4941  001F96  5007               	movf	___lldiv@divisor+2,w,c
  4942  001F98  5A03               	subwfb	___lldiv@dividend+2,f,c
  4943  001F9A  5008               	movf	___lldiv@divisor+3,w,c
  4944  001F9C  5A04               	subwfb	___lldiv@dividend+3,f,c
  4945  001F9E  8009               	bsf	___lldiv@quotient,0,c
  4946  001FA0                     l667:
  4947  001FA0  90D8               	bcf	status,0,c
  4948  001FA2  3208               	rrcf	___lldiv@divisor+3,f,c
  4949  001FA4  3207               	rrcf	___lldiv@divisor+2,f,c
  4950  001FA6  3206               	rrcf	___lldiv@divisor+1,f,c
  4951  001FA8  3205               	rrcf	___lldiv@divisor,f,c
  4952  001FAA  2E0D               	decfsz	___lldiv@counter,f,c
  4953  001FAC  D7E1               	goto	u2260
  4954  001FAE                     l668:
  4955  001FAE  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4956  001FB2  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4957  001FB6  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4958  001FBA  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4959  001FBE  0012               	return		;funcret
  4960  001FC0                     __end_of___lldiv:
  4961                           	opt stack 0
  4962                           tblptru	equ	0xFF8
  4963                           tblptrh	equ	0xFF7
  4964                           tblptrl	equ	0xFF6
  4965                           tablat	equ	0xFF5
  4966                           prodh	equ	0xFF4
  4967                           prodl	equ	0xFF3
  4968                           intcon	equ	0xFF2
  4969                           postinc0	equ	0xFEE
  4970                           wreg	equ	0xFE8
  4971                           postdec1	equ	0xFE5
  4972                           fsr1h	equ	0xFE2
  4973                           fsr1l	equ	0xFE1
  4974                           indf2	equ	0xFDF
  4975                           postinc2	equ	0xFDE
  4976                           postdec2	equ	0xFDD
  4977                           fsr2h	equ	0xFDA
  4978                           fsr2l	equ	0xFD9
  4979                           status	equ	0xFD8
  4980                           
  4981 ;; *************** function ___lltoft *****************
  4982 ;; Defined at:
  4983 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;  c               4    8[COMRAM] unsigned long 
  4986 ;; Auto vars:     Size  Location     Type
  4987 ;;  exp             1   16[COMRAM] unsigned char 
  4988 ;; Return value:  Size  Location     Type
  4989 ;;                  3    8[COMRAM] float 
  4990 ;; Registers used:
  4991 ;;		wreg, status,2, status,0, cstack
  4992 ;; Tracked objects:
  4993 ;;		On entry : 0/0
  4994 ;;		On exit  : 0/0
  4995 ;;		Unchanged: 0/0
  4996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4997 ;;      Params:         4       0       0       0       0       0       0
  4998 ;;      Locals:         1       0       0       0       0       0       0
  4999 ;;      Temps:          4       0       0       0       0       0       0
  5000 ;;      Totals:         9       0       0       0       0       0       0
  5001 ;;Total ram usage:        9 bytes
  5002 ;; Hardware stack levels used:    1
  5003 ;; Hardware stack levels required when called:    1
  5004 ;; This function calls:
  5005 ;;		___ftpack
  5006 ;; This function is called by:
  5007 ;;		_ftoa
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           	psect	text26
  5012  002106                     __ptext26:
  5013                           	opt stack 0
  5014  002106                     ___lltoft:
  5015                           	opt stack 27
  5016                           
  5017                           ;incstack = 0
  5018  002106  0E8E               	movlw	142
  5019  002108  6E11               	movwf	___lltoft@exp,c
  5020  00210A  D006               	goto	l684
  5021  00210C  90D8               	bcf	status,0,c
  5022  00210E  320C               	rrcf	___lltoft@c+3,f,c
  5023  002110  320B               	rrcf	___lltoft@c+2,f,c
  5024  002112  320A               	rrcf	___lltoft@c+1,f,c
  5025  002114  3209               	rrcf	___lltoft@c,f,c
  5026  002116  2A11               	incf	___lltoft@exp,f,c
  5027  002118                     l684:
  5028  002118  0E00               	movlw	0
  5029  00211A  1409               	andwf	___lltoft@c,w,c
  5030  00211C  6E0D               	movwf	??___lltoft& (0+255),c
  5031  00211E  0E00               	movlw	0
  5032  002120  140A               	andwf	___lltoft@c+1,w,c
  5033  002122  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  5034  002124  0E00               	movlw	0
  5035  002126  140B               	andwf	___lltoft@c+2,w,c
  5036  002128  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  5037  00212A  0EFF               	movlw	255
  5038  00212C  140C               	andwf	___lltoft@c+3,w,c
  5039  00212E  6E10               	movwf	(??___lltoft+3)& (0+255),c
  5040  002130  500D               	movf	??___lltoft,w,c
  5041  002132  100E               	iorwf	??___lltoft+1,w,c
  5042  002134  100F               	iorwf	??___lltoft+2,w,c
  5043  002136  1010               	iorwf	??___lltoft+3,w,c
  5044  002138  A4D8               	btfss	status,2,c
  5045  00213A  D7E8               	goto	l685
  5046  00213C  C009  F001         	movff	___lltoft@c,___ftpack@arg
  5047  002140  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  5048  002144  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  5049  002148  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  5050  00214C  0E00               	movlw	0
  5051  00214E  6E05               	movwf	___ftpack@sign,c
  5052  002150  EC7D  F00E         	call	___ftpack	;wreg free
  5053  002154  C001  F009         	movff	?___ftpack,?___lltoft
  5054  002158  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  5055  00215C  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  5056  002160  0012               	return	
  5057  002162                     __end_of___lltoft:
  5058                           	opt stack 0
  5059                           tblptru	equ	0xFF8
  5060                           tblptrh	equ	0xFF7
  5061                           tblptrl	equ	0xFF6
  5062                           tablat	equ	0xFF5
  5063                           prodh	equ	0xFF4
  5064                           prodl	equ	0xFF3
  5065                           intcon	equ	0xFF2
  5066                           postinc0	equ	0xFEE
  5067                           wreg	equ	0xFE8
  5068                           postdec1	equ	0xFE5
  5069                           fsr1h	equ	0xFE2
  5070                           fsr1l	equ	0xFE1
  5071                           indf2	equ	0xFDF
  5072                           postinc2	equ	0xFDE
  5073                           postdec2	equ	0xFDD
  5074                           fsr2h	equ	0xFDA
  5075                           fsr2l	equ	0xFD9
  5076                           status	equ	0xFD8
  5077                           
  5078 ;; *************** function ___fttol *****************
  5079 ;; Defined at:
  5080 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  5081 ;; Parameters:    Size  Location     Type
  5082 ;;  f1              3   23[COMRAM] float 
  5083 ;; Auto vars:     Size  Location     Type
  5084 ;;  lval            4   33[COMRAM] unsigned long 
  5085 ;;  exp1            1   37[COMRAM] unsigned char 
  5086 ;;  sign1           1   32[COMRAM] unsigned char 
  5087 ;; Return value:  Size  Location     Type
  5088 ;;                  4   23[COMRAM] long 
  5089 ;; Registers used:
  5090 ;;		wreg, status,2, status,0
  5091 ;; Tracked objects:
  5092 ;;		On entry : 0/0
  5093 ;;		On exit  : 0/0
  5094 ;;		Unchanged: 0/0
  5095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5096 ;;      Params:         4       0       0       0       0       0       0
  5097 ;;      Locals:         6       0       0       0       0       0       0
  5098 ;;      Temps:          5       0       0       0       0       0       0
  5099 ;;      Totals:        15       0       0       0       0       0       0
  5100 ;;Total ram usage:       15 bytes
  5101 ;; Hardware stack levels used:    1
  5102 ;; This function calls:
  5103 ;;		Nothing
  5104 ;; This function is called by:
  5105 ;;		_ftoa
  5106 ;; This function uses a non-reentrant model
  5107 ;;
  5108                           
  5109                           	psect	text27
  5110  001960                     __ptext27:
  5111                           	opt stack 0
  5112  001960                     ___fttol:
  5113                           	opt stack 28
  5114                           
  5115                           ;incstack = 0
  5116  001960  C01A  F01C         	movff	___fttol@f1+2,??___fttol
  5117  001964  6A1D               	clrf	(??___fttol+1)& (0+255),c
  5118  001966  6A1E               	clrf	(??___fttol+2)& (0+255),c
  5119  001968  3419               	rlcf	___fttol@f1+1,w,c
  5120  00196A  361C               	rlcf	??___fttol& (0+255),f,c
  5121  00196C  E301               	bnc	u2881
  5122  00196E  801D               	bsf	(??___fttol+1)& (0+255),0,c
  5123  001970                     u2881:
  5124  001970  501C               	movf	??___fttol,w,c
  5125  001972  6E26               	movwf	___fttol@exp1,c
  5126  001974  5026               	movf	___fttol@exp1,w,c
  5127  001976  A4D8               	btfss	status,2,c
  5128  001978  D009               	goto	l617
  5129  00197A  0E00               	movlw	0
  5130  00197C  6E18               	movwf	?___fttol,c
  5131  00197E  0E00               	movlw	0
  5132  001980  6E19               	movwf	?___fttol+1,c
  5133  001982  0E00               	movlw	0
  5134  001984  6E1A               	movwf	?___fttol+2,c
  5135  001986  0E00               	movlw	0
  5136  001988  6E1B               	movwf	?___fttol+3,c
  5137  00198A  0012               	return	
  5138  00198C                     l617:
  5139  00198C  0E17               	movlw	23
  5140  00198E  6E1C               	movwf	??___fttol& (0+255),c
  5141  001990  C018  F01D         	movff	___fttol@f1,??___fttol+1
  5142  001994  C019  F01E         	movff	___fttol@f1+1,??___fttol+2
  5143  001998  C01A  F01F         	movff	___fttol@f1+2,??___fttol+3
  5144  00199C  281C               	incf	??___fttol,w,c
  5145  00199E  6E20               	movwf	(??___fttol+4)& (0+255),c
  5146  0019A0  D004               	goto	u2900
  5147  0019A2                     u2905:
  5148  0019A2  90D8               	bcf	status,0,c
  5149  0019A4  321F               	rrcf	??___fttol+3,f,c
  5150  0019A6  321E               	rrcf	??___fttol+2,f,c
  5151  0019A8  321D               	rrcf	??___fttol+1,f,c
  5152  0019AA                     u2900:
  5153  0019AA  2E20               	decfsz	(??___fttol+4)& (0+255),f,c
  5154  0019AC  D7FA               	goto	u2905
  5155  0019AE  501D               	movf	??___fttol+1,w,c
  5156  0019B0  6E21               	movwf	___fttol@sign1,c
  5157  0019B2  8E19               	bsf	___fttol@f1+1,7,c
  5158  0019B4  0EFF               	movlw	255
  5159  0019B6  1618               	andwf	___fttol@f1,f,c
  5160  0019B8  0EFF               	movlw	255
  5161  0019BA  1619               	andwf	___fttol@f1+1,f,c
  5162  0019BC  0E00               	movlw	0
  5163  0019BE  161A               	andwf	___fttol@f1+2,f,c
  5164  0019C0  5018               	movf	___fttol@f1,w,c
  5165  0019C2  6E22               	movwf	___fttol@lval,c
  5166  0019C4  5019               	movf	___fttol@f1+1,w,c
  5167  0019C6  6E23               	movwf	___fttol@lval+1,c
  5168  0019C8  501A               	movf	___fttol@f1+2,w,c
  5169  0019CA  6E24               	movwf	___fttol@lval+2,c
  5170  0019CC  6A25               	clrf	___fttol@lval+3,c
  5171  0019CE  0E8E               	movlw	142
  5172  0019D0  5E26               	subwf	___fttol@exp1,f,c
  5173  0019D2  AE26               	btfss	___fttol@exp1,7,c
  5174  0019D4  D016               	goto	l619
  5175  0019D6  5026               	movf	___fttol@exp1,w,c
  5176  0019D8  0A80               	xorlw	128
  5177  0019DA  0F8F               	addlw	143
  5178  0019DC  B0D8               	btfsc	status,0,c
  5179  0019DE  D009               	goto	l620
  5180  0019E0  0E00               	movlw	0
  5181  0019E2  6E18               	movwf	?___fttol,c
  5182  0019E4  0E00               	movlw	0
  5183  0019E6  6E19               	movwf	?___fttol+1,c
  5184  0019E8  0E00               	movlw	0
  5185  0019EA  6E1A               	movwf	?___fttol+2,c
  5186  0019EC  0E00               	movlw	0
  5187  0019EE  6E1B               	movwf	?___fttol+3,c
  5188  0019F0  0012               	return	
  5189  0019F2                     l620:
  5190  0019F2  90D8               	bcf	status,0,c
  5191  0019F4  3225               	rrcf	___fttol@lval+3,f,c
  5192  0019F6  3224               	rrcf	___fttol@lval+2,f,c
  5193  0019F8  3223               	rrcf	___fttol@lval+1,f,c
  5194  0019FA  3222               	rrcf	___fttol@lval,f,c
  5195  0019FC  3E26               	incfsz	___fttol@exp1,f,c
  5196  0019FE  D7F9               	goto	l620
  5197  001A00  D015               	goto	u2940
  5198  001A02                     l619:
  5199  001A02  0E17               	movlw	23
  5200  001A04  6426               	cpfsgt	___fttol@exp1,c
  5201  001A06  D00F               	goto	l625
  5202  001A08  0E00               	movlw	0
  5203  001A0A  6E18               	movwf	?___fttol,c
  5204  001A0C  0E00               	movlw	0
  5205  001A0E  6E19               	movwf	?___fttol+1,c
  5206  001A10  0E00               	movlw	0
  5207  001A12  6E1A               	movwf	?___fttol+2,c
  5208  001A14  0E00               	movlw	0
  5209  001A16  6E1B               	movwf	?___fttol+3,c
  5210  001A18  0012               	return	
  5211  001A1A  90D8               	bcf	status,0,c
  5212  001A1C  3622               	rlcf	___fttol@lval,f,c
  5213  001A1E  3623               	rlcf	___fttol@lval+1,f,c
  5214  001A20  3624               	rlcf	___fttol@lval+2,f,c
  5215  001A22  3625               	rlcf	___fttol@lval+3,f,c
  5216  001A24  0626               	decf	___fttol@exp1,f,c
  5217  001A26                     l625:
  5218  001A26  5026               	movf	___fttol@exp1,w,c
  5219  001A28  A4D8               	btfss	status,2,c
  5220  001A2A  D7F7               	goto	l626
  5221  001A2C                     u2940:
  5222  001A2C  5021               	movf	___fttol@sign1,w,c
  5223  001A2E  B4D8               	btfsc	status,2,c
  5224  001A30  D008               	goto	l628
  5225  001A32  1E25               	comf	___fttol@lval+3,f,c
  5226  001A34  1E24               	comf	___fttol@lval+2,f,c
  5227  001A36  1E23               	comf	___fttol@lval+1,f,c
  5228  001A38  6C22               	negf	___fttol@lval,c
  5229  001A3A  0E00               	movlw	0
  5230  001A3C  2223               	addwfc	___fttol@lval+1,f,c
  5231  001A3E  2224               	addwfc	___fttol@lval+2,f,c
  5232  001A40  2225               	addwfc	___fttol@lval+3,f,c
  5233  001A42                     l628:
  5234  001A42  C022  F018         	movff	___fttol@lval,?___fttol
  5235  001A46  C023  F019         	movff	___fttol@lval+1,?___fttol+1
  5236  001A4A  C024  F01A         	movff	___fttol@lval+2,?___fttol+2
  5237  001A4E  C025  F01B         	movff	___fttol@lval+3,?___fttol+3
  5238  001A52  0012               	return	
  5239  001A54                     __end_of___fttol:
  5240                           	opt stack 0
  5241                           tblptru	equ	0xFF8
  5242                           tblptrh	equ	0xFF7
  5243                           tblptrl	equ	0xFF6
  5244                           tablat	equ	0xFF5
  5245                           prodh	equ	0xFF4
  5246                           prodl	equ	0xFF3
  5247                           intcon	equ	0xFF2
  5248                           postinc0	equ	0xFEE
  5249                           wreg	equ	0xFE8
  5250                           postdec1	equ	0xFE5
  5251                           fsr1h	equ	0xFE2
  5252                           fsr1l	equ	0xFE1
  5253                           indf2	equ	0xFDF
  5254                           postinc2	equ	0xFDE
  5255                           postdec2	equ	0xFDD
  5256                           fsr2h	equ	0xFDA
  5257                           fsr2l	equ	0xFD9
  5258                           status	equ	0xFD8
  5259                           
  5260 ;; *************** function ___ftsub *****************
  5261 ;; Defined at:
  5262 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  5263 ;; Parameters:    Size  Location     Type
  5264 ;;  f1              3   50[COMRAM] float 
  5265 ;;  f2              3   53[COMRAM] float 
  5266 ;; Auto vars:     Size  Location     Type
  5267 ;;		None
  5268 ;; Return value:  Size  Location     Type
  5269 ;;                  3   50[COMRAM] float 
  5270 ;; Registers used:
  5271 ;;		wreg, status,2, status,0, cstack
  5272 ;; Tracked objects:
  5273 ;;		On entry : 0/0
  5274 ;;		On exit  : 0/0
  5275 ;;		Unchanged: 0/0
  5276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5277 ;;      Params:         6       0       0       0       0       0       0
  5278 ;;      Locals:         0       0       0       0       0       0       0
  5279 ;;      Temps:          0       0       0       0       0       0       0
  5280 ;;      Totals:         6       0       0       0       0       0       0
  5281 ;;Total ram usage:        6 bytes
  5282 ;; Hardware stack levels used:    1
  5283 ;; Hardware stack levels required when called:    2
  5284 ;; This function calls:
  5285 ;;		___ftadd
  5286 ;; This function is called by:
  5287 ;;		_ftoa
  5288 ;; This function uses a non-reentrant model
  5289 ;;
  5290                           
  5291                           	psect	text28
  5292  002252                     __ptext28:
  5293                           	opt stack 0
  5294  002252                     ___ftsub:
  5295                           	opt stack 26
  5296                           
  5297                           ;incstack = 0
  5298  002252  5036               	movf	___ftsub@f2,w,c
  5299  002254  1037               	iorwf	___ftsub@f2+1,w,c
  5300  002256  1038               	iorwf	___ftsub@f2+2,w,c
  5301  002258  B4D8               	btfsc	status,2,c
  5302  00225A  D006               	goto	l613
  5303  00225C  0E00               	movlw	0
  5304  00225E  1A36               	xorwf	___ftsub@f2,f,c
  5305  002260  0E00               	movlw	0
  5306  002262  1A37               	xorwf	___ftsub@f2+1,f,c
  5307  002264  0E80               	movlw	128
  5308  002266  1A38               	xorwf	___ftsub@f2+2,f,c
  5309  002268                     l613:
  5310  002268  C033  F027         	movff	___ftsub@f1,___ftadd@f1
  5311  00226C  C034  F028         	movff	___ftsub@f1+1,___ftadd@f1+1
  5312  002270  C035  F029         	movff	___ftsub@f1+2,___ftadd@f1+2
  5313  002274  C036  F02A         	movff	___ftsub@f2,___ftadd@f2
  5314  002278  C037  F02B         	movff	___ftsub@f2+1,___ftadd@f2+1
  5315  00227C  C038  F02C         	movff	___ftsub@f2+2,___ftadd@f2+2
  5316  002280  EC82  F008         	call	___ftadd	;wreg free
  5317  002284  C027  F033         	movff	?___ftadd,?___ftsub
  5318  002288  C028  F034         	movff	?___ftadd+1,?___ftsub+1
  5319  00228C  C029  F035         	movff	?___ftadd+2,?___ftsub+2
  5320  002290  0012               	return	
  5321  002292                     __end_of___ftsub:
  5322                           	opt stack 0
  5323                           tblptru	equ	0xFF8
  5324                           tblptrh	equ	0xFF7
  5325                           tblptrl	equ	0xFF6
  5326                           tablat	equ	0xFF5
  5327                           prodh	equ	0xFF4
  5328                           prodl	equ	0xFF3
  5329                           intcon	equ	0xFF2
  5330                           postinc0	equ	0xFEE
  5331                           wreg	equ	0xFE8
  5332                           postdec1	equ	0xFE5
  5333                           fsr1h	equ	0xFE2
  5334                           fsr1l	equ	0xFE1
  5335                           indf2	equ	0xFDF
  5336                           postinc2	equ	0xFDE
  5337                           postdec2	equ	0xFDD
  5338                           fsr2h	equ	0xFDA
  5339                           fsr2l	equ	0xFD9
  5340                           status	equ	0xFD8
  5341                           
  5342 ;; *************** function ___ftadd *****************
  5343 ;; Defined at:
  5344 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;  f1              3   38[COMRAM] float 
  5347 ;;  f2              3   41[COMRAM] float 
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;  exp1            1   49[COMRAM] unsigned char 
  5350 ;;  exp2            1   48[COMRAM] unsigned char 
  5351 ;;  sign            1   47[COMRAM] unsigned char 
  5352 ;; Return value:  Size  Location     Type
  5353 ;;                  3   38[COMRAM] float 
  5354 ;; Registers used:
  5355 ;;		wreg, status,2, status,0, cstack
  5356 ;; Tracked objects:
  5357 ;;		On entry : 0/0
  5358 ;;		On exit  : 0/0
  5359 ;;		Unchanged: 0/0
  5360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5361 ;;      Params:         6       0       0       0       0       0       0
  5362 ;;      Locals:         3       0       0       0       0       0       0
  5363 ;;      Temps:          3       0       0       0       0       0       0
  5364 ;;      Totals:        12       0       0       0       0       0       0
  5365 ;;Total ram usage:       12 bytes
  5366 ;; Hardware stack levels used:    1
  5367 ;; Hardware stack levels required when called:    1
  5368 ;; This function calls:
  5369 ;;		___ftpack
  5370 ;; This function is called by:
  5371 ;;		_read_gps
  5372 ;;		___ftsub
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           	psect	text29
  5377  001104                     __ptext29:
  5378                           	opt stack 0
  5379  001104                     ___ftadd:
  5380                           	opt stack 28
  5381                           
  5382                           ;incstack = 0
  5383  001104  C029  F02D         	movff	___ftadd@f1+2,??___ftadd
  5384  001108  6A2E               	clrf	(??___ftadd+1)& (0+255),c
  5385  00110A  6A2F               	clrf	(??___ftadd+2)& (0+255),c
  5386  00110C  3428               	rlcf	___ftadd@f1+1,w,c
  5387  00110E  362D               	rlcf	??___ftadd& (0+255),f,c
  5388  001110  E301               	bnc	u1861
  5389  001112  802E               	bsf	(??___ftadd+1)& (0+255),0,c
  5390  001114                     u1861:
  5391  001114  502D               	movf	??___ftadd,w,c
  5392  001116  6E32               	movwf	___ftadd@exp1,c
  5393  001118  C02C  F02D         	movff	___ftadd@f2+2,??___ftadd
  5394  00111C  6A2E               	clrf	(??___ftadd+1)& (0+255),c
  5395  00111E  6A2F               	clrf	(??___ftadd+2)& (0+255),c
  5396  001120  342B               	rlcf	___ftadd@f2+1,w,c
  5397  001122  362D               	rlcf	??___ftadd& (0+255),f,c
  5398  001124  E301               	bnc	u1871
  5399  001126  802E               	bsf	(??___ftadd+1)& (0+255),0,c
  5400  001128                     u1871:
  5401  001128  502D               	movf	??___ftadd,w,c
  5402  00112A  6E31               	movwf	___ftadd@exp2,c
  5403  00112C  5032               	movf	___ftadd@exp1,w,c
  5404  00112E  B4D8               	btfsc	status,2,c
  5405  001130  D00B               	goto	u1900
  5406  001132  5031               	movf	___ftadd@exp2,w,c
  5407  001134  5C32               	subwf	___ftadd@exp1,w,c
  5408  001136  B0D8               	btfsc	status,0,c
  5409  001138  D00E               	goto	l540
  5410  00113A  5032               	movf	___ftadd@exp1,w,c
  5411  00113C  0800               	sublw	0
  5412  00113E  2431               	addwf	___ftadd@exp2,w,c
  5413  001140  6E2D               	movwf	??___ftadd& (0+255),c
  5414  001142  0E18               	movlw	24
  5415  001144  642D               	cpfsgt	??___ftadd,c
  5416  001146  D007               	goto	l540
  5417  001148                     u1900:
  5418  001148  C02A  F027         	movff	___ftadd@f2,?___ftadd
  5419  00114C  C02B  F028         	movff	___ftadd@f2+1,?___ftadd+1
  5420  001150  C02C  F029         	movff	___ftadd@f2+2,?___ftadd+2
  5421  001154  0012               	return	
  5422  001156                     l540:
  5423  001156  5031               	movf	___ftadd@exp2,w,c
  5424  001158  B4D8               	btfsc	status,2,c
  5425  00115A  D00B               	goto	u1930
  5426  00115C  5032               	movf	___ftadd@exp1,w,c
  5427  00115E  5C31               	subwf	___ftadd@exp2,w,c
  5428  001160  B0D8               	btfsc	status,0,c
  5429  001162  D00E               	goto	l544
  5430  001164  5031               	movf	___ftadd@exp2,w,c
  5431  001166  0800               	sublw	0
  5432  001168  2432               	addwf	___ftadd@exp1,w,c
  5433  00116A  6E2D               	movwf	??___ftadd& (0+255),c
  5434  00116C  0E18               	movlw	24
  5435  00116E  642D               	cpfsgt	??___ftadd,c
  5436  001170  D007               	goto	l544
  5437  001172                     u1930:
  5438  001172  C027  F027         	movff	___ftadd@f1,?___ftadd
  5439  001176  C028  F028         	movff	___ftadd@f1+1,?___ftadd+1
  5440  00117A  C029  F029         	movff	___ftadd@f1+2,?___ftadd+2
  5441  00117E  0012               	return	
  5442  001180                     l544:
  5443  001180  0E06               	movlw	6
  5444  001182  6E30               	movwf	___ftadd@sign,c
  5445  001184  BE29               	btfsc	___ftadd@f1+2,7,c
  5446  001186  8E30               	bsf	___ftadd@sign,7,c
  5447  001188  BE2C               	btfsc	___ftadd@f2+2,7,c
  5448  00118A  8C30               	bsf	___ftadd@sign,6,c
  5449  00118C  8E28               	bsf	___ftadd@f1+1,7,c
  5450  00118E  0EFF               	movlw	255
  5451  001190  1627               	andwf	___ftadd@f1,f,c
  5452  001192  0EFF               	movlw	255
  5453  001194  1628               	andwf	___ftadd@f1+1,f,c
  5454  001196  0E00               	movlw	0
  5455  001198  1629               	andwf	___ftadd@f1+2,f,c
  5456  00119A  8E2B               	bsf	___ftadd@f2+1,7,c
  5457  00119C  0EFF               	movlw	255
  5458  00119E  162A               	andwf	___ftadd@f2,f,c
  5459  0011A0  0EFF               	movlw	255
  5460  0011A2  162B               	andwf	___ftadd@f2+1,f,c
  5461  0011A4  0E00               	movlw	0
  5462  0011A6  162C               	andwf	___ftadd@f2+2,f,c
  5463  0011A8  5031               	movf	___ftadd@exp2,w,c
  5464  0011AA  5C32               	subwf	___ftadd@exp1,w,c
  5465  0011AC  B0D8               	btfsc	status,0,c
  5466  0011AE  D01B               	goto	l549
  5467  0011B0                     u1960:
  5468  0011B0  90D8               	bcf	status,0,c
  5469  0011B2  362A               	rlcf	___ftadd@f2,f,c
  5470  0011B4  362B               	rlcf	___ftadd@f2+1,f,c
  5471  0011B6  362C               	rlcf	___ftadd@f2+2,f,c
  5472  0011B8  0631               	decf	___ftadd@exp2,f,c
  5473  0011BA  5032               	movf	___ftadd@exp1,w,c
  5474  0011BC  1831               	xorwf	___ftadd@exp2,w,c
  5475  0011BE  B4D8               	btfsc	status,2,c
  5476  0011C0  D00D               	goto	l554
  5477  0011C2  0630               	decf	___ftadd@sign,f,c
  5478  0011C4  C030  F02D         	movff	___ftadd@sign,??___ftadd
  5479  0011C8  0E07               	movlw	7
  5480  0011CA  162D               	andwf	??___ftadd,f,c
  5481  0011CC  B4D8               	btfsc	status,2,c
  5482  0011CE  D006               	goto	l554
  5483  0011D0  D7EF               	goto	u1960
  5484  0011D2  90D8               	bcf	status,0,c
  5485  0011D4  3229               	rrcf	___ftadd@f1+2,f,c
  5486  0011D6  3228               	rrcf	___ftadd@f1+1,f,c
  5487  0011D8  3227               	rrcf	___ftadd@f1,f,c
  5488  0011DA  2A32               	incf	___ftadd@exp1,f,c
  5489  0011DC                     l554:
  5490  0011DC  5031               	movf	___ftadd@exp2,w,c
  5491  0011DE  1832               	xorwf	___ftadd@exp1,w,c
  5492  0011E0  B4D8               	btfsc	status,2,c
  5493  0011E2  D01F               	goto	u2030
  5494  0011E4  D7F6               	goto	l555
  5495  0011E6                     l549:
  5496  0011E6  5032               	movf	___ftadd@exp1,w,c
  5497  0011E8  5C31               	subwf	___ftadd@exp2,w,c
  5498  0011EA  B0D8               	btfsc	status,0,c
  5499  0011EC  D01A               	goto	u2030
  5500  0011EE                     u2000:
  5501  0011EE  90D8               	bcf	status,0,c
  5502  0011F0  3627               	rlcf	___ftadd@f1,f,c
  5503  0011F2  3628               	rlcf	___ftadd@f1+1,f,c
  5504  0011F4  3629               	rlcf	___ftadd@f1+2,f,c
  5505  0011F6  0632               	decf	___ftadd@exp1,f,c
  5506  0011F8  5032               	movf	___ftadd@exp1,w,c
  5507  0011FA  1831               	xorwf	___ftadd@exp2,w,c
  5508  0011FC  B4D8               	btfsc	status,2,c
  5509  0011FE  D00D               	goto	l563
  5510  001200  0630               	decf	___ftadd@sign,f,c
  5511  001202  C030  F02D         	movff	___ftadd@sign,??___ftadd
  5512  001206  0E07               	movlw	7
  5513  001208  162D               	andwf	??___ftadd,f,c
  5514  00120A  B4D8               	btfsc	status,2,c
  5515  00120C  D006               	goto	l563
  5516  00120E  D7EF               	goto	u2000
  5517  001210  90D8               	bcf	status,0,c
  5518  001212  322C               	rrcf	___ftadd@f2+2,f,c
  5519  001214  322B               	rrcf	___ftadd@f2+1,f,c
  5520  001216  322A               	rrcf	___ftadd@f2,f,c
  5521  001218  2A31               	incf	___ftadd@exp2,f,c
  5522  00121A                     l563:
  5523  00121A  5031               	movf	___ftadd@exp2,w,c
  5524  00121C  1832               	xorwf	___ftadd@exp1,w,c
  5525  00121E  A4D8               	btfss	status,2,c
  5526  001220  D7F7               	goto	l564
  5527  001222                     u2030:
  5528  001222  AE30               	btfss	___ftadd@sign,7,c
  5529  001224  D00C               	goto	l566
  5530  001226  0EFF               	movlw	255
  5531  001228  1A27               	xorwf	___ftadd@f1,f,c
  5532  00122A  0EFF               	movlw	255
  5533  00122C  1A28               	xorwf	___ftadd@f1+1,f,c
  5534  00122E  0EFF               	movlw	255
  5535  001230  1A29               	xorwf	___ftadd@f1+2,f,c
  5536  001232  0E01               	movlw	1
  5537  001234  2627               	addwf	___ftadd@f1,f,c
  5538  001236  0E00               	movlw	0
  5539  001238  2228               	addwfc	___ftadd@f1+1,f,c
  5540  00123A  0E00               	movlw	0
  5541  00123C  2229               	addwfc	___ftadd@f1+2,f,c
  5542  00123E                     l566:
  5543  00123E  AC30               	btfss	___ftadd@sign,6,c
  5544  001240  D00C               	goto	l567
  5545  001242  0EFF               	movlw	255
  5546  001244  1A2A               	xorwf	___ftadd@f2,f,c
  5547  001246  0EFF               	movlw	255
  5548  001248  1A2B               	xorwf	___ftadd@f2+1,f,c
  5549  00124A  0EFF               	movlw	255
  5550  00124C  1A2C               	xorwf	___ftadd@f2+2,f,c
  5551  00124E  0E01               	movlw	1
  5552  001250  262A               	addwf	___ftadd@f2,f,c
  5553  001252  0E00               	movlw	0
  5554  001254  222B               	addwfc	___ftadd@f2+1,f,c
  5555  001256  0E00               	movlw	0
  5556  001258  222C               	addwfc	___ftadd@f2+2,f,c
  5557  00125A                     l567:
  5558  00125A  0E00               	movlw	0
  5559  00125C  6E30               	movwf	___ftadd@sign,c
  5560  00125E  5027               	movf	___ftadd@f1,w,c
  5561  001260  262A               	addwf	___ftadd@f2,f,c
  5562  001262  5028               	movf	___ftadd@f1+1,w,c
  5563  001264  222B               	addwfc	___ftadd@f2+1,f,c
  5564  001266  5029               	movf	___ftadd@f1+2,w,c
  5565  001268  222C               	addwfc	___ftadd@f2+2,f,c
  5566  00126A  AE2C               	btfss	___ftadd@f2+2,7,c
  5567  00126C  D00E               	goto	l568
  5568  00126E  0EFF               	movlw	255
  5569  001270  1A2A               	xorwf	___ftadd@f2,f,c
  5570  001272  0EFF               	movlw	255
  5571  001274  1A2B               	xorwf	___ftadd@f2+1,f,c
  5572  001276  0EFF               	movlw	255
  5573  001278  1A2C               	xorwf	___ftadd@f2+2,f,c
  5574  00127A  0E01               	movlw	1
  5575  00127C  262A               	addwf	___ftadd@f2,f,c
  5576  00127E  0E00               	movlw	0
  5577  001280  222B               	addwfc	___ftadd@f2+1,f,c
  5578  001282  0E00               	movlw	0
  5579  001284  222C               	addwfc	___ftadd@f2+2,f,c
  5580  001286  0E01               	movlw	1
  5581  001288  6E30               	movwf	___ftadd@sign,c
  5582  00128A                     l568:
  5583  00128A  C02A  F001         	movff	___ftadd@f2,___ftpack@arg
  5584  00128E  C02B  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5585  001292  C02C  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5586  001296  C032  F004         	movff	___ftadd@exp1,___ftpack@exp
  5587  00129A  C030  F005         	movff	___ftadd@sign,___ftpack@sign
  5588  00129E  EC7D  F00E         	call	___ftpack	;wreg free
  5589  0012A2  C001  F027         	movff	?___ftpack,?___ftadd
  5590  0012A6  C002  F028         	movff	?___ftpack+1,?___ftadd+1
  5591  0012AA  C003  F029         	movff	?___ftpack+2,?___ftadd+2
  5592  0012AE  0012               	return	
  5593  0012B0                     __end_of___ftadd:
  5594                           	opt stack 0
  5595                           tblptru	equ	0xFF8
  5596                           tblptrh	equ	0xFF7
  5597                           tblptrl	equ	0xFF6
  5598                           tablat	equ	0xFF5
  5599                           prodh	equ	0xFF4
  5600                           prodl	equ	0xFF3
  5601                           intcon	equ	0xFF2
  5602                           postinc0	equ	0xFEE
  5603                           wreg	equ	0xFE8
  5604                           postdec1	equ	0xFE5
  5605                           fsr1h	equ	0xFE2
  5606                           fsr1l	equ	0xFE1
  5607                           indf2	equ	0xFDF
  5608                           postinc2	equ	0xFDE
  5609                           postdec2	equ	0xFDD
  5610                           fsr2h	equ	0xFDA
  5611                           fsr2l	equ	0xFD9
  5612                           status	equ	0xFD8
  5613                           
  5614 ;; *************** function ___ftneg *****************
  5615 ;; Defined at:
  5616 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  5617 ;; Parameters:    Size  Location     Type
  5618 ;;  f1              3    0[COMRAM] float 
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;		None
  5621 ;; Return value:  Size  Location     Type
  5622 ;;                  3    0[COMRAM] float 
  5623 ;; Registers used:
  5624 ;;		wreg, status,2, status,0
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5630 ;;      Params:         3       0       0       0       0       0       0
  5631 ;;      Locals:         0       0       0       0       0       0       0
  5632 ;;      Temps:          0       0       0       0       0       0       0
  5633 ;;      Totals:         3       0       0       0       0       0       0
  5634 ;;Total ram usage:        3 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; This function calls:
  5637 ;;		Nothing
  5638 ;; This function is called by:
  5639 ;;		_strtod
  5640 ;;		_ftoa
  5641 ;; This function uses a non-reentrant model
  5642 ;;
  5643                           
  5644                           	psect	text30
  5645  0023AC                     __ptext30:
  5646                           	opt stack 0
  5647  0023AC                     ___ftneg:
  5648                           	opt stack 27
  5649                           
  5650                           ;incstack = 0
  5651  0023AC  5001               	movf	___ftneg@f1,w,c
  5652  0023AE  1002               	iorwf	___ftneg@f1+1,w,c
  5653  0023B0  1003               	iorwf	___ftneg@f1+2,w,c
  5654  0023B2  B4D8               	btfsc	status,2,c
  5655  0023B4  D006               	goto	l599
  5656  0023B6  0E00               	movlw	0
  5657  0023B8  1A01               	xorwf	___ftneg@f1,f,c
  5658  0023BA  0E00               	movlw	0
  5659  0023BC  1A02               	xorwf	___ftneg@f1+1,f,c
  5660  0023BE  0E80               	movlw	128
  5661  0023C0  1A03               	xorwf	___ftneg@f1+2,f,c
  5662  0023C2                     l599:
  5663  0023C2  C001  F001         	movff	___ftneg@f1,?___ftneg
  5664  0023C6  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5665  0023CA  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5666  0023CE  0012               	return		;funcret
  5667  0023D0                     __end_of___ftneg:
  5668                           	opt stack 0
  5669                           tblptru	equ	0xFF8
  5670                           tblptrh	equ	0xFF7
  5671                           tblptrl	equ	0xFF6
  5672                           tablat	equ	0xFF5
  5673                           prodh	equ	0xFF4
  5674                           prodl	equ	0xFF3
  5675                           intcon	equ	0xFF2
  5676                           postinc0	equ	0xFEE
  5677                           wreg	equ	0xFE8
  5678                           postdec1	equ	0xFE5
  5679                           fsr1h	equ	0xFE2
  5680                           fsr1l	equ	0xFE1
  5681                           indf2	equ	0xFDF
  5682                           postinc2	equ	0xFDE
  5683                           postdec2	equ	0xFDD
  5684                           fsr2h	equ	0xFDA
  5685                           fsr2l	equ	0xFD9
  5686                           status	equ	0xFD8
  5687                           
  5688 ;; *************** function ___ftmul *****************
  5689 ;; Defined at:
  5690 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  5691 ;; Parameters:    Size  Location     Type
  5692 ;;  f1              3    8[COMRAM] float 
  5693 ;;  f2              3   11[COMRAM] float 
  5694 ;; Auto vars:     Size  Location     Type
  5695 ;;  f3_as_produc    3   18[COMRAM] unsigned um
  5696 ;;  sign            1   22[COMRAM] unsigned char 
  5697 ;;  cntr            1   21[COMRAM] unsigned char 
  5698 ;;  exp             1   17[COMRAM] unsigned char 
  5699 ;; Return value:  Size  Location     Type
  5700 ;;                  3    8[COMRAM] float 
  5701 ;; Registers used:
  5702 ;;		wreg, status,2, status,0, cstack
  5703 ;; Tracked objects:
  5704 ;;		On entry : 0/0
  5705 ;;		On exit  : 0/0
  5706 ;;		Unchanged: 0/0
  5707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5708 ;;      Params:         6       0       0       0       0       0       0
  5709 ;;      Locals:         6       0       0       0       0       0       0
  5710 ;;      Temps:          3       0       0       0       0       0       0
  5711 ;;      Totals:        15       0       0       0       0       0       0
  5712 ;;Total ram usage:       15 bytes
  5713 ;; Hardware stack levels used:    1
  5714 ;; Hardware stack levels required when called:    1
  5715 ;; This function calls:
  5716 ;;		___ftpack
  5717 ;; This function is called by:
  5718 ;;		_read_gps
  5719 ;;		_strtod
  5720 ;;		_ftoa
  5721 ;; This function uses a non-reentrant model
  5722 ;;
  5723                           
  5724                           	psect	text31
  5725  001A54                     __ptext31:
  5726                           	opt stack 0
  5727  001A54                     ___ftmul:
  5728                           	opt stack 26
  5729                           
  5730                           ;incstack = 0
  5731  001A54  C00B  F00F         	movff	___ftmul@f1+2,??___ftmul
  5732  001A58  6A10               	clrf	(??___ftmul+1)& (0+255),c
  5733  001A5A  6A11               	clrf	(??___ftmul+2)& (0+255),c
  5734  001A5C  340A               	rlcf	___ftmul@f1+1,w,c
  5735  001A5E  360F               	rlcf	??___ftmul& (0+255),f,c
  5736  001A60  E301               	bnc	u2121
  5737  001A62  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  5738  001A64                     u2121:
  5739  001A64  500F               	movf	??___ftmul,w,c
  5740  001A66  6E12               	movwf	___ftmul@exp,c
  5741  001A68  5012               	movf	___ftmul@exp,w,c
  5742  001A6A  A4D8               	btfss	status,2,c
  5743  001A6C  D007               	goto	l588
  5744  001A6E  0E00               	movlw	0
  5745  001A70  6E09               	movwf	?___ftmul,c
  5746  001A72  0E00               	movlw	0
  5747  001A74  6E0A               	movwf	?___ftmul+1,c
  5748  001A76  0E00               	movlw	0
  5749  001A78  6E0B               	movwf	?___ftmul+2,c
  5750  001A7A  0012               	return	
  5751  001A7C                     l588:
  5752  001A7C  C00E  F00F         	movff	___ftmul@f2+2,??___ftmul
  5753  001A80  6A10               	clrf	(??___ftmul+1)& (0+255),c
  5754  001A82  6A11               	clrf	(??___ftmul+2)& (0+255),c
  5755  001A84  340D               	rlcf	___ftmul@f2+1,w,c
  5756  001A86  360F               	rlcf	??___ftmul& (0+255),f,c
  5757  001A88  E301               	bnc	u2141
  5758  001A8A  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  5759  001A8C                     u2141:
  5760  001A8C  500F               	movf	??___ftmul,w,c
  5761  001A8E  6E17               	movwf	___ftmul@sign,c
  5762  001A90  5017               	movf	___ftmul@sign,w,c
  5763  001A92  A4D8               	btfss	status,2,c
  5764  001A94  D007               	goto	l590
  5765  001A96  0E00               	movlw	0
  5766  001A98  6E09               	movwf	?___ftmul,c
  5767  001A9A  0E00               	movlw	0
  5768  001A9C  6E0A               	movwf	?___ftmul+1,c
  5769  001A9E  0E00               	movlw	0
  5770  001AA0  6E0B               	movwf	?___ftmul+2,c
  5771  001AA2  0012               	return	
  5772  001AA4                     l590:
  5773  001AA4  5017               	movf	___ftmul@sign,w,c
  5774  001AA6  0F7B               	addlw	123
  5775  001AA8  2612               	addwf	___ftmul@exp,f,c
  5776  001AAA  C00B  F017         	movff	___ftmul@f1+2,___ftmul@sign
  5777  001AAE  500E               	movf	___ftmul@f2+2,w,c
  5778  001AB0  1A17               	xorwf	___ftmul@sign,f,c
  5779  001AB2  0E80               	movlw	128
  5780  001AB4  1617               	andwf	___ftmul@sign,f,c
  5781  001AB6  8E0A               	bsf	___ftmul@f1+1,7,c
  5782  001AB8  8E0D               	bsf	___ftmul@f2+1,7,c
  5783  001ABA  0EFF               	movlw	255
  5784  001ABC  160C               	andwf	___ftmul@f2,f,c
  5785  001ABE  0EFF               	movlw	255
  5786  001AC0  160D               	andwf	___ftmul@f2+1,f,c
  5787  001AC2  0E00               	movlw	0
  5788  001AC4  160E               	andwf	___ftmul@f2+2,f,c
  5789  001AC6  0E00               	movlw	0
  5790  001AC8  6E13               	movwf	___ftmul@f3_as_product,c
  5791  001ACA  0E00               	movlw	0
  5792  001ACC  6E14               	movwf	___ftmul@f3_as_product+1,c
  5793  001ACE  0E00               	movlw	0
  5794  001AD0  6E15               	movwf	___ftmul@f3_as_product+2,c
  5795  001AD2  0E07               	movlw	7
  5796  001AD4  6E16               	movwf	___ftmul@cntr,c
  5797  001AD6  A009               	btfss	___ftmul@f1,0,c
  5798  001AD8  D006               	goto	l592
  5799  001ADA  500C               	movf	___ftmul@f2,w,c
  5800  001ADC  2613               	addwf	___ftmul@f3_as_product,f,c
  5801  001ADE  500D               	movf	___ftmul@f2+1,w,c
  5802  001AE0  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  5803  001AE2  500E               	movf	___ftmul@f2+2,w,c
  5804  001AE4  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  5805  001AE6                     l592:
  5806  001AE6  90D8               	bcf	status,0,c
  5807  001AE8  320B               	rrcf	___ftmul@f1+2,f,c
  5808  001AEA  320A               	rrcf	___ftmul@f1+1,f,c
  5809  001AEC  3209               	rrcf	___ftmul@f1,f,c
  5810  001AEE  90D8               	bcf	status,0,c
  5811  001AF0  360C               	rlcf	___ftmul@f2,f,c
  5812  001AF2  360D               	rlcf	___ftmul@f2+1,f,c
  5813  001AF4  360E               	rlcf	___ftmul@f2+2,f,c
  5814  001AF6  2E16               	decfsz	___ftmul@cntr,f,c
  5815  001AF8  D7EE               	goto	l591
  5816  001AFA  0E09               	movlw	9
  5817  001AFC  6E16               	movwf	___ftmul@cntr,c
  5818  001AFE  A009               	btfss	___ftmul@f1,0,c
  5819  001B00  D006               	goto	l595
  5820  001B02  500C               	movf	___ftmul@f2,w,c
  5821  001B04  2613               	addwf	___ftmul@f3_as_product,f,c
  5822  001B06  500D               	movf	___ftmul@f2+1,w,c
  5823  001B08  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  5824  001B0A  500E               	movf	___ftmul@f2+2,w,c
  5825  001B0C  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  5826  001B0E                     l595:
  5827  001B0E  90D8               	bcf	status,0,c
  5828  001B10  320B               	rrcf	___ftmul@f1+2,f,c
  5829  001B12  320A               	rrcf	___ftmul@f1+1,f,c
  5830  001B14  3209               	rrcf	___ftmul@f1,f,c
  5831  001B16  90D8               	bcf	status,0,c
  5832  001B18  3215               	rrcf	___ftmul@f3_as_product+2,f,c
  5833  001B1A  3214               	rrcf	___ftmul@f3_as_product+1,f,c
  5834  001B1C  3213               	rrcf	___ftmul@f3_as_product,f,c
  5835  001B1E  2E16               	decfsz	___ftmul@cntr,f,c
  5836  001B20  D7EE               	goto	l594
  5837  001B22  C013  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5838  001B26  C014  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5839  001B2A  C015  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5840  001B2E  C012  F004         	movff	___ftmul@exp,___ftpack@exp
  5841  001B32  C017  F005         	movff	___ftmul@sign,___ftpack@sign
  5842  001B36  EC7D  F00E         	call	___ftpack	;wreg free
  5843  001B3A  C001  F009         	movff	?___ftpack,?___ftmul
  5844  001B3E  C002  F00A         	movff	?___ftpack+1,?___ftmul+1
  5845  001B42  C003  F00B         	movff	?___ftpack+2,?___ftmul+2
  5846  001B46  0012               	return	
  5847  001B48                     __end_of___ftmul:
  5848                           	opt stack 0
  5849                           tblptru	equ	0xFF8
  5850                           tblptrh	equ	0xFF7
  5851                           tblptrl	equ	0xFF6
  5852                           tablat	equ	0xFF5
  5853                           prodh	equ	0xFF4
  5854                           prodl	equ	0xFF3
  5855                           intcon	equ	0xFF2
  5856                           postinc0	equ	0xFEE
  5857                           wreg	equ	0xFE8
  5858                           postdec1	equ	0xFE5
  5859                           fsr1h	equ	0xFE2
  5860                           fsr1l	equ	0xFE1
  5861                           indf2	equ	0xFDF
  5862                           postinc2	equ	0xFDE
  5863                           postdec2	equ	0xFDD
  5864                           fsr2h	equ	0xFDA
  5865                           fsr2l	equ	0xFD9
  5866                           status	equ	0xFD8
  5867                           
  5868 ;; *************** function ___ftpack *****************
  5869 ;; Defined at:
  5870 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  5871 ;; Parameters:    Size  Location     Type
  5872 ;;  arg             3    0[COMRAM] unsigned um
  5873 ;;  exp             1    3[COMRAM] unsigned char 
  5874 ;;  sign            1    4[COMRAM] unsigned char 
  5875 ;; Auto vars:     Size  Location     Type
  5876 ;;		None
  5877 ;; Return value:  Size  Location     Type
  5878 ;;                  3    0[COMRAM] float 
  5879 ;; Registers used:
  5880 ;;		wreg, status,2, status,0
  5881 ;; Tracked objects:
  5882 ;;		On entry : 0/0
  5883 ;;		On exit  : 0/0
  5884 ;;		Unchanged: 0/0
  5885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5886 ;;      Params:         5       0       0       0       0       0       0
  5887 ;;      Locals:         0       0       0       0       0       0       0
  5888 ;;      Temps:          3       0       0       0       0       0       0
  5889 ;;      Totals:         8       0       0       0       0       0       0
  5890 ;;Total ram usage:        8 bytes
  5891 ;; Hardware stack levels used:    1
  5892 ;; This function calls:
  5893 ;;		Nothing
  5894 ;; This function is called by:
  5895 ;;		___altoft
  5896 ;;		___ftadd
  5897 ;;		___ftdiv
  5898 ;;		___ftmul
  5899 ;;		___lltoft
  5900 ;; This function uses a non-reentrant model
  5901 ;;
  5902                           
  5903                           	psect	text32
  5904  001CFA                     __ptext32:
  5905                           	opt stack 0
  5906  001CFA                     ___ftpack:
  5907                           	opt stack 26
  5908                           
  5909                           ;incstack = 0
  5910  001CFA  5004               	movf	___ftpack@exp,w,c
  5911  001CFC  B4D8               	btfsc	status,2,c
  5912  001CFE  D005               	goto	u1730
  5913  001D00  5001               	movf	___ftpack@arg,w,c
  5914  001D02  1002               	iorwf	___ftpack@arg+1,w,c
  5915  001D04  1003               	iorwf	___ftpack@arg+2,w,c
  5916  001D06  A4D8               	btfss	status,2,c
  5917  001D08  D00C               	goto	l509
  5918  001D0A                     u1730:
  5919  001D0A  0E00               	movlw	0
  5920  001D0C  6E01               	movwf	?___ftpack,c
  5921  001D0E  0E00               	movlw	0
  5922  001D10  6E02               	movwf	?___ftpack+1,c
  5923  001D12  0E00               	movlw	0
  5924  001D14  6E03               	movwf	?___ftpack+2,c
  5925  001D16  0012               	return	
  5926  001D18  2A04               	incf	___ftpack@exp,f,c
  5927  001D1A  90D8               	bcf	status,0,c
  5928  001D1C  3203               	rrcf	___ftpack@arg+2,f,c
  5929  001D1E  3202               	rrcf	___ftpack@arg+1,f,c
  5930  001D20  3201               	rrcf	___ftpack@arg,f,c
  5931  001D22                     l509:
  5932  001D22  0E00               	movlw	0
  5933  001D24  1401               	andwf	___ftpack@arg,w,c
  5934  001D26  6E06               	movwf	??___ftpack& (0+255),c
  5935  001D28  0E00               	movlw	0
  5936  001D2A  1402               	andwf	___ftpack@arg+1,w,c
  5937  001D2C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5938  001D2E  0EFE               	movlw	254
  5939  001D30  1403               	andwf	___ftpack@arg+2,w,c
  5940  001D32  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5941  001D34  5006               	movf	??___ftpack,w,c
  5942  001D36  1007               	iorwf	??___ftpack+1,w,c
  5943  001D38  1008               	iorwf	??___ftpack+2,w,c
  5944  001D3A  B4D8               	btfsc	status,2,c
  5945  001D3C  D00C               	goto	l512
  5946  001D3E  D7EC               	goto	l510
  5947  001D40  2A04               	incf	___ftpack@exp,f,c
  5948  001D42  0E01               	movlw	1
  5949  001D44  2601               	addwf	___ftpack@arg,f,c
  5950  001D46  0E00               	movlw	0
  5951  001D48  2202               	addwfc	___ftpack@arg+1,f,c
  5952  001D4A  0E00               	movlw	0
  5953  001D4C  2203               	addwfc	___ftpack@arg+2,f,c
  5954  001D4E  90D8               	bcf	status,0,c
  5955  001D50  3203               	rrcf	___ftpack@arg+2,f,c
  5956  001D52  3202               	rrcf	___ftpack@arg+1,f,c
  5957  001D54  3201               	rrcf	___ftpack@arg,f,c
  5958  001D56                     l512:
  5959  001D56  0E00               	movlw	0
  5960  001D58  1401               	andwf	___ftpack@arg,w,c
  5961  001D5A  6E06               	movwf	??___ftpack& (0+255),c
  5962  001D5C  0E00               	movlw	0
  5963  001D5E  1402               	andwf	___ftpack@arg+1,w,c
  5964  001D60  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5965  001D62  0EFF               	movlw	255
  5966  001D64  1403               	andwf	___ftpack@arg+2,w,c
  5967  001D66  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5968  001D68  5006               	movf	??___ftpack,w,c
  5969  001D6A  1007               	iorwf	??___ftpack+1,w,c
  5970  001D6C  1008               	iorwf	??___ftpack+2,w,c
  5971  001D6E  B4D8               	btfsc	status,2,c
  5972  001D70  D006               	goto	l515
  5973  001D72  D7E6               	goto	l513
  5974  001D74  0604               	decf	___ftpack@exp,f,c
  5975  001D76  90D8               	bcf	status,0,c
  5976  001D78  3601               	rlcf	___ftpack@arg,f,c
  5977  001D7A  3602               	rlcf	___ftpack@arg+1,f,c
  5978  001D7C  3603               	rlcf	___ftpack@arg+2,f,c
  5979  001D7E                     l515:
  5980  001D7E  BE02               	btfsc	___ftpack@arg+1,7,c
  5981  001D80  D003               	goto	u1770
  5982  001D82  0E02               	movlw	2
  5983  001D84  6004               	cpfslt	___ftpack@exp,c
  5984  001D86  D7F6               	goto	l516
  5985  001D88                     u1770:
  5986  001D88  A004               	btfss	___ftpack@exp,0,c
  5987  001D8A  9E02               	bcf	___ftpack@arg+1,7,c
  5988  001D8C  90D8               	bcf	status,0,c
  5989  001D8E  3204               	rrcf	___ftpack@exp,f,c
  5990  001D90  5004               	movf	___ftpack@exp,w,c
  5991  001D92  1203               	iorwf	___ftpack@arg+2,f,c
  5992  001D94  5005               	movf	___ftpack@sign,w,c
  5993  001D96  A4D8               	btfss	status,2,c
  5994  001D98  8E03               	bsf	___ftpack@arg+2,7,c
  5995  001D9A  C001  F001         	movff	___ftpack@arg,?___ftpack
  5996  001D9E  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5997  001DA2  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5998  001DA6  0012               	return	
  5999  001DA8                     __end_of___ftpack:
  6000                           	opt stack 0
  6001                           tblptru	equ	0xFF8
  6002                           tblptrh	equ	0xFF7
  6003                           tblptrl	equ	0xFF6
  6004                           tablat	equ	0xFF5
  6005                           prodh	equ	0xFF4
  6006                           prodl	equ	0xFF3
  6007                           intcon	equ	0xFF2
  6008                           postinc0	equ	0xFEE
  6009                           wreg	equ	0xFE8
  6010                           postdec1	equ	0xFE5
  6011                           fsr1h	equ	0xFE2
  6012                           fsr1l	equ	0xFE1
  6013                           indf2	equ	0xFDF
  6014                           postinc2	equ	0xFDE
  6015                           postdec2	equ	0xFDD
  6016                           fsr2h	equ	0xFDA
  6017                           fsr2l	equ	0xFD9
  6018                           status	equ	0xFD8
  6019                           
  6020 ;; *************** function _LCD_String *****************
  6021 ;; Defined at:
  6022 ;;		line 168 in file "lcd.h"
  6023 ;; Parameters:    Size  Location     Type
  6024 ;;  str             2    3[COMRAM] PTR const unsigned char 
  6025 ;;		 -> ftoa@buf(17), 
  6026 ;; Auto vars:     Size  Location     Type
  6027 ;;  i               2    0        int 
  6028 ;; Return value:  Size  Location     Type
  6029 ;;                  1    wreg      void 
  6030 ;; Registers used:
  6031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6032 ;; Tracked objects:
  6033 ;;		On entry : 0/0
  6034 ;;		On exit  : 0/0
  6035 ;;		Unchanged: 0/0
  6036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6037 ;;      Params:         2       0       0       0       0       0       0
  6038 ;;      Locals:         0       0       0       0       0       0       0
  6039 ;;      Temps:          0       0       0       0       0       0       0
  6040 ;;      Totals:         2       0       0       0       0       0       0
  6041 ;;Total ram usage:        2 bytes
  6042 ;; Hardware stack levels used:    1
  6043 ;; Hardware stack levels required when called:    1
  6044 ;; This function calls:
  6045 ;;		_Lcd_Chr_CP
  6046 ;; This function is called by:
  6047 ;;		_Lcd_Write_Float
  6048 ;; This function uses a non-reentrant model
  6049 ;;
  6050                           
  6051                           	psect	text33
  6052  0023D0                     __ptext33:
  6053                           	opt stack 0
  6054  0023D0                     _LCD_String:
  6055                           	opt stack 28
  6056                           
  6057                           ;lcd.h: 170: int i;
  6058                           ;lcd.h: 171: while((*str)!=0)
  6059                           
  6060                           ;incstack = 0
  6061  0023D0  D009               	goto	l97
  6062  0023D2                     
  6063                           ;lcd.h: 172: {
  6064                           ;lcd.h: 173: Lcd_Chr_CP (*str);
  6065  0023D2  C004  FFD9         	movff	LCD_String@str,fsr2l
  6066  0023D6  C005  FFDA         	movff	LCD_String@str+1,fsr2h
  6067  0023DA  50DF               	movf	indf2,w,c
  6068  0023DC  EC58  F009         	call	_Lcd_Chr_CP
  6069                           
  6070                           ;lcd.h: 174: str++;
  6071  0023E0  4A04               	infsnz	LCD_String@str,f,c
  6072  0023E2  2A05               	incf	LCD_String@str+1,f,c
  6073  0023E4                     l97:
  6074  0023E4  C004  FFD9         	movff	LCD_String@str,fsr2l
  6075  0023E8  C005  FFDA         	movff	LCD_String@str+1,fsr2h
  6076  0023EC  50DF               	movf	indf2,w,c
  6077  0023EE  B4D8               	btfsc	status,2,c
  6078  0023F0  0012               	return	
  6079  0023F2  D7EF               	goto	l98
  6080  0023F4                     __end_of_LCD_String:
  6081                           	opt stack 0
  6082                           tblptru	equ	0xFF8
  6083                           tblptrh	equ	0xFF7
  6084                           tblptrl	equ	0xFF6
  6085                           tablat	equ	0xFF5
  6086                           prodh	equ	0xFF4
  6087                           prodl	equ	0xFF3
  6088                           intcon	equ	0xFF2
  6089                           postinc0	equ	0xFEE
  6090                           wreg	equ	0xFE8
  6091                           postdec1	equ	0xFE5
  6092                           fsr1h	equ	0xFE2
  6093                           fsr1l	equ	0xFE1
  6094                           indf2	equ	0xFDF
  6095                           postinc2	equ	0xFDE
  6096                           postdec2	equ	0xFDD
  6097                           fsr2h	equ	0xFDA
  6098                           fsr2l	equ	0xFD9
  6099                           status	equ	0xFD8
  6100                           
  6101 ;; *************** function _Lcd_Out *****************
  6102 ;; Defined at:
  6103 ;;		line 97 in file "lcd.h"
  6104 ;; Parameters:    Size  Location     Type
  6105 ;;  y               1    wreg     unsigned char 
  6106 ;;  x               1    3[COMRAM] unsigned char 
  6107 ;;  buffer          2    4[COMRAM] PTR const unsigned char 
  6108 ;;		 -> STR_5(1), STR_4(1), STR_3(16), STR_2(17), 
  6109 ;;		 -> STR_1(18), 
  6110 ;; Auto vars:     Size  Location     Type
  6111 ;;  y               1    6[COMRAM] unsigned char 
  6112 ;;  data            1    7[COMRAM] unsigned char 
  6113 ;; Return value:  Size  Location     Type
  6114 ;;                  1    wreg      void 
  6115 ;; Registers used:
  6116 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6117 ;; Tracked objects:
  6118 ;;		On entry : 0/0
  6119 ;;		On exit  : 0/0
  6120 ;;		Unchanged: 0/0
  6121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6122 ;;      Params:         3       0       0       0       0       0       0
  6123 ;;      Locals:         2       0       0       0       0       0       0
  6124 ;;      Temps:          0       0       0       0       0       0       0
  6125 ;;      Totals:         5       0       0       0       0       0       0
  6126 ;;Total ram usage:        5 bytes
  6127 ;; Hardware stack levels used:    1
  6128 ;; Hardware stack levels required when called:    1
  6129 ;; This function calls:
  6130 ;;		_Lcd_Chr_CP
  6131 ;;		_Lcd_Cmd
  6132 ;; This function is called by:
  6133 ;;		_main
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137                           	psect	text34
  6138  002038                     __ptext34:
  6139                           	opt stack 0
  6140  002038                     _Lcd_Out:
  6141                           	opt stack 29
  6142                           
  6143                           ;incstack = 0
  6144                           ;Lcd_Out@y stored from wreg
  6145  002038  6E07               	movwf	Lcd_Out@y,c
  6146                           
  6147                           ;lcd.h: 99: unsigned char data;
  6148                           ;lcd.h: 101: switch (y)
  6149  00203A  D00D               	goto	l64
  6150  00203C  5004               	movf	Lcd_Out@x,w,c
  6151  00203E  0F80               	addlw	128
  6152  002040  D008               	goto	L4
  6153  002042  5004               	movf	Lcd_Out@x,w,c
  6154  002044  0FC0               	addlw	192
  6155  002046  D005               	goto	L4
  6156  002048  5004               	movf	Lcd_Out@x,w,c
  6157  00204A  0F94               	addlw	148
  6158  00204C  D002               	goto	L4
  6159  00204E  5004               	movf	Lcd_Out@x,w,c
  6160  002050  0FD4               	addlw	212
  6161  002052                     L4:
  6162  002052  6E08               	movwf	Lcd_Out@data,c
  6163                           
  6164                           ;lcd.h: 108: }
  6165                           
  6166                           ;lcd.h: 107: default: break;
  6167  002054  D00D               	goto	l66
  6168  002056                     l64:
  6169  002056  5007               	movf	Lcd_Out@y,w,c
  6170                           
  6171                           ; Switch size 1, requested type "space"
  6172                           ; Number of cases is 4, Range of values is 1 to 4
  6173                           ; switch strategies available:
  6174                           ; Name         Instructions Cycles
  6175                           ; simple_byte           13     7 (average)
  6176                           ;	Chosen strategy is simple_byte
  6177  002058  0A01               	xorlw	1	; case 1
  6178  00205A  B4D8               	btfsc	status,2,c
  6179  00205C  D7EF               	goto	l65
  6180  00205E  0A03               	xorlw	3	; case 2
  6181  002060  B4D8               	btfsc	status,2,c
  6182  002062  D7EF               	goto	l67
  6183  002064  0A01               	xorlw	1	; case 3
  6184  002066  B4D8               	btfsc	status,2,c
  6185  002068  D7EF               	goto	l68
  6186  00206A  0A07               	xorlw	7	; case 4
  6187  00206C  B4D8               	btfsc	status,2,c
  6188  00206E  D7EF               	goto	l69
  6189  002070                     l66:
  6190                           
  6191                           ;lcd.h: 109: Lcd_Cmd(data);
  6192  002070  5008               	movf	Lcd_Out@data,w,c
  6193  002072  EC8C  F00A         	call	_Lcd_Cmd
  6194                           
  6195                           ;lcd.h: 110: while(*buffer)
  6196  002076  D00A               	goto	l71
  6197  002078                     
  6198                           ;lcd.h: 111: {
  6199                           ;lcd.h: 112: Lcd_Chr_CP(*buffer);
  6200  002078  C005  FFF6         	movff	Lcd_Out@buffer,tblptrl
  6201  00207C  C006  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  6202  002080                     	if	0	;tblptru may be non-zero
  6203  002080                     	endif
  6204  002080                     	if	0	;tblptru may be non-zero
  6205  002080                     	endif
  6206  002080  0008               	tblrd		*
  6207  002082  50F5               	movf	tablat,w,c
  6208  002084  EC58  F009         	call	_Lcd_Chr_CP
  6209                           
  6210                           ;lcd.h: 113: buffer++;
  6211  002088  4A05               	infsnz	Lcd_Out@buffer,f,c
  6212  00208A  2A06               	incf	Lcd_Out@buffer+1,f,c
  6213  00208C                     l71:
  6214  00208C  C005  FFF6         	movff	Lcd_Out@buffer,tblptrl
  6215  002090  C006  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  6216  002094                     	if	0	;tblptru may be non-zero
  6217  002094                     	endif
  6218  002094                     	if	0	;tblptru may be non-zero
  6219  002094                     	endif
  6220  002094  0008               	tblrd		*
  6221  002096  50F5               	movf	tablat,w,c
  6222  002098  0900               	iorlw	0
  6223  00209A  B4D8               	btfsc	status,2,c
  6224  00209C  0012               	return	
  6225  00209E  D7EC               	goto	l72
  6226  0020A0                     __end_of_Lcd_Out:
  6227                           	opt stack 0
  6228                           tblptru	equ	0xFF8
  6229                           tblptrh	equ	0xFF7
  6230                           tblptrl	equ	0xFF6
  6231                           tablat	equ	0xFF5
  6232                           prodh	equ	0xFF4
  6233                           prodl	equ	0xFF3
  6234                           intcon	equ	0xFF2
  6235                           postinc0	equ	0xFEE
  6236                           wreg	equ	0xFE8
  6237                           postdec1	equ	0xFE5
  6238                           fsr1h	equ	0xFE2
  6239                           fsr1l	equ	0xFE1
  6240                           indf2	equ	0xFDF
  6241                           postinc2	equ	0xFDE
  6242                           postdec2	equ	0xFDD
  6243                           fsr2h	equ	0xFDA
  6244                           fsr2l	equ	0xFD9
  6245                           status	equ	0xFD8
  6246                           
  6247 ;; *************** function _Lcd_Chr_CP *****************
  6248 ;; Defined at:
  6249 ;;		line 139 in file "lcd.h"
  6250 ;; Parameters:    Size  Location     Type
  6251 ;;  data            1    wreg     unsigned char 
  6252 ;; Auto vars:     Size  Location     Type
  6253 ;;  data            1    2[COMRAM] unsigned char 
  6254 ;; Return value:  Size  Location     Type
  6255 ;;                  1    wreg      void 
  6256 ;; Registers used:
  6257 ;;		wreg, status,2, status,0
  6258 ;; Tracked objects:
  6259 ;;		On entry : 0/0
  6260 ;;		On exit  : 0/0
  6261 ;;		Unchanged: 0/0
  6262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6263 ;;      Params:         0       0       0       0       0       0       0
  6264 ;;      Locals:         1       0       0       0       0       0       0
  6265 ;;      Temps:          2       0       0       0       0       0       0
  6266 ;;      Totals:         3       0       0       0       0       0       0
  6267 ;;Total ram usage:        3 bytes
  6268 ;; Hardware stack levels used:    1
  6269 ;; This function calls:
  6270 ;;		Nothing
  6271 ;; This function is called by:
  6272 ;;		_Lcd_Out
  6273 ;;		_LCD_String
  6274 ;;		_Lcd_Out2
  6275 ;; This function uses a non-reentrant model
  6276 ;;
  6277                           
  6278                           	psect	text35
  6279  0012B0                     __ptext35:
  6280                           	opt stack 0
  6281  0012B0                     _Lcd_Chr_CP:
  6282                           	opt stack 28
  6283                           
  6284                           ;incstack = 0
  6285                           ;Lcd_Chr_CP@data stored from wreg
  6286  0012B0  6E03               	movwf	Lcd_Chr_CP@data,c
  6287                           
  6288                           ;lcd.h: 141: if (data=='ñ') data=238;
  6289  0012B2  0EF1               	movlw	241
  6290  0012B4  1803               	xorwf	Lcd_Chr_CP@data,w,c
  6291  0012B6  A4D8               	btfss	status,2,c
  6292  0012B8  D002               	goto	l90
  6293  0012BA  0EEE               	movlw	238
  6294  0012BC  6E03               	movwf	Lcd_Chr_CP@data,c
  6295  0012BE                     l90:
  6296                           
  6297                           ;lcd.h: 142: PORTDbits.RD0 = 0; PORTDbits.RD1 = 1;
  6298  0012BE  9083               	bcf	3971,0,c	;volatile
  6299  0012C0  8283               	bsf	3971,1,c	;volatile
  6300                           
  6301                           ;lcd.h: 143: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b01000000)
      +                          >>6;
  6302  0012C2  6A01               	clrf	??_Lcd_Chr_CP& (0+255),c
  6303  0012C4  AE03               	btfss	Lcd_Chr_CP@data,7,c
  6304  0012C6  D001               	bra	u2325
  6305  0012C8  2A01               	incf	??_Lcd_Chr_CP& (0+255),f,c
  6306  0012CA                     u2325:
  6307  0012CA  0E01               	movlw	1
  6308  0012CC  1601               	andwf	??_Lcd_Chr_CP,f,c
  6309  0012CE  3201               	rrcf	??_Lcd_Chr_CP,f,c
  6310  0012D0  3201               	rrcf	??_Lcd_Chr_CP,f,c
  6311  0012D2  5083               	movf	3971,w,c	;volatile
  6312  0012D4  1801               	xorwf	??_Lcd_Chr_CP,w,c
  6313  0012D6  0B7F               	andlw	-129
  6314  0012D8  1801               	xorwf	??_Lcd_Chr_CP,w,c
  6315  0012DA  6E83               	movwf	3971,c	;volatile
  6316  0012DC  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  6317  0012E0  0E06               	movlw	6
  6318  0012E2  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  6319  0012E4                     u2335:
  6320  0012E4  90D8               	bcf	status,0,c
  6321  0012E6  3201               	rrcf	??_Lcd_Chr_CP,f,c
  6322  0012E8  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  6323  0012EA  D7FC               	goto	u2335
  6324  0012EC  0E01               	movlw	1
  6325  0012EE  1601               	andwf	??_Lcd_Chr_CP,f,c
  6326  0012F0  3A01               	swapf	??_Lcd_Chr_CP,f,c
  6327  0012F2  4601               	rlncf	??_Lcd_Chr_CP,f,c
  6328  0012F4  4601               	rlncf	??_Lcd_Chr_CP,f,c
  6329  0012F6  5083               	movf	3971,w,c	;volatile
  6330  0012F8  1801               	xorwf	??_Lcd_Chr_CP,w,c
  6331  0012FA  0BBF               	andlw	-65
  6332  0012FC  1801               	xorwf	??_Lcd_Chr_CP,w,c
  6333  0012FE  6E83               	movwf	3971,c	;volatile
  6334                           
  6335                           ;lcd.h: 144: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b00010000)
      +                          >>4;
  6336  001300  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  6337  001304  0E05               	movlw	5
  6338  001306  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  6339  001308                     u2345:
  6340  001308  90D8               	bcf	status,0,c
  6341  00130A  3201               	rrcf	??_Lcd_Chr_CP,f,c
  6342  00130C  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  6343  00130E  D7FC               	goto	u2345
  6344  001310  0E01               	movlw	1
  6345  001312  1601               	andwf	??_Lcd_Chr_CP,f,c
  6346  001314  3A01               	swapf	??_Lcd_Chr_CP,f,c
  6347  001316  4601               	rlncf	??_Lcd_Chr_CP,f,c
  6348  001318  5083               	movf	3971,w,c	;volatile
  6349  00131A  1801               	xorwf	??_Lcd_Chr_CP,w,c
  6350  00131C  0BDF               	andlw	-33
  6351  00131E  1801               	xorwf	??_Lcd_Chr_CP,w,c
  6352  001320  6E83               	movwf	3971,c	;volatile
  6353  001322  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  6354  001326  3A01               	swapf	??_Lcd_Chr_CP,f,c
  6355  001328  0E0F               	movlw	15
  6356  00132A  1601               	andwf	??_Lcd_Chr_CP,f,c
  6357  00132C  0E01               	movlw	1
  6358  00132E  1601               	andwf	??_Lcd_Chr_CP,f,c
  6359  001330  3A01               	swapf	??_Lcd_Chr_CP,f,c
  6360  001332  5083               	movf	3971,w,c	;volatile
  6361  001334  1801               	xorwf	??_Lcd_Chr_CP,w,c
  6362  001336  0BEF               	andlw	-17
  6363  001338  1801               	xorwf	??_Lcd_Chr_CP,w,c
  6364  00133A  6E83               	movwf	3971,c	;volatile
  6365                           
  6366                           ;lcd.h: 145: _delay(10);
  6367  00133C  0E03               	movlw	3
  6368  00133E                     u3387:
  6369  00133E  2EE8               	decfsz	wreg,f,c
  6370  001340  D7FE               	bra	u3387
  6371  001342  F000               	nop	
  6372                           
  6373                           ;lcd.h: 146: PORTDbits.RD0 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PORTDb
      +                          its.RD0 = 0;
  6374  001344  8083               	bsf	3971,0,c	;volatile
  6375  001346  0E03               	movlw	3
  6376  001348                     u3397:
  6377  001348  2EE8               	decfsz	wreg,f,c
  6378  00134A  D7FE               	bra	u3397
  6379  00134C  F000               	nop	
  6380  00134E  9083               	bcf	3971,0,c	;volatile
  6381                           
  6382                           ;lcd.h: 147: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b00000100)
      +                          >>2;
  6383  001350  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  6384  001354  90D8               	bcf	status,0,c
  6385  001356  3201               	rrcf	??_Lcd_Chr_CP,f,c
  6386  001358  90D8               	bcf	status,0,c
  6387  00135A  3201               	rrcf	??_Lcd_Chr_CP,f,c
  6388  00135C  90D8               	bcf	status,0,c
  6389  00135E  3201               	rrcf	??_Lcd_Chr_CP,f,c
  6390  001360  0E01               	movlw	1
  6391  001362  1601               	andwf	??_Lcd_Chr_CP,f,c
  6392  001364  3201               	rrcf	??_Lcd_Chr_CP,f,c
  6393  001366  3201               	rrcf	??_Lcd_Chr_CP,f,c
  6394  001368  5083               	movf	3971,w,c	;volatile
  6395  00136A  1801               	xorwf	??_Lcd_Chr_CP,w,c
  6396  00136C  0B7F               	andlw	-129
  6397  00136E  1801               	xorwf	??_Lcd_Chr_CP,w,c
  6398  001370  6E83               	movwf	3971,c	;volatile
  6399  001372  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  6400  001376  90D8               	bcf	status,0,c
  6401  001378  3201               	rrcf	??_Lcd_Chr_CP,f,c
  6402  00137A  90D8               	bcf	status,0,c
  6403  00137C  3201               	rrcf	??_Lcd_Chr_CP,f,c
  6404  00137E  0E01               	movlw	1
  6405  001380  1601               	andwf	??_Lcd_Chr_CP,f,c
  6406  001382  3A01               	swapf	??_Lcd_Chr_CP,f,c
  6407  001384  4601               	rlncf	??_Lcd_Chr_CP,f,c
  6408  001386  4601               	rlncf	??_Lcd_Chr_CP,f,c
  6409  001388  5083               	movf	3971,w,c	;volatile
  6410  00138A  1801               	xorwf	??_Lcd_Chr_CP,w,c
  6411  00138C  0BBF               	andlw	-65
  6412  00138E  1801               	xorwf	??_Lcd_Chr_CP,w,c
  6413  001390  6E83               	movwf	3971,c	;volatile
  6414                           
  6415                           ;lcd.h: 148: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b00000001)
      +                          ;
  6416  001392  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  6417  001396  90D8               	bcf	status,0,c
  6418  001398  3201               	rrcf	??_Lcd_Chr_CP,f,c
  6419  00139A  0E01               	movlw	1
  6420  00139C  1601               	andwf	??_Lcd_Chr_CP,f,c
  6421  00139E  3A01               	swapf	??_Lcd_Chr_CP,f,c
  6422  0013A0  4601               	rlncf	??_Lcd_Chr_CP,f,c
  6423  0013A2  5083               	movf	3971,w,c	;volatile
  6424  0013A4  1801               	xorwf	??_Lcd_Chr_CP,w,c
  6425  0013A6  0BDF               	andlw	-33
  6426  0013A8  1801               	xorwf	??_Lcd_Chr_CP,w,c
  6427  0013AA  6E83               	movwf	3971,c	;volatile
  6428  0013AC  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  6429  0013B0  0E01               	movlw	1
  6430  0013B2  1601               	andwf	??_Lcd_Chr_CP,f,c
  6431  0013B4  3A01               	swapf	??_Lcd_Chr_CP,f,c
  6432  0013B6  5083               	movf	3971,w,c	;volatile
  6433  0013B8  1801               	xorwf	??_Lcd_Chr_CP,w,c
  6434  0013BA  0BEF               	andlw	-17
  6435  0013BC  1801               	xorwf	??_Lcd_Chr_CP,w,c
  6436  0013BE  6E83               	movwf	3971,c	;volatile
  6437                           
  6438                           ;lcd.h: 149: _delay(10);
  6439  0013C0  0E03               	movlw	3
  6440  0013C2                     u3407:
  6441  0013C2  2EE8               	decfsz	wreg,f,c
  6442  0013C4  D7FE               	bra	u3407
  6443  0013C6  F000               	nop	
  6444                           
  6445                           ;lcd.h: 150: PORTDbits.RD0 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PORTDb
      +                          its.RD0 = 0;
  6446  0013C8  8083               	bsf	3971,0,c	;volatile
  6447  0013CA  0E03               	movlw	3
  6448  0013CC                     u3417:
  6449  0013CC  2EE8               	decfsz	wreg,f,c
  6450  0013CE  D7FE               	bra	u3417
  6451  0013D0  F000               	nop	
  6452  0013D2  9083               	bcf	3971,0,c	;volatile
  6453                           
  6454                           ;lcd.h: 151: _delay((unsigned long)((5)*(8000000/4000000.0))); _delay((unsigned long)((5
      +                          500)*(8000000/4000000.0)));
  6455  0013D4  0E03               	movlw	3
  6456  0013D6                     u3427:
  6457  0013D6  2EE8               	decfsz	wreg,f,c
  6458  0013D8  D7FE               	bra	u3427
  6459  0013DA  F000               	nop	
  6460  0013DC  0E0F               	movlw	15
  6461  0013DE  6E01               	movwf	??_Lcd_Chr_CP& (0+255),c
  6462  0013E0  0E48               	movlw	72
  6463  0013E2                     u3437:
  6464  0013E2  2EE8               	decfsz	wreg,f,c
  6465  0013E4  D7FE               	bra	u3437
  6466  0013E6  2E01               	decfsz	??_Lcd_Chr_CP& (0+255),f,c
  6467  0013E8  D7FC               	bra	u3437
  6468  0013EA  0012               	return		;funcret
  6469  0013EC                     __end_of_Lcd_Chr_CP:
  6470                           	opt stack 0
  6471                           tblptru	equ	0xFF8
  6472                           tblptrh	equ	0xFF7
  6473                           tblptrl	equ	0xFF6
  6474                           tablat	equ	0xFF5
  6475                           prodh	equ	0xFF4
  6476                           prodl	equ	0xFF3
  6477                           intcon	equ	0xFF2
  6478                           postinc0	equ	0xFEE
  6479                           wreg	equ	0xFE8
  6480                           postdec1	equ	0xFE5
  6481                           fsr1h	equ	0xFE2
  6482                           fsr1l	equ	0xFE1
  6483                           indf2	equ	0xFDF
  6484                           postinc2	equ	0xFDE
  6485                           postdec2	equ	0xFDD
  6486                           fsr2h	equ	0xFDA
  6487                           fsr2l	equ	0xFD9
  6488                           status	equ	0xFD8
  6489                           
  6490 ;; *************** function _Lcd_Init *****************
  6491 ;; Defined at:
  6492 ;;		line 54 in file "lcd.h"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;		None
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;  data            1    4[COMRAM] unsigned char 
  6497 ;; Return value:  Size  Location     Type
  6498 ;;                  1    wreg      void 
  6499 ;; Registers used:
  6500 ;;		wreg, status,2, status,0, cstack
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6506 ;;      Params:         0       0       0       0       0       0       0
  6507 ;;      Locals:         1       0       0       0       0       0       0
  6508 ;;      Temps:          1       0       0       0       0       0       0
  6509 ;;      Totals:         2       0       0       0       0       0       0
  6510 ;;Total ram usage:        2 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    1
  6513 ;; This function calls:
  6514 ;;		_Lcd_Cmd
  6515 ;; This function is called by:
  6516 ;;		_main
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           	psect	text36
  6521  001640                     __ptext36:
  6522                           	opt stack 0
  6523  001640                     _Lcd_Init:
  6524                           	opt stack 29
  6525                           
  6526                           ;lcd.h: 56: unsigned char data;
  6527                           ;lcd.h: 57: TRISDbits.TRISD7 = 0;
  6528                           
  6529                           ;incstack = 0
  6530  001640  9E95               	bcf	3989,7,c	;volatile
  6531                           
  6532                           ;lcd.h: 58: TRISDbits.TRISD6 = 0;
  6533  001642  9C95               	bcf	3989,6,c	;volatile
  6534                           
  6535                           ;lcd.h: 59: TRISDbits.TRISD5 = 0;
  6536  001644  9A95               	bcf	3989,5,c	;volatile
  6537                           
  6538                           ;lcd.h: 60: TRISDbits.TRISD4 = 0;
  6539  001646  9895               	bcf	3989,4,c	;volatile
  6540                           
  6541                           ;lcd.h: 61: TRISDbits.TRISD0 = 0;
  6542  001648  9095               	bcf	3989,0,c	;volatile
  6543                           
  6544                           ;lcd.h: 62: TRISDbits.TRISD1 = 0;
  6545  00164A  9295               	bcf	3989,1,c	;volatile
  6546                           
  6547                           ;lcd.h: 63: PORTDbits.RD7 = 0;
  6548  00164C  9E83               	bcf	3971,7,c	;volatile
  6549                           
  6550                           ;lcd.h: 64: PORTDbits.RD6 = 0;
  6551  00164E  9C83               	bcf	3971,6,c	;volatile
  6552                           
  6553                           ;lcd.h: 65: PORTDbits.RD5 = 0;
  6554  001650  9A83               	bcf	3971,5,c	;volatile
  6555                           
  6556                           ;lcd.h: 66: PORTDbits.RD4 = 0;
  6557  001652  9883               	bcf	3971,4,c	;volatile
  6558                           
  6559                           ;lcd.h: 67: PORTDbits.RD0 = 0;
  6560  001654  9083               	bcf	3971,0,c	;volatile
  6561                           
  6562                           ;lcd.h: 68: PORTDbits.RD1 = 0;
  6563  001656  9283               	bcf	3971,1,c	;volatile
  6564                           
  6565                           ;lcd.h: 69: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6566  001658  0E0F               	movlw	15
  6567  00165A  6E04               	movwf	??_Lcd_Init& (0+255),c
  6568  00165C  0E48               	movlw	72
  6569  00165E                     u3447:
  6570  00165E  2EE8               	decfsz	wreg,f,c
  6571  001660  D7FE               	bra	u3447
  6572  001662  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6573  001664  D7FC               	bra	u3447
  6574                           
  6575                           ;lcd.h: 70: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6576  001666  0E0F               	movlw	15
  6577  001668  6E04               	movwf	??_Lcd_Init& (0+255),c
  6578  00166A  0E48               	movlw	72
  6579  00166C                     u3457:
  6580  00166C  2EE8               	decfsz	wreg,f,c
  6581  00166E  D7FE               	bra	u3457
  6582  001670  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6583  001672  D7FC               	bra	u3457
  6584                           
  6585                           ;lcd.h: 71: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6586  001674  0E0F               	movlw	15
  6587  001676  6E04               	movwf	??_Lcd_Init& (0+255),c
  6588  001678  0E48               	movlw	72
  6589  00167A                     u3467:
  6590  00167A  2EE8               	decfsz	wreg,f,c
  6591  00167C  D7FE               	bra	u3467
  6592  00167E  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6593  001680  D7FC               	bra	u3467
  6594                           
  6595                           ;lcd.h: 72: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6596  001682  0E0F               	movlw	15
  6597  001684  6E04               	movwf	??_Lcd_Init& (0+255),c
  6598  001686  0E48               	movlw	72
  6599  001688                     u3477:
  6600  001688  2EE8               	decfsz	wreg,f,c
  6601  00168A  D7FE               	bra	u3477
  6602  00168C  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6603  00168E  D7FC               	bra	u3477
  6604                           
  6605                           ;lcd.h: 73: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6606  001690  0E0F               	movlw	15
  6607  001692  6E04               	movwf	??_Lcd_Init& (0+255),c
  6608  001694  0E48               	movlw	72
  6609  001696                     u3487:
  6610  001696  2EE8               	decfsz	wreg,f,c
  6611  001698  D7FE               	bra	u3487
  6612  00169A  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6613  00169C  D7FC               	bra	u3487
  6614                           
  6615                           ;lcd.h: 74: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6616  00169E  0E0F               	movlw	15
  6617  0016A0  6E04               	movwf	??_Lcd_Init& (0+255),c
  6618  0016A2  0E48               	movlw	72
  6619  0016A4                     u3497:
  6620  0016A4  2EE8               	decfsz	wreg,f,c
  6621  0016A6  D7FE               	bra	u3497
  6622  0016A8  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6623  0016AA  D7FC               	bra	u3497
  6624                           
  6625                           ;lcd.h: 76: for(data = 1; data < 4; data ++)
  6626  0016AC  0E01               	movlw	1
  6627  0016AE  6E05               	movwf	Lcd_Init@data,c
  6628  0016B0  D01E               	goto	L5
  6629  0016B2                     l59:
  6630                           
  6631                           ;lcd.h: 77: {
  6632                           ;lcd.h: 78: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 = 1; 
      +                          PORTDbits.RD0 = 0;
  6633  0016B2  9E83               	bcf	3971,7,c	;volatile
  6634  0016B4  9C83               	bcf	3971,6,c	;volatile
  6635  0016B6  8A83               	bsf	3971,5,c	;volatile
  6636  0016B8  8883               	bsf	3971,4,c	;volatile
  6637  0016BA  9083               	bcf	3971,0,c	;volatile
  6638                           
  6639                           ;lcd.h: 79: PORTDbits.RD1 = 0; PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; 
      +                          PORTDbits.RD4 = 1;
  6640  0016BC  9283               	bcf	3971,1,c	;volatile
  6641  0016BE  9E83               	bcf	3971,7,c	;volatile
  6642  0016C0  9C83               	bcf	3971,6,c	;volatile
  6643  0016C2  8A83               	bsf	3971,5,c	;volatile
  6644  0016C4  8883               	bsf	3971,4,c	;volatile
  6645                           
  6646                           ;lcd.h: 80: PORTDbits.RD0 = 1; PORTDbits.RD1 = 0;
  6647  0016C6  8083               	bsf	3971,0,c	;volatile
  6648  0016C8  9283               	bcf	3971,1,c	;volatile
  6649                           
  6650                           ;lcd.h: 81: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6651  0016CA  0E03               	movlw	3
  6652  0016CC                     u3507:
  6653  0016CC  2EE8               	decfsz	wreg,f,c
  6654  0016CE  D7FE               	bra	u3507
  6655  0016D0  F000               	nop	
  6656                           
  6657                           ;lcd.h: 82: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 = 1; 
      +                          PORTDbits.RD0 = 0;
  6658  0016D2  9E83               	bcf	3971,7,c	;volatile
  6659  0016D4  9C83               	bcf	3971,6,c	;volatile
  6660  0016D6  8A83               	bsf	3971,5,c	;volatile
  6661  0016D8  8883               	bsf	3971,4,c	;volatile
  6662  0016DA  9083               	bcf	3971,0,c	;volatile
  6663                           
  6664                           ;lcd.h: 83: PORTDbits.RD1 = 0;
  6665  0016DC  9283               	bcf	3971,1,c	;volatile
  6666                           
  6667                           ;lcd.h: 84: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6668  0016DE  0E0F               	movlw	15
  6669  0016E0  6E04               	movwf	??_Lcd_Init& (0+255),c
  6670  0016E2  0E48               	movlw	72
  6671  0016E4                     u3517:
  6672  0016E4  2EE8               	decfsz	wreg,f,c
  6673  0016E6  D7FE               	bra	u3517
  6674  0016E8  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6675  0016EA  D7FC               	bra	u3517
  6676  0016EC  2A05               	incf	Lcd_Init@data,f,c
  6677  0016EE                     L5:
  6678  0016EE  0E03               	movlw	3
  6679  0016F0  6405               	cpfsgt	Lcd_Init@data,c
  6680  0016F2  D7DF               	goto	l59
  6681                           
  6682                           ;lcd.h: 85: }
  6683                           ;lcd.h: 86: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 = 0; 
      +                          PORTDbits.RD0 = 0; PORTDbits.RD1 = 0;
  6684  0016F4  9E83               	bcf	3971,7,c	;volatile
  6685  0016F6  9C83               	bcf	3971,6,c	;volatile
  6686  0016F8  8A83               	bsf	3971,5,c	;volatile
  6687  0016FA  9883               	bcf	3971,4,c	;volatile
  6688  0016FC  9083               	bcf	3971,0,c	;volatile
  6689  0016FE  9283               	bcf	3971,1,c	;volatile
  6690                           
  6691                           ;lcd.h: 87: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 = 0; 
      +                          PORTDbits.RD0 = 1; PORTDbits.RD1 = 0;
  6692  001700  9E83               	bcf	3971,7,c	;volatile
  6693  001702  9C83               	bcf	3971,6,c	;volatile
  6694  001704  8A83               	bsf	3971,5,c	;volatile
  6695  001706  9883               	bcf	3971,4,c	;volatile
  6696  001708  8083               	bsf	3971,0,c	;volatile
  6697  00170A  9283               	bcf	3971,1,c	;volatile
  6698                           
  6699                           ;lcd.h: 88: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6700  00170C  0E03               	movlw	3
  6701  00170E                     u3527:
  6702  00170E  2EE8               	decfsz	wreg,f,c
  6703  001710  D7FE               	bra	u3527
  6704  001712  F000               	nop	
  6705                           
  6706                           ;lcd.h: 89: PORTDbits.RD7 = 0; PORTDbits.RD6 = 0; PORTDbits.RD5 = 1; PORTDbits.RD4 = 0; 
      +                          PORTDbits.RD0 = 0; PORTDbits.RD1 = 0;
  6707  001714  9E83               	bcf	3971,7,c	;volatile
  6708  001716  9C83               	bcf	3971,6,c	;volatile
  6709  001718  8A83               	bsf	3971,5,c	;volatile
  6710  00171A  9883               	bcf	3971,4,c	;volatile
  6711  00171C  9083               	bcf	3971,0,c	;volatile
  6712  00171E  9283               	bcf	3971,1,c	;volatile
  6713                           
  6714                           ;lcd.h: 90: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6715  001720  0E0F               	movlw	15
  6716  001722  6E04               	movwf	??_Lcd_Init& (0+255),c
  6717  001724  0E48               	movlw	72
  6718  001726                     u3537:
  6719  001726  2EE8               	decfsz	wreg,f,c
  6720  001728  D7FE               	bra	u3537
  6721  00172A  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  6722  00172C  D7FC               	bra	u3537
  6723                           
  6724                           ;lcd.h: 91: data = 40; Lcd_Cmd(data);
  6725  00172E  0E28               	movlw	40
  6726  001730  6E05               	movwf	Lcd_Init@data,c
  6727  001732  5005               	movf	Lcd_Init@data,w,c
  6728  001734  EC8C  F00A         	call	_Lcd_Cmd
  6729                           
  6730                           ;lcd.h: 92: data = 16; Lcd_Cmd(data);
  6731  001738  0E10               	movlw	16
  6732  00173A  6E05               	movwf	Lcd_Init@data,c
  6733  00173C  5005               	movf	Lcd_Init@data,w,c
  6734  00173E  EC8C  F00A         	call	_Lcd_Cmd
  6735                           
  6736                           ;lcd.h: 93: data = 1; Lcd_Cmd(data);
  6737  001742  0E01               	movlw	1
  6738  001744  6E05               	movwf	Lcd_Init@data,c
  6739  001746  5005               	movf	Lcd_Init@data,w,c
  6740  001748  EC8C  F00A         	call	_Lcd_Cmd
  6741                           
  6742                           ;lcd.h: 94: data = 15; Lcd_Cmd(data);
  6743  00174C  0E0F               	movlw	15
  6744  00174E  6E05               	movwf	Lcd_Init@data,c
  6745  001750  5005               	movf	Lcd_Init@data,w,c
  6746  001752  EC8C  F00A         	call	_Lcd_Cmd
  6747  001756  0012               	return		;funcret
  6748  001758                     __end_of_Lcd_Init:
  6749                           	opt stack 0
  6750                           tblptru	equ	0xFF8
  6751                           tblptrh	equ	0xFF7
  6752                           tblptrl	equ	0xFF6
  6753                           tablat	equ	0xFF5
  6754                           prodh	equ	0xFF4
  6755                           prodl	equ	0xFF3
  6756                           intcon	equ	0xFF2
  6757                           postinc0	equ	0xFEE
  6758                           wreg	equ	0xFE8
  6759                           postdec1	equ	0xFE5
  6760                           fsr1h	equ	0xFE2
  6761                           fsr1l	equ	0xFE1
  6762                           indf2	equ	0xFDF
  6763                           postinc2	equ	0xFDE
  6764                           postdec2	equ	0xFDD
  6765                           fsr2h	equ	0xFDA
  6766                           fsr2l	equ	0xFD9
  6767                           status	equ	0xFD8
  6768                           
  6769 ;; *************** function _Lcd_Cmd *****************
  6770 ;; Defined at:
  6771 ;;		line 154 in file "lcd.h"
  6772 ;; Parameters:    Size  Location     Type
  6773 ;;  data            1    wreg     unsigned char 
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;  data            1    2[COMRAM] unsigned char 
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  1    wreg      void 
  6778 ;; Registers used:
  6779 ;;		wreg, status,2, status,0
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6785 ;;      Params:         0       0       0       0       0       0       0
  6786 ;;      Locals:         1       0       0       0       0       0       0
  6787 ;;      Temps:          2       0       0       0       0       0       0
  6788 ;;      Totals:         3       0       0       0       0       0       0
  6789 ;;Total ram usage:        3 bytes
  6790 ;; Hardware stack levels used:    1
  6791 ;; This function calls:
  6792 ;;		Nothing
  6793 ;; This function is called by:
  6794 ;;		_Lcd_Init
  6795 ;;		_Lcd_Out
  6796 ;;		_main
  6797 ;;		_Lcd_Out2
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           	psect	text37
  6802  001518                     __ptext37:
  6803                           	opt stack 0
  6804  001518                     _Lcd_Cmd:
  6805                           	opt stack 29
  6806                           
  6807                           ;incstack = 0
  6808                           ;Lcd_Cmd@data stored from wreg
  6809  001518  6E03               	movwf	Lcd_Cmd@data,c
  6810                           
  6811                           ;lcd.h: 156: PORTDbits.RD0 = 0; PORTDbits.RD1 = 0;
  6812  00151A  9083               	bcf	3971,0,c	;volatile
  6813  00151C  9283               	bcf	3971,1,c	;volatile
  6814                           
  6815                           ;lcd.h: 157: PORTDbits.RD7 = (data & 0b10000000)>>7; PORTDbits.RD6 = (data & 0b01000000)
      +                          >>6;
  6816  00151E  6A01               	clrf	??_Lcd_Cmd& (0+255),c
  6817  001520  AE03               	btfss	Lcd_Cmd@data,7,c
  6818  001522  D001               	bra	u1325
  6819  001524  2A01               	incf	??_Lcd_Cmd& (0+255),f,c
  6820  001526                     u1325:
  6821  001526  0E01               	movlw	1
  6822  001528  1601               	andwf	??_Lcd_Cmd,f,c
  6823  00152A  3201               	rrcf	??_Lcd_Cmd,f,c
  6824  00152C  3201               	rrcf	??_Lcd_Cmd,f,c
  6825  00152E  5083               	movf	3971,w,c	;volatile
  6826  001530  1801               	xorwf	??_Lcd_Cmd,w,c
  6827  001532  0B7F               	andlw	-129
  6828  001534  1801               	xorwf	??_Lcd_Cmd,w,c
  6829  001536  6E83               	movwf	3971,c	;volatile
  6830  001538  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6831  00153C  0E06               	movlw	6
  6832  00153E  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  6833  001540                     u1335:
  6834  001540  90D8               	bcf	status,0,c
  6835  001542  3201               	rrcf	??_Lcd_Cmd,f,c
  6836  001544  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  6837  001546  D7FC               	goto	u1335
  6838  001548  0E01               	movlw	1
  6839  00154A  1601               	andwf	??_Lcd_Cmd,f,c
  6840  00154C  3A01               	swapf	??_Lcd_Cmd,f,c
  6841  00154E  4601               	rlncf	??_Lcd_Cmd,f,c
  6842  001550  4601               	rlncf	??_Lcd_Cmd,f,c
  6843  001552  5083               	movf	3971,w,c	;volatile
  6844  001554  1801               	xorwf	??_Lcd_Cmd,w,c
  6845  001556  0BBF               	andlw	-65
  6846  001558  1801               	xorwf	??_Lcd_Cmd,w,c
  6847  00155A  6E83               	movwf	3971,c	;volatile
  6848                           
  6849                           ;lcd.h: 158: PORTDbits.RD5 = (data & 0b00100000)>>5; PORTDbits.RD4 = (data & 0b00010000)
      +                          >>4;
  6850  00155C  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6851  001560  0E05               	movlw	5
  6852  001562  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  6853  001564                     u1345:
  6854  001564  90D8               	bcf	status,0,c
  6855  001566  3201               	rrcf	??_Lcd_Cmd,f,c
  6856  001568  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  6857  00156A  D7FC               	goto	u1345
  6858  00156C  0E01               	movlw	1
  6859  00156E  1601               	andwf	??_Lcd_Cmd,f,c
  6860  001570  3A01               	swapf	??_Lcd_Cmd,f,c
  6861  001572  4601               	rlncf	??_Lcd_Cmd,f,c
  6862  001574  5083               	movf	3971,w,c	;volatile
  6863  001576  1801               	xorwf	??_Lcd_Cmd,w,c
  6864  001578  0BDF               	andlw	-33
  6865  00157A  1801               	xorwf	??_Lcd_Cmd,w,c
  6866  00157C  6E83               	movwf	3971,c	;volatile
  6867  00157E  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6868  001582  3A01               	swapf	??_Lcd_Cmd,f,c
  6869  001584  0E0F               	movlw	15
  6870  001586  1601               	andwf	??_Lcd_Cmd,f,c
  6871  001588  0E01               	movlw	1
  6872  00158A  1601               	andwf	??_Lcd_Cmd,f,c
  6873  00158C  3A01               	swapf	??_Lcd_Cmd,f,c
  6874  00158E  5083               	movf	3971,w,c	;volatile
  6875  001590  1801               	xorwf	??_Lcd_Cmd,w,c
  6876  001592  0BEF               	andlw	-17
  6877  001594  1801               	xorwf	??_Lcd_Cmd,w,c
  6878  001596  6E83               	movwf	3971,c	;volatile
  6879                           
  6880                           ;lcd.h: 159: _delay(10);
  6881  001598  0E03               	movlw	3
  6882  00159A                     u3547:
  6883  00159A  2EE8               	decfsz	wreg,f,c
  6884  00159C  D7FE               	bra	u3547
  6885  00159E  F000               	nop	
  6886                           
  6887                           ;lcd.h: 160: PORTDbits.RD0 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PORTDb
      +                          its.RD0 = 0;
  6888  0015A0  8083               	bsf	3971,0,c	;volatile
  6889  0015A2  0E03               	movlw	3
  6890  0015A4                     u3557:
  6891  0015A4  2EE8               	decfsz	wreg,f,c
  6892  0015A6  D7FE               	bra	u3557
  6893  0015A8  F000               	nop	
  6894  0015AA  9083               	bcf	3971,0,c	;volatile
  6895                           
  6896                           ;lcd.h: 161: PORTDbits.RD7 = (data & 0b00001000)>>3; PORTDbits.RD6 = (data & 0b00000100)
      +                          >>2;
  6897  0015AC  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6898  0015B0  90D8               	bcf	status,0,c
  6899  0015B2  3201               	rrcf	??_Lcd_Cmd,f,c
  6900  0015B4  90D8               	bcf	status,0,c
  6901  0015B6  3201               	rrcf	??_Lcd_Cmd,f,c
  6902  0015B8  90D8               	bcf	status,0,c
  6903  0015BA  3201               	rrcf	??_Lcd_Cmd,f,c
  6904  0015BC  0E01               	movlw	1
  6905  0015BE  1601               	andwf	??_Lcd_Cmd,f,c
  6906  0015C0  3201               	rrcf	??_Lcd_Cmd,f,c
  6907  0015C2  3201               	rrcf	??_Lcd_Cmd,f,c
  6908  0015C4  5083               	movf	3971,w,c	;volatile
  6909  0015C6  1801               	xorwf	??_Lcd_Cmd,w,c
  6910  0015C8  0B7F               	andlw	-129
  6911  0015CA  1801               	xorwf	??_Lcd_Cmd,w,c
  6912  0015CC  6E83               	movwf	3971,c	;volatile
  6913  0015CE  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6914  0015D2  90D8               	bcf	status,0,c
  6915  0015D4  3201               	rrcf	??_Lcd_Cmd,f,c
  6916  0015D6  90D8               	bcf	status,0,c
  6917  0015D8  3201               	rrcf	??_Lcd_Cmd,f,c
  6918  0015DA  0E01               	movlw	1
  6919  0015DC  1601               	andwf	??_Lcd_Cmd,f,c
  6920  0015DE  3A01               	swapf	??_Lcd_Cmd,f,c
  6921  0015E0  4601               	rlncf	??_Lcd_Cmd,f,c
  6922  0015E2  4601               	rlncf	??_Lcd_Cmd,f,c
  6923  0015E4  5083               	movf	3971,w,c	;volatile
  6924  0015E6  1801               	xorwf	??_Lcd_Cmd,w,c
  6925  0015E8  0BBF               	andlw	-65
  6926  0015EA  1801               	xorwf	??_Lcd_Cmd,w,c
  6927  0015EC  6E83               	movwf	3971,c	;volatile
  6928                           
  6929                           ;lcd.h: 162: PORTDbits.RD5 = (data & 0b00000010)>>1; PORTDbits.RD4 = (data & 0b00000001)
      +                          ;
  6930  0015EE  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6931  0015F2  90D8               	bcf	status,0,c
  6932  0015F4  3201               	rrcf	??_Lcd_Cmd,f,c
  6933  0015F6  0E01               	movlw	1
  6934  0015F8  1601               	andwf	??_Lcd_Cmd,f,c
  6935  0015FA  3A01               	swapf	??_Lcd_Cmd,f,c
  6936  0015FC  4601               	rlncf	??_Lcd_Cmd,f,c
  6937  0015FE  5083               	movf	3971,w,c	;volatile
  6938  001600  1801               	xorwf	??_Lcd_Cmd,w,c
  6939  001602  0BDF               	andlw	-33
  6940  001604  1801               	xorwf	??_Lcd_Cmd,w,c
  6941  001606  6E83               	movwf	3971,c	;volatile
  6942  001608  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6943  00160C  0E01               	movlw	1
  6944  00160E  1601               	andwf	??_Lcd_Cmd,f,c
  6945  001610  3A01               	swapf	??_Lcd_Cmd,f,c
  6946  001612  5083               	movf	3971,w,c	;volatile
  6947  001614  1801               	xorwf	??_Lcd_Cmd,w,c
  6948  001616  0BEF               	andlw	-17
  6949  001618  1801               	xorwf	??_Lcd_Cmd,w,c
  6950  00161A  6E83               	movwf	3971,c	;volatile
  6951                           
  6952                           ;lcd.h: 163: _delay(10);
  6953  00161C  0E03               	movlw	3
  6954  00161E                     u3567:
  6955  00161E  2EE8               	decfsz	wreg,f,c
  6956  001620  D7FE               	bra	u3567
  6957  001622  F000               	nop	
  6958                           
  6959                           ;lcd.h: 164: PORTDbits.RD0 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PORTDb
      +                          its.RD0 = 0;
  6960  001624  8083               	bsf	3971,0,c	;volatile
  6961  001626  0E03               	movlw	3
  6962  001628                     u3577:
  6963  001628  2EE8               	decfsz	wreg,f,c
  6964  00162A  D7FE               	bra	u3577
  6965  00162C  F000               	nop	
  6966  00162E  9083               	bcf	3971,0,c	;volatile
  6967                           
  6968                           ;lcd.h: 165: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6969  001630  0E0F               	movlw	15
  6970  001632  6E01               	movwf	??_Lcd_Cmd& (0+255),c
  6971  001634  0E48               	movlw	72
  6972  001636                     u3587:
  6973  001636  2EE8               	decfsz	wreg,f,c
  6974  001638  D7FE               	bra	u3587
  6975  00163A  2E01               	decfsz	??_Lcd_Cmd& (0+255),f,c
  6976  00163C  D7FC               	bra	u3587
  6977  00163E  0012               	return		;funcret
  6978  001640                     __end_of_Lcd_Cmd:
  6979                           	opt stack 0
  6980                           tblptru	equ	0xFF8
  6981                           tblptrh	equ	0xFF7
  6982                           tblptrl	equ	0xFF6
  6983                           tablat	equ	0xFF5
  6984                           prodh	equ	0xFF4
  6985                           prodl	equ	0xFF3
  6986                           intcon	equ	0xFF2
  6987                           postinc0	equ	0xFEE
  6988                           wreg	equ	0xFE8
  6989                           postdec1	equ	0xFE5
  6990                           fsr1h	equ	0xFE2
  6991                           fsr1l	equ	0xFE1
  6992                           indf2	equ	0xFDF
  6993                           postinc2	equ	0xFDE
  6994                           postdec2	equ	0xFDD
  6995                           fsr2h	equ	0xFDA
  6996                           fsr2l	equ	0xFD9
  6997                           status	equ	0xFD8
  6998                           tblptru	equ	0xFF8
  6999                           tblptrh	equ	0xFF7
  7000                           tblptrl	equ	0xFF6
  7001                           tablat	equ	0xFF5
  7002                           prodh	equ	0xFF4
  7003                           prodl	equ	0xFF3
  7004                           intcon	equ	0xFF2
  7005                           postinc0	equ	0xFEE
  7006                           wreg	equ	0xFE8
  7007                           postdec1	equ	0xFE5
  7008                           fsr1h	equ	0xFE2
  7009                           fsr1l	equ	0xFE1
  7010                           indf2	equ	0xFDF
  7011                           postinc2	equ	0xFDE
  7012                           postdec2	equ	0xFDD
  7013                           fsr2h	equ	0xFDA
  7014                           fsr2l	equ	0xFD9
  7015                           status	equ	0xFD8
  7016                           
  7017                           	psect	rparam
  7018  0000                     tblptru	equ	0xFF8
  7019                           tblptrh	equ	0xFF7
  7020                           tblptrl	equ	0xFF6
  7021                           tablat	equ	0xFF5
  7022                           prodh	equ	0xFF4
  7023                           prodl	equ	0xFF3
  7024                           intcon	equ	0xFF2
  7025                           postinc0	equ	0xFEE
  7026                           wreg	equ	0xFE8
  7027                           postdec1	equ	0xFE5
  7028                           fsr1h	equ	0xFE2
  7029                           fsr1l	equ	0xFE1
  7030                           indf2	equ	0xFDF
  7031                           postinc2	equ	0xFDE
  7032                           postdec2	equ	0xFDD
  7033                           fsr2h	equ	0xFDA
  7034                           fsr2l	equ	0xFD9
  7035                           status	equ	0xFD8


Data Sizes:
    Strings     71
    Constant    40
    Data        4
    BSS         339
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     80      95
    BANK0           160      0      28
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(2) Largest target is 2
		 -> Lcd_Write_Float@status(COMRAM[2]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_11(CODE[2]), STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), STR_6(CODE[7]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 300
		 -> NULL(NULL[0]), uartBuffer(BIGRAM[300]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_11(CODE[2]), STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), STR_6(CODE[7]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_11(CODE[2]), STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), STR_6(CODE[7]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 300
		 -> NULL(NULL[0]), uartBuffer(BIGRAM[300]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 300
		 -> NULL(NULL[0]), uartBuffer(BIGRAM[300]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_11(CODE[2]), STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), STR_6(CODE[7]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 300
		 -> NULL(NULL[0]), uartBuffer(BIGRAM[300]), 

    memset@p1	PTR void  size(2) Largest target is 8
		 -> conversionString(BANK0[8]), 

    memset@p	PTR unsigned char  size(2) Largest target is 8
		 -> conversionString(BANK0[8]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> conversionString(BANK0[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> conversionString(BANK0[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 300
		 -> NULL(NULL[0]), uartBuffer(BIGRAM[300]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 300
		 -> NULL(NULL[0]), uartBuffer(BIGRAM[300]), 

    ftoa@cp	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    atof@s	PTR const unsigned char  size(2) Largest target is 300
		 -> conversionString(BANK0[8]), NULL(NULL[0]), uartBuffer(BIGRAM[300]), 

    strtod@s	PTR const unsigned char  size(2) Largest target is 300
		 -> conversionString(BANK0[8]), NULL(NULL[0]), uartBuffer(BIGRAM[300]), 

    strtod@res	PTR PTR const unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_12(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> conversionString(BANK0[8]), 

    sp__memset	PTR void  size(2) Largest target is 8
		 -> conversionString(BANK0[8]), 

    terminator	PTR unsigned char  size(2) Largest target is 300
		 -> NULL(NULL[0]), uartBuffer(BIGRAM[300]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 300
		 -> NULL(NULL[0]), uartBuffer(BIGRAM[300]), 

    data	PTR unsigned char  size(2) Largest target is 300
		 -> NULL(NULL[0]), uartBuffer(BIGRAM[300]), 

    latitude	PTR  size(2) Largest target is 3
		 -> lat(COMRAM[3]), 

    longitude	PTR  size(2) Largest target is 3
		 -> lon(BANK0[3]), 

    UART_Read_Char@Output	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), 

    sp__ftoa	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    Lcd_Write_Float@buf11	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    LCD_String@str	PTR const unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK0[17]), 

    Lcd_Out@buffer	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_5(CODE[1]), STR_4(CODE[1]), STR_3(CODE[16]), STR_2(CODE[17]), 
		 -> STR_1(CODE[18]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_Write_Float
    _read_gps->___ftadd
    _strstr->_strncmp
    _strncmp->_strlen
    _atof->_strtod
    _strtod->___ftdiv
    _strtod->___ftmul
    ___ftdiv->___ftpack
    ___altoft->___ftpack
    _UART_Init->___aldiv
    _Lcd_Write_Float->_ftoa
    _ftoa->___ftsub
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftadd->_atof
    ___ftmul->___ftpack
    _LCD_String->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   43945
                                             78 COMRAM     2     2      0
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                    _Lcd_Write_Float
                          _UART_Init
                           _read_gps
 ---------------------------------------------------------------------------------
 (1) _read_gps                                             5     5      0   27143
                                             50 COMRAM     5     5      0
                     _UART_Read_Char
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                               _atof
                             _memcpy
                             _memset
                             _strstr
 ---------------------------------------------------------------------------------
 (2) _strstr                                               4     0      4    1857
                                             15 COMRAM     4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (3) _strncmp                                              9     3      6     362
                                              6 COMRAM     9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     166
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _strchr                                               5     1      4     240
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     552
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              11     5      6     599
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (2) _atof                                                 3     0      3   12827
                                             35 COMRAM     3     0      3
                             _strtod
 ---------------------------------------------------------------------------------
 (3) _strtod                                              12     8      4   12501
                                             23 COMRAM    12     8      4
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                             ___lmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (4) _isspace                                              3     3      0      90
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     370
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     440
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3519
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2719
                                              8 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _UART_Read_Char                                       4     2      2      99
                                              0 COMRAM     4     2      2
                          _UART_Read
 ---------------------------------------------------------------------------------
 (3) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           14    10      4     836
                                             14 COMRAM    14    10      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_Float                                      7     4      3   14376
                                             71 COMRAM     7     4      3
                         _LCD_String
                               _ftoa
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                15    10      5   13837
                                             56 COMRAM    15    10      5
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             37    25     12    2219
                                             22 COMRAM    28    16     12
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     311
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     404
                                             23 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4272
                                             50 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    3927
                                             38 COMRAM    12     6      6
                            ___ftdiv (ARG)
                           ___ftpack
                               _atof (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     197
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    3717
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           4     2      2     320
                                              3 COMRAM     2     0      2
                         _Lcd_Chr_CP
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out                                              5     2      3    1260
                                              3 COMRAM     5     2      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Chr_CP                                           3     3      0     199
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     210
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     120
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Lcd_Chr_CP
     _Lcd_Cmd
   _Lcd_Write_Float
     _LCD_String
       _Lcd_Chr_CP
     _ftoa
       ___ftmul
         ___ftpack
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftdiv (ARG)
             ___ftpack
           ___ftpack (ARG)
           _atof (ARG)
             _strtod
               ___altoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___ftpack
               ___ftneg
               ___lmul
               _isdigit
               _isspace
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit
   _UART_Init
     ___aldiv
   _read_gps
     _UART_Read_Char
       _UART_Read
     ___ftadd
       ___ftdiv (ARG)
         ___ftpack
       ___ftpack (ARG)
       _atof (ARG)
         _strtod
           ___altoft
             ___ftpack
           ___ftdiv
             ___ftpack
           ___ftge
           ___ftmul
             ___ftpack
           ___ftneg
           ___lmul
           _isdigit
           _isspace
     ___ftdiv
       ___ftpack
     ___ftmul
       ___ftpack
     _atof
       _strtod
         ___altoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___ftpack
         ___ftneg
         ___lmul
         _isdigit
         _isspace
     _memcpy
     _memset
     _strstr
       _strchr
       _strlen
       _strncmp
         _strlen (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     12C      17       19.5%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      1C       5       17.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     50      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7B      15        0.0%
DATA                 0      0     1A7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Apr 11 21:10:30 2018

            ___altoft@exp 0011                         _c 0058                         _d 0057  
                       _i 0053             ___altoft@sign 0012                        l71 208C  
                      l72 2078                        l64 2056                        l65 203C  
                      l90 12BE                        l66 2070                        l59 16B2  
                      l67 2042                        l68 2048                        l69 204E  
                      l97 23E4                        l98 23D2       ___wmul@multiplicand 0003  
             ?_LCD_String 0004              __CFG_CP0$OFF 000000              __CFG_CP1$OFF 000000  
            __CFG_CP2$OFF 000000              __CFG_CP3$OFF 000000              ___ftadd@exp1 0032  
            ___ftadd@exp2 0031              ___ftadd@sign 0030          ?_Lcd_Write_Float 0048  
                     l200 0E24                       l202 0EEC                       l106 1500  
                     l211 0EF6                       l203 0ED6                       l204 0EA0  
                     l221 0FDC                       l213 0EFA                       l230 1048  
                     l214 0F28                       l223 0FFC                       l215 0F48  
                     l224 1020                       l208 0F00                       l400 0690  
                     l225 1028                       l217 0F84                       l401 068C  
                     l410 0772                       l411 0768                       l403 06B8  
                     l229 10CE                       l245 21C8                       l421 07C2  
                     l405 06C4                       l510 1D18                       l318 1FEE  
                     l246 21DC                       l414 076C                       l406 06DC  
                     l182 0C56                       l174 0A40                       l319 1FE2  
                     l431 0958                       l407 06F4                       l512 1D56  
                     l432 08DC                       l168 1906                       l513 1D40  
                     l433 08B0                       l290 1C62                       l450 0A28  
                     l442 0990                       l426 084E                       l418 07AE  
                     l515 1D7E                       l443 0964                       l435 0912  
                     l427 0852                       l516 1D74                       l540 1156  
                     l620 19F2                       l292 1C90                       l436 08E8  
                     l428 0870                       l509 1D22                       l613 2268  
                     l197 0DE2                       l293 1C84                       l445 09C2  
                     l429 08A8                       l198 0DFC                       l446 0998  
                     l607 1790                       l439 094A                       l544 1180  
                     l632 242C                       l296 1CC4                       l448 0A08  
                     l625 1A26                       l617 198C                       l297 1CD2  
                     l289 1C4A                       l449 09FA                       l554 11DC  
                     l626 1A1A                       l298 1CE8                       l563 121A  
                     l555 11D2                       l619 1A02                       l564 1210  
                     l628 1A42                       l740 2240                       l549 11E6  
                     l573 1B70                       l581 1DD8                       l637 237E  
                     l741 2220                       l590 1AA4                       l566 123E  
                     l582 1E08                       l591 1AD6                       l567 125A  
                     l663 1F6C                       l575 1B98                       l592 1AE6  
                     l568 128A                       l664 1F60                       l576 1BD6  
                     l912 22A0                       l920 1F1C                       l673 20BE  
                     l577 1BFC                       l913 229C                       l594 1AFE  
                     l674 20B2                       l746 234E                       l595 1B0E  
                     l667 1FA0                       l747 233E                       l907 22EA  
                     l588 1A7C                       l684 2118                       l668 1FAE  
                     l685 210C                       l677 20E6                       l678 20F4  
                     l918 1F24                       l599 23C2                       l919 1EBE  
                     l880 1E74                       l878 1E9C                       l879 1E3A  
            __CFG_CPB$OFF 000000              __CFG_CPD$OFF 000000                       _lat 0059  
                     _lon 0079              __CFG_BORV$18 000000                       wreg 000FE8  
            __CFG_LVP$OFF 000000              ___ftdiv@cntr 0012              ___ftdiv@sign 0017  
                    l3102 0A68                      l2182 1E34                      l2614 0F88  
                    l2648 1048                      l2904 1EBE                      l2994 2220  
                    l2986 233E                      STR_1 0629                      STR_2 063B  
                    STR_3 064C                      STR_4 063A                      STR_5 063A  
                    STR_6 0667                      STR_7 066E                      STR_8 066E  
                    STR_9 066E                      _BRGH 007D62                      _CREN 007D5C  
                    u2000 11EE                      u2030 1222                      u2200 237A  
                    u2121 1A64                      u1325 1526                      u2141 1A8C  
                    u1335 1540                      u2071 1B58                      u1345 1564  
                    u3130 1C94                      u2091 1B80                      u2260 1F70  
                    u2325 12CA                      u3205 148A                      u3070 1EB2  
                    u2335 12E4                      u3215 14D4                      u2520 10DE  
                    u2345 1308                      u1730 1D0A                      u2290 20C2  
                    u2530 10F6                      u1900 1148                      u2460 0FC0  
                    u2380 0E80                      u3407 13C2                      u3175 13FE  
                    u3417 13CC                      u3185 1448                      u1770 1D88  
                    u1930 1172                      u3507 16CC                      u3427 13D6  
                    u2900 19AA                      u2660 0796                      u2580 06C0  
                    u3517 16E4                      u3437 13E2                      u1861 1114  
                    u3527 170E                      u3447 165E                      u1871 1128  
                    u3367 18B2                      u1960 11B0                      u2680 07BE  
                    u3537 1726                      u3457 166C                      u2905 19A2  
                    u3377 18FA                      u3547 159A                      u3467 167A  
                    u3387 133E                      u2940 1A2C                      u3557 15A4  
                    u3477 1688                      u3397 1348                      u3567 161E  
                    u3487 1696                      u3577 1628                      u3497 16A4  
                    u2881 1970                      u3587 1636                      _RCIF 007CF5  
                    u2990 1EEA                      _SPEN 007D5F                      _TRMT 007D61  
                    _TXEN 007D65                      _SYNC 007D64                      _data 0055  
                    _atof 23F4                      _main 1866                      _ftoa 1758  
            ___ftpack@arg 0001              ___ftpack@exp 0004                      fsr1h 000FE2  
                    fsr2h 000FDA                      indf2 000FDF                      fsr1l 000FE1  
                    fsr2l 000FD9                      prodh 000FF4                      prodl 000FF3  
                    start 0000             __CFG_IESO$OFF 000000           __end_of_Lcd_Cmd 1640  
         __end_of_Lcd_Out 20A0             __CFG_MCLRE$ON 000000              ___ftmul@cntr 0016  
            ___param_bank 000000              ___ftmul@sign 0017                _Lcd_Chr_CP 12B0  
            ___fttol@exp1 0026              ___fttol@lval 0022           __end_of___aldiv 1CFA  
                   ?_atof 0024                     ?_main 0001                     ?_ftoa 0039  
         __end_of___ftadd 12B0                     STR_10 066E                     STR_11 066E  
                   STR_12 065C           __end_of___ftdiv 1C2E           __end_of___ftneg 23D0  
         __end_of___lldiv 1FC0           __end_of___ftmul 1B48           __end_of___llmod 2106  
         __end_of___ftsub 2292           __end_of___fttol 1A54             __CFG_WDTEN$ON 000000  
                   _RCREG 000FAE                     _SPBRG 000FAF                     _TXREG 000FAD  
           __CFG_PWRT$OFF 000000             __CFG_WRT0$OFF 000000             __CFG_WRT1$OFF 000000  
           __CFG_WRT2$OFF 000000       ___lmul@multiplicand 0005             __CFG_WRT3$OFF 000000  
            ___lltoft@exp 0011            __CFG_EBTR0$OFF 000000            __CFG_FCMEN$OFF 000000  
          __CFG_EBTR1$OFF 000000            __CFG_EBTR2$OFF 000000            __CFG_EBTR3$OFF 000000  
      __size_of_UART_Init 012C        __size_of_UART_Read 0008             __CFG_WRTB$OFF 000000  
           __CFG_WRTC$OFF 000000             __CFG_WRTD$OFF 000000            __CFG_EBTRB$OFF 000000  
         __end_of_dpowers 0629           __end_of_isdigit 2434             ___ftpack@sign 0005  
                   atof@s 0024                     ftoa@f 0039                     ftoa@l 0042  
         __end_of_isspace 2386                     tablat 000FF5                     status 000FD8  
     __size_of_LCD_String 0024           __end_of_sprintf 1104            __CFG_HFOFST$ON 000000  
         __end_of_strncmp 1F3E          __end_of_Lcd_Init 1758           __initialization 2162  
            __end_of_atof 2416              __end_of_main 1960              __end_of_ftoa 1866  
                  ??_atof 0027                    ??_main 004F                    ??_ftoa 003E  
           ___fttol@sign1 0021             __activetblptr 000002                    _ADCON1 000FC1  
        __end_of___altoft 2038          ___llmod@dividend 000E          __end_of___ftpack 1DA8  
        __end_of___lltoft 2162                 ??_Lcd_Cmd 0001                 ??_Lcd_Out 0007  
                  _TRISC6 007CA6                    _TRISC7 007CA7            __CFG_XINST$OFF 000000  
       __end_of_UART_Init 1518         __end_of_UART_Read 2450                    ___ftge 1DA8  
                  ___lmul 21B8               ?_Lcd_Chr_CP 0001                 ??___aldiv 0009  
                  ___wmul 2386                 ??___ftadd 002D            __CFG_STVREN$ON 000000  
               ??___ftdiv 000F                 ??___ftneg 0004                 ??___lldiv 0009  
               ??___ftmul 000F                 ??___llmod 0016                 ??___ftsub 0039  
               ??___fttol 001C   __size_of_UART_Read_Char 0014                    _memcpy 220E  
                  _memset 2334                    clear_0 218A                    clear_1 219C  
                  clear_2 21A8          __end_of_read_gps 0DD8                    _strchr 22D0  
                  _strlen 2292                    _strtod 0672                    _strstr 1E38  
                  ftoa@cp 0046     ___ftmul@f3_as_product 0013              __pdataCOMRAM 005C  
               ??_isdigit 0001              __mediumconst 0000                 ??_isspace 0001  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
        Lcd_Write_Float@f 0048                 ??_sprintf 0023                 ??_strncmp 000D  
              __accesstop 0060   __end_of__initialization 21AE                ___altoft@c 0009  
         __CFG_PBADEN$OFF 000000                ___ftadd@f1 0027                ___ftadd@f2 002A  
              ___ftge@ff1 0001                ___ftge@ff2 0004             ___rparam_used 000001  
              ___ftdiv@f1 0009                ___ftdiv@f2 000C                ___ftdiv@f3 0013  
              ___ftneg@f1 0001                ___ftmul@f1 0009                ___ftmul@f2 000C  
              ___ftsub@f1 0033                ___ftsub@f2 0036                ___fttol@f1 0018  
          __pcstackCOMRAM 0001                ___lltoft@c 0009              ??_LCD_String 0006  
               ?_Lcd_Init 0001              sprintf@width 002E       __size_of_Lcd_Chr_CP 013C  
              __pbssBANK0 0060             _read_gps$1135 0035        __end_of_LCD_String 23F4  
                 ?___ftge 0001                   ?___lmul 0001                   ?___wmul 0001  
               ?___altoft 0009                   ?_memcpy 0001                   ?_memset 0001  
          ___lmul@product 0009                 ?___ftpack 0001                 ?___lltoft 0009  
                 ?_strchr 0001                   ?_strlen 0001                   ?_strtod 0018  
                 ?_strstr 0010                ??_Lcd_Init 0004  __size_of_Lcd_Write_Float 002E  
                 _Lcd_Cmd 1518                   _Lcd_Out 2038                 ?_read_gps 0001  
           LCD_String@str 0004                   __Hparam 0000                   __Lparam 0000  
                 ___aldiv 1C2E           __size_of___ftge 0090           __size_of___lmul 0056  
                 ___ftadd 1104                   ___ftdiv 1B48            _UART_Read_Char 2434  
                 ___ftneg 23AC                   ___lldiv 1F3E           __size_of___wmul 0026  
                 ___ftmul 1A54                   ___llmod 20A0                   ___ftsub 2252  
                 ___fttol 1960              __psmallconst 0600                ??___altoft 000D  
                 __pcinit 2162           __size_of_memcpy 0044                ??___ftpack 0006  
         __size_of_memset 002C                   __ramtop 0600                ??___lltoft 000D  
                 __ptext0 1866                   __ptext1 0A36                   __ptext2 1E38  
                 __ptext3 1EBC                   __ptext4 2292                   __ptext5 22D0  
                 __ptext6 2334                   __ptext7 220E                   __ptext8 23F4  
                 __ptext9 0672           __size_of_strchr 0036           __size_of_strlen 003E  
         __size_of_strtod 03C4           __size_of_strstr 0084                   _dpowers 0601  
                 _isdigit 2416          ___aldiv@dividend 0001                   _isspace 2360  
                 _sprintf 0DD8                   _strncmp 1EBC      end_of_initialization 21AE  
                 ftoa@buf 0060                   ftoa@rem 003E                   memcpy@d 0007  
                 memcpy@n 0005                   memcpy@s 0009                   memset@c 0003  
                 memset@n 0005                   memset@p 0007             __Lmediumconst 0000  
              ??_read_gps 0033           ___lldiv@divisor 0005           ___lldiv@counter 000D  
              _uartBuffer 04D4    __end_of_UART_Read_Char 2448          ___aldiv@quotient 000B  
            ??_Lcd_Chr_CP 0001                   postdec1 000FE5                   postdec2 000FDD  
                 postinc0 000FEE                   postinc2 000FDE                   strlen@s 0001  
               _UART_Init 13EC                 _UART_Read 2448                   strtod@s 0018  
              _terminator 0051                 _PORTDbits 000F83                 _TRISBbits 000F93  
               _TRISDbits 000F95        __end_of_Lcd_Chr_CP 13EC               ___ftdiv@exp 0016  
       ??_Lcd_Write_Float 004B           ?_UART_Read_Char 0001               ___ftmul@exp 0012  
          __end_of___ftge 1E38            __end_of___lmul 220E            __end_of___wmul 23AC  
              ?_UART_Init 000F                ?_UART_Read 0001             __pidataCOMRAM 2450  
          __end_of_memcpy 2252            __end_of_memset 2360     Lcd_Write_Float@status 004B  
          __end_of_strchr 2306            __end_of_strlen 22D0            __end_of_strtod 0A36  
          __end_of_strstr 1EBC       start_initialization 2162                ftoa@status 003C  
           Lcd_Out@buffer 0005         __size_of_Lcd_Init 0118           ___llmod@divisor 0012  
         ___llmod@counter 0016                  ??___ftge 0007                  ??___lmul 0009  
                ??___wmul 0005          __CFG_LPT1OSC$OFF 000000                  ??_memcpy 0007  
                ??_memset 0007                  ??_strchr 0005                  ??_strlen 0003  
                ??_strtod 001C                  ??_strstr 0014         __size_of___altoft 0078  
       __size_of___ftpack 00AE               __pbssBIGRAM 04D4         __size_of___lltoft 005C  
             __pbssCOMRAM 0051                  ?_Lcd_Cmd 0001               sprintf@flag 0027  
                ?_Lcd_Out 0004               sprintf@prec 0030         __size_of_read_gps 03A2  
       __CFG_CCP2MX$PORTC 000000                  ?___aldiv 0001                  ?___ftadd 0027  
                ?___ftdiv 0009                  ?___ftneg 0001                  ?___lldiv 0001  
                ?___ftmul 0009                  ?___llmod 000E                  ?___ftsub 0033  
                ?___fttol 0018               ??_UART_Init 0013               ??_UART_Read 0001  
             __smallconst 0600                  ?_isdigit 0001                  ?_isspace 0001  
                ?_sprintf 0017                  ?_strncmp 0007                UART_Init@x 001B  
         ___aldiv@divisor 0005          _conversionString 0071           ___aldiv@counter 0009  
          ___wmul@product 0005                 _longitude 005E                  _PIE1bits 000F9D  
    UART_Read_Char@Output 0001                  Lcd_Out@x 0004          __CFG_WDTPS$32768 000000  
                Lcd_Out@y 0007               strtod@flags 001E               strtod@expon 001F  
       UART_Init@baudrate 000F              Lcd_Init@data 0005         ___wmul@multiplier 0001  
         _Lcd_Write_Float 2306                  _Lcd_Init 1640      Lcd_Write_Float@buf11 004D  
       ___lmul@multiplier 0001                 copy_data0 2176          ??_UART_Read_Char 0003  
        __size_of_Lcd_Cmd 0128          __size_of_Lcd_Out 0068                  __Hrparam 0000  
               memcpy@tmp 000B                  __Lrparam 0000        __CFG_BOREN$SBORDIS 000000  
        __size_of___aldiv 00CC          __size_of___ftadd 01AC          __size_of___ftdiv 00E6  
        __size_of___ftneg 0024          __size_of___lldiv 0082                  ___altoft 1FC0  
        __size_of___ftmul 00F4          __size_of___llmod 0066          __size_of___ftsub 0040  
        __size_of___fttol 00F4                  ___ftpack 1CFA                  ___lltoft 2106  
             _isdigit$734 0002                sprintf@val 002A          __size_of_isdigit 001E  
          Lcd_Chr_CP@data 0003          __size_of_isspace 0026                  __ptext10 2360  
                __ptext11 21B8                  __ptext20 1758                  __ptext12 1DA8  
                __ptext21 0DD8                  __ptext13 1B48                  __ptext30 23AC  
                __ptext22 2416                  __ptext14 1FC0                  __ptext31 1A54  
                __ptext23 2386                  __ptext15 2434                  __ptext32 1CFA  
                __ptext24 20A0                  __ptext16 2448                  __ptext33 23D0  
                __ptext25 1F3E                  __ptext17 13EC                  __ptext34 2038  
                __ptext26 2106                  __ptext18 1C2E                  __ptext35 12B0  
                __ptext27 1960                  __ptext19 2306                  __ptext36 1640  
                __ptext28 2252                  __ptext37 1518                  __ptext29 1104  
        __size_of_sprintf 032C          __size_of_strncmp 0082               Lcd_Cmd@data 0003  
                _latitude 005C             __size_of_atof 0022             __size_of_main 00FA  
           __size_of_ftoa 010E                  _read_gps 0A36                strncmp@len 000B  
              strtod@eexp 001D                _LCD_String 23D0               _isspace$737 0002  
 __end_of_Lcd_Write_Float 2334               Lcd_Out@data 0008                _INTCONbits 000FF2  
                memcpy@d1 0001                  memcpy@s1 0003                  isdigit@c 0003  
                memset@p1 0001                 sprintf@ap 0028                 sprintf@sp 0017  
               strchr@chr 0003                 strchr@ptr 0001                  isspace@c 0003  
        ___lldiv@dividend 0001                 strncmp@s1 0007                 strncmp@s2 0009  
              _OSCCONbits 000FD3                 strtod@res 001A                  sprintf@c 0032  
                sprintf@f 0019          ___lldiv@quotient 0009                  strlen@cp 0005  
            ___aldiv@sign 000A                  strtod@_u 0020                  strstr@s1 0010  
                strstr@s2 0012         __CFG_FOSC$INTIO67 000000  
